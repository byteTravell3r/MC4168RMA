
MC4128RMA_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080045a0  080045a0  000055a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b8  080045b8  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080045b8  080045b8  000055b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045c0  080045c0  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c0  080045c0  000055c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045c4  080045c4  000055c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080045c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00000200  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000210  20000210  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c65b  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002310  00000000  00000000  0001269b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  000149b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074d  00000000  00000000  00015358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023755  00000000  00000000  00015aa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cfef  00000000  00000000  000391fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d320e  00000000  00000000  000461e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001193f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002608  00000000  00000000  0011943c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0011ba44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004588 	.word	0x08004588

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08004588 	.word	0x08004588

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <CAN1_START_IRQ>:

static uint32_t TxMailbox = CAN_TX_MAILBOX0;
static CAN_TxHeaderTypeDef TxHeader;
static uint8_t TxData[8];

void CAN1_START_IRQ() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80004e0:	480f      	ldr	r0, [pc, #60]	@ (8000520 <CAN1_START_IRQ+0x44>)
 80004e2:	f001 fb09 	bl	8001af8 <HAL_CAN_Start>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <CAN1_START_IRQ+0x14>
		Error_Handler();
 80004ec:	f000 fef8 	bl	80012e0 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 80004f0:	2104      	movs	r1, #4
 80004f2:	480b      	ldr	r0, [pc, #44]	@ (8000520 <CAN1_START_IRQ+0x44>)
 80004f4:	f001 fd36 	bl	8001f64 <HAL_CAN_ActivateNotification>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <CAN1_START_IRQ+0x26>
		Error_Handler();
 80004fe:	f000 feef 	bl	80012e0 <Error_Handler>
	}

	TxHeader.StdId = ADDR_3508_SET_ID0;
 8000502:	4b08      	ldr	r3, [pc, #32]	@ (8000524 <CAN1_START_IRQ+0x48>)
 8000504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000508:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <CAN1_START_IRQ+0x48>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000510:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <CAN1_START_IRQ+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 0x08;
 8000516:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <CAN1_START_IRQ+0x48>)
 8000518:	2208      	movs	r2, #8
 800051a:	611a      	str	r2, [r3, #16]
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	2000018c 	.word	0x2000018c
 8000524:	20000064 	.word	0x20000064

08000528 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000536:	4825      	ldr	r0, [pc, #148]	@ (80005cc <HAL_CAN_RxFifo0FullCallback+0xa4>)
 8000538:	f002 fad6 	bl	8002ae8 <HAL_GPIO_WritePin>
	static uint8_t RxData[8];
	static CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800053c:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 800053e:	4a25      	ldr	r2, [pc, #148]	@ (80005d4 <HAL_CAN_RxFifo0FullCallback+0xac>)
 8000540:	2100      	movs	r1, #0
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f001 fbec 	bl	8001d20 <HAL_CAN_GetRxMessage>
	uint32_t ID_NUM;
	ID_NUM = RxHeader.StdId - ADDR_3508_GET_ID1;
 8000548:	4b22      	ldr	r3, [pc, #136]	@ (80005d4 <HAL_CAN_RxFifo0FullCallback+0xac>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000550:	60fb      	str	r3, [r7, #12]
	if (ID_NUM == MotorX || ID_NUM == MotorY) {
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <HAL_CAN_RxFifo0FullCallback+0x36>
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d12b      	bne.n	80005b6 <HAL_CAN_RxFifo0FullCallback+0x8e>
		if (Motor[ID_NUM].MSG_COUNT++ <= 50) {
 800055e:	491e      	ldr	r1, [pc, #120]	@ (80005d8 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	4613      	mov	r3, r2
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	1a9b      	subs	r3, r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	440b      	add	r3, r1
 800056c:	3318      	adds	r3, #24
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	1c50      	adds	r0, r2, #1
 8000572:	4c19      	ldr	r4, [pc, #100]	@ (80005d8 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000574:	68f9      	ldr	r1, [r7, #12]
 8000576:	460b      	mov	r3, r1
 8000578:	00db      	lsls	r3, r3, #3
 800057a:	1a5b      	subs	r3, r3, r1
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4423      	add	r3, r4
 8000580:	3318      	adds	r3, #24
 8000582:	6018      	str	r0, [r3, #0]
 8000584:	2a32      	cmp	r2, #50	@ 0x32
 8000586:	d80b      	bhi.n	80005a0 <HAL_CAN_RxFifo0FullCallback+0x78>
			Motor_GetInitPosition(&Motor[ID_NUM], RxData);
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	4613      	mov	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4a11      	ldr	r2, [pc, #68]	@ (80005d8 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000594:	4413      	add	r3, r2
 8000596:	490e      	ldr	r1, [pc, #56]	@ (80005d0 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f88b 	bl	80006b4 <Motor_GetInitPosition>
 800059e:	e00a      	b.n	80005b6 <HAL_CAN_RxFifo0FullCallback+0x8e>
		} else
			Motor_ResolveFeedbackData(&Motor[ID_NUM], RxData);
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	4613      	mov	r3, r2
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 80005ac:	4413      	add	r3, r2
 80005ae:	4908      	ldr	r1, [pc, #32]	@ (80005d0 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f813 	bl	80005dc <Motor_ResolveFeedbackData>
	}
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <HAL_CAN_RxFifo0FullCallback+0xa4>)
 80005be:	f002 fa93 	bl	8002ae8 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd90      	pop	{r4, r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021800 	.word	0x40021800
 80005d0:	200000a0 	.word	0x200000a0
 80005d4:	20000084 	.word	0x20000084
 80005d8:	2000002c 	.word	0x2000002c

080005dc <Motor_ResolveFeedbackData>:

void Motor_ResolveFeedbackData(MotorDataTypeDef *MOTOR_STR, uint8_t DATA[]) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	MOTOR_STR->LAST_ANGLE = MOTOR_STR->CURR_ANGLE;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	88da      	ldrh	r2, [r3, #6]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	811a      	strh	r2, [r3, #8]
	MOTOR_STR->CURR_ANGLE = (uint16_t) (DATA[0] << 8 | DATA[1]);
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	021b      	lsls	r3, r3, #8
 80005f4:	b21a      	sxth	r2, r3
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b21b      	sxth	r3, r3
 8000602:	b29a      	uxth	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	80da      	strh	r2, [r3, #6]
	MOTOR_STR->RPM = (int16_t) (DATA[2] << 8 | DATA[3]);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	3302      	adds	r3, #2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	b21a      	sxth	r2, r3
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	3303      	adds	r3, #3
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21a      	sxth	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	801a      	strh	r2, [r3, #0]
	MOTOR_STR->I_REAL = (int16_t) (DATA[4] << 8 | DATA[5]) / -5;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3304      	adds	r3, #4
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	b21a      	sxth	r2, r3
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	3305      	adds	r3, #5
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b21b      	sxth	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b21b      	sxth	r3, r3
 8000638:	4a1d      	ldr	r2, [pc, #116]	@ (80006b0 <Motor_ResolveFeedbackData+0xd4>)
 800063a:	fb82 1203 	smull	r1, r2, r2, r3
 800063e:	1052      	asrs	r2, r2, #1
 8000640:	17db      	asrs	r3, r3, #31
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	b21a      	sxth	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	805a      	strh	r2, [r3, #2]
	MOTOR_STR->TEMPERATURE = DATA[6];
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	799a      	ldrb	r2, [r3, #6]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	731a      	strb	r2, [r3, #12]

	if (MOTOR_STR->CURR_ANGLE - MOTOR_STR->LAST_ANGLE > 4096)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	88db      	ldrh	r3, [r3, #6]
 8000656:	461a      	mov	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	891b      	ldrh	r3, [r3, #8]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000662:	dd05      	ble.n	8000670 <Motor_ResolveFeedbackData+0x94>
		MOTOR_STR->ROUNDS--;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	e00d      	b.n	800068c <Motor_ResolveFeedbackData+0xb0>
	else if (MOTOR_STR->CURR_ANGLE - MOTOR_STR->LAST_ANGLE < -4096)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	88db      	ldrh	r3, [r3, #6]
 8000674:	461a      	mov	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	891b      	ldrh	r3, [r3, #8]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 8000680:	da04      	bge.n	800068c <Motor_ResolveFeedbackData+0xb0>
		MOTOR_STR->ROUNDS++;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	611a      	str	r2, [r3, #16]

	MOTOR_STR->TOTAL_ANGLE = MOTOR_STR->ROUNDS * 8192 + MOTOR_STR->CURR_ANGLE
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	035b      	lsls	r3, r3, #13
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	88d2      	ldrh	r2, [r2, #6]
 8000696:	4413      	add	r3, r2
			- MOTOR_STR->OFFSET_ANGLE;
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	8952      	ldrh	r2, [r2, #10]
 800069c:	1a9a      	subs	r2, r3, r2
	MOTOR_STR->TOTAL_ANGLE = MOTOR_STR->ROUNDS * 8192 + MOTOR_STR->CURR_ANGLE
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	615a      	str	r2, [r3, #20]
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	66666667 	.word	0x66666667

080006b4 <Motor_GetInitPosition>:

void Motor_GetInitPosition(MotorDataTypeDef *MOTOR_STR, uint8_t DATA[]) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	MOTOR_STR->CURR_ANGLE = (uint16_t) (DATA[0] << 8 | DATA[1]);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	80da      	strh	r2, [r3, #6]
	MOTOR_STR->OFFSET_ANGLE = MOTOR_STR->CURR_ANGLE;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	88da      	ldrh	r2, [r3, #6]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	815a      	strh	r2, [r3, #10]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <Motor_SendCmd>:

void Motor_SendCmd(int16_t I1, int16_t I2) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	80fb      	strh	r3, [r7, #6]
 80006f8:	4613      	mov	r3, r2
 80006fa:	80bb      	strh	r3, [r7, #4]
	TxData[0] = I1 >> 8;
 80006fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000700:	121b      	asrs	r3, r3, #8
 8000702:	b21b      	sxth	r3, r3
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <Motor_SendCmd+0x5c>)
 8000708:	701a      	strb	r2, [r3, #0]
	TxData[1] = I1;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <Motor_SendCmd+0x5c>)
 8000710:	705a      	strb	r2, [r3, #1]
	TxData[2] = I2 >> 8;
 8000712:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000716:	121b      	asrs	r3, r3, #8
 8000718:	b21b      	sxth	r3, r3
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <Motor_SendCmd+0x5c>)
 800071e:	709a      	strb	r2, [r3, #2]
	TxData[3] = I2;
 8000720:	88bb      	ldrh	r3, [r7, #4]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <Motor_SendCmd+0x5c>)
 8000726:	70da      	strb	r2, [r3, #3]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <Motor_SendCmd+0x60>)
 800072a:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <Motor_SendCmd+0x5c>)
 800072c:	4908      	ldr	r1, [pc, #32]	@ (8000750 <Motor_SendCmd+0x64>)
 800072e:	4809      	ldr	r0, [pc, #36]	@ (8000754 <Motor_SendCmd+0x68>)
 8000730:	f001 fa26 	bl	8001b80 <HAL_CAN_AddTxMessage>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <Motor_SendCmd+0x52>
		Error_Handler();
 800073a:	f000 fdd1 	bl	80012e0 <Error_Handler>
	}
//	HAL_UART_Receive_IT(IBUS_UART, rx_buffer, 32);
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000007c 	.word	0x2000007c
 800074c:	20000000 	.word	0x20000000
 8000750:	20000064 	.word	0x20000064
 8000754:	2000018c 	.word	0x2000018c

08000758 <abs_limit>:
#include "USR_PID.h"
#include <math.h>

#define ABS(x) ( (x>0) ? (x) : (-x) )

void abs_limit(float *a, float ABS_MAX) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	ed87 0a00 	vstr	s0, [r7]
	if (*a > ABS_MAX)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	edd3 7a00 	vldr	s15, [r3]
 800076a:	ed97 7a00 	vldr	s14, [r7]
 800076e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000776:	d502      	bpl.n	800077e <abs_limit+0x26>
		*a = ABS_MAX;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	601a      	str	r2, [r3, #0]
	if (*a < -ABS_MAX)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	ed93 7a00 	vldr	s14, [r3]
 8000784:	edd7 7a00 	vldr	s15, [r7]
 8000788:	eef1 7a67 	vneg.f32	s15, s15
 800078c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000794:	d400      	bmi.n	8000798 <abs_limit+0x40>
		*a = -ABS_MAX;
}
 8000796:	e006      	b.n	80007a6 <abs_limit+0x4e>
		*a = -ABS_MAX;
 8000798:	edd7 7a00 	vldr	s15, [r7]
 800079c:	eef1 7a67 	vneg.f32	s15, s15
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	edc3 7a00 	vstr	s15, [r3]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <pid_param_init>:

static void pid_param_init(PID_TypeDef *pid, uint32_t maxout,
		uint32_t intergral_limit, float kp, float ki, float kd) {
 80007b2:	b480      	push	{r7}
 80007b4:	b087      	sub	sp, #28
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6178      	str	r0, [r7, #20]
 80007ba:	6139      	str	r1, [r7, #16]
 80007bc:	60fa      	str	r2, [r7, #12]
 80007be:	ed87 0a02 	vstr	s0, [r7, #8]
 80007c2:	edc7 0a01 	vstr	s1, [r7, #4]
 80007c6:	ed87 1a00 	vstr	s2, [r7]

	pid->IntegralLimit = intergral_limit;
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	651a      	str	r2, [r3, #80]	@ 0x50
	pid->MaxOutput = maxout;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	64da      	str	r2, [r3, #76]	@ 0x4c
	pid->p = kp;
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	601a      	str	r2, [r3, #0]
	pid->i = ki;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	605a      	str	r2, [r3, #4]
	pid->d = kd;
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	609a      	str	r2, [r3, #8]
}
 80007e8:	bf00      	nop
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <pid_reset>:

static void pid_reset(PID_TypeDef *pid, float kp, float ki, float kd) {
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000800:	edc7 0a01 	vstr	s1, [r7, #4]
 8000804:	ed87 1a00 	vstr	s2, [r7]
	pid->p = kp;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	601a      	str	r2, [r3, #0]
	pid->i = ki;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	605a      	str	r2, [r3, #4]
	pid->d = kd;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	609a      	str	r2, [r3, #8]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <PID_Calculate>:

uint8_t PID_Calculate(PID_TypeDef *pid, float get, float set) {
 8000826:	b580      	push	{r7, lr}
 8000828:	b084      	sub	sp, #16
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000832:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->get[CURR] = get;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->set[CURR] = set;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	621a      	str	r2, [r3, #32]
	pid->err[CURR] = set - get;	//set - measure
 8000842:	ed97 7a01 	vldr	s14, [r7, #4]
 8000846:	edd7 7a02 	vldr	s15, [r7, #8]
 800084a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	if (pid->MaxErr != 0 && ABS(pid->err[CURR]) > pid->MaxErr)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800085a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000862:	d01a      	beq.n	800089a <PID_Calculate+0x74>
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800086a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000872:	dd03      	ble.n	800087c <PID_Calculate+0x56>
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800087a:	e004      	b.n	8000886 <PID_Calculate+0x60>
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000882:	eef1 7a67 	vneg.f32	s15, s15
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800088c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000894:	dd01      	ble.n	800089a <PID_Calculate+0x74>
		return 0;
 8000896:	2300      	movs	r3, #0
 8000898:	e096      	b.n	80009c8 <PID_Calculate+0x1a2>
	if (pid->DeadBand != 0 && ABS(pid->err[CURR]) < pid->DeadBand)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80008a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80008a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008a8:	d01a      	beq.n	80008e0 <PID_Calculate+0xba>
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80008b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b8:	dd03      	ble.n	80008c2 <PID_Calculate+0x9c>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80008c0:	e004      	b.n	80008cc <PID_Calculate+0xa6>
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80008c8:	eef1 7a67 	vneg.f32	s15, s15
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80008d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008da:	d501      	bpl.n	80008e0 <PID_Calculate+0xba>
		return 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	e073      	b.n	80009c8 <PID_Calculate+0x1a2>

	pid->pout = pid->p * pid->err[CURR];
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	ed93 7a00 	vldr	s14, [r3]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80008ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->iout += pid->i * pid->err[CURR];
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	ed93 7a04 	vldr	s14, [r3, #16]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000908:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800090c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->dout = pid->d * (pid->err[CURR] - pid->err[PREV1]);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	ed93 7a02 	vldr	s14, [r3, #8]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8000928:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800092c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	edc3 7a05 	vstr	s15, [r3, #20]
	abs_limit(&(pid->iout), pid->IntegralLimit);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f103 0210 	add.w	r2, r3, #16
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000940:	ee07 3a90 	vmov	s15, r3
 8000944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000948:	eeb0 0a67 	vmov.f32	s0, s15
 800094c:	4610      	mov	r0, r2
 800094e:	f7ff ff03 	bl	8000758 <abs_limit>
	pid->Output = pid->pout + pid->iout + pid->dout;
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	ed93 7a03 	vldr	s14, [r3, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	edd3 7a04 	vldr	s15, [r3, #16]
 800095e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	edd3 7a05 	vldr	s15, [r3, #20]
 8000968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	abs_limit(&(pid->Output), pid->MaxOutput);
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097c:	ee07 3a90 	vmov	s15, r3
 8000980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000984:	eeb0 0a67 	vmov.f32	s0, s15
 8000988:	4610      	mov	r0, r2
 800098a:	f7ff fee5 	bl	8000758 <abs_limit>
	pid->last_pos_out = pid->Output;	//update last time
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	641a      	str	r2, [r3, #64]	@ 0x40

	pid->err[PREV2] = pid->err[PREV1];
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->err[PREV1] = pid->err[CURR];
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->get[PREV2] = pid->get[PREV1];
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->get[PREV1] = pid->get[CURR];
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->set[PREV2] = pid->set[PREV1];
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	69da      	ldr	r2, [r3, #28]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	619a      	str	r2, [r3, #24]
	pid->set[PREV1] = pid->set[CURR];
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6a1a      	ldr	r2, [r3, #32]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	61da      	str	r2, [r3, #28]
	return 0;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <PID_StructInit>:

void PID_StructInit(PID_TypeDef *pid, uint32_t maxout,
		uint32_t I_Limit, float kp, float ki, float kd) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6178      	str	r0, [r7, #20]
 80009d8:	6139      	str	r1, [r7, #16]
 80009da:	60fa      	str	r2, [r7, #12]
 80009dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80009e0:	edc7 0a01 	vstr	s1, [r7, #4]
 80009e4:	ed87 1a00 	vstr	s2, [r7]

	pid->f_param_init = pid_param_init;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <PID_StructInit+0x44>)
 80009ec:	655a      	str	r2, [r3, #84]	@ 0x54
	pid->f_pid_reset = pid_reset;
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	4a09      	ldr	r2, [pc, #36]	@ (8000a18 <PID_StructInit+0x48>)
 80009f2:	659a      	str	r2, [r3, #88]	@ 0x58
	pid->f_param_init(pid, maxout, I_Limit, kp, ki, kd);
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80009f8:	ed97 1a00 	vldr	s2, [r7]
 80009fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8000a00:	ed97 0a02 	vldr	s0, [r7, #8]
 8000a04:	68fa      	ldr	r2, [r7, #12]
 8000a06:	6939      	ldr	r1, [r7, #16]
 8000a08:	6978      	ldr	r0, [r7, #20]
 8000a0a:	4798      	blx	r3
}
 8000a0c:	bf00      	nop
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	080007b3 	.word	0x080007b3
 8000a18:	080007f5 	.word	0x080007f5

08000a1c <iBUS_Start_RxIT>:
#include <stdio.h>

uint8_t iBUS_UART_RxBuffer[30], iBUS_UART_RxHead_A, iBUS_UART_RxHead_B;
uint16_t iBUS_Channel[6] = { 0 };

void iBUS_Start_RxIT() {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(iBUS_UART, &iBUS_UART_RxHead_A, 1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	4903      	ldr	r1, [pc, #12]	@ (8000a30 <iBUS_Start_RxIT+0x14>)
 8000a24:	4803      	ldr	r0, [pc, #12]	@ (8000a34 <iBUS_Start_RxIT+0x18>)
 8000a26:	f002 fe08 	bl	800363a <HAL_UART_Receive_IT>
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	2000017e 	.word	0x2000017e
 8000a34:	200001bc 	.word	0x200001bc

08000a38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == IBUS_UART_INSTANCE) {
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <HAL_UART_RxCpltCallback+0x4c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d118      	bne.n	8000a7c <HAL_UART_RxCpltCallback+0x44>
		if (iBUS_UART_RxHead_A == 0x20) {
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <HAL_UART_RxCpltCallback+0x50>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b20      	cmp	r3, #32
 8000a50:	d112      	bne.n	8000a78 <HAL_UART_RxCpltCallback+0x40>
			HAL_UART_Receive(iBUS_UART, &iBUS_UART_RxHead_B, 1, 10);
 8000a52:	230a      	movs	r3, #10
 8000a54:	2201      	movs	r2, #1
 8000a56:	490d      	ldr	r1, [pc, #52]	@ (8000a8c <HAL_UART_RxCpltCallback+0x54>)
 8000a58:	480d      	ldr	r0, [pc, #52]	@ (8000a90 <HAL_UART_RxCpltCallback+0x58>)
 8000a5a:	f002 fd57 	bl	800350c <HAL_UART_Receive>
			if (iBUS_UART_RxHead_B == 0x40) {
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <HAL_UART_RxCpltCallback+0x54>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b40      	cmp	r3, #64	@ 0x40
 8000a64:	d108      	bne.n	8000a78 <HAL_UART_RxCpltCallback+0x40>
				HAL_UART_Receive(iBUS_UART, iBUS_UART_RxBuffer, 30, 10);
 8000a66:	230a      	movs	r3, #10
 8000a68:	221e      	movs	r2, #30
 8000a6a:	490a      	ldr	r1, [pc, #40]	@ (8000a94 <HAL_UART_RxCpltCallback+0x5c>)
 8000a6c:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <HAL_UART_RxCpltCallback+0x58>)
 8000a6e:	f002 fd4d 	bl	800350c <HAL_UART_Receive>
				IBUS_ResolveData(6);
 8000a72:	2006      	movs	r0, #6
 8000a74:	f000 f810 	bl	8000a98 <IBUS_ResolveData>
			}
		}
		iBUS_Start_RxIT();
 8000a78:	f7ff ffd0 	bl	8000a1c <iBUS_Start_RxIT>
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40007800 	.word	0x40007800
 8000a88:	2000017e 	.word	0x2000017e
 8000a8c:	2000017f 	.word	0x2000017f
 8000a90:	200001bc 	.word	0x200001bc
 8000a94:	20000160 	.word	0x20000160

08000a98 <IBUS_ResolveData>:

void IBUS_ResolveData(uint8_t user_channels) {
 8000a98:	b480      	push	{r7}
 8000a9a:	b08d      	sub	sp, #52	@ 0x34
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	uint16_t iBUS_Channel_Temp[14], CheckSum_Calc, iBus_RxCheckSum;

	CheckSum_Calc = 0xFF9F;
 8000aa2:	f64f 739f 	movw	r3, #65439	@ 0xff9f
 8000aa6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	for (uint8_t i = 0; i < 14; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000aae:	e02d      	b.n	8000b0c <IBUS_ResolveData+0x74>
		iBUS_Channel_Temp[i] = (uint16_t) (iBUS_UART_RxBuffer[i * 2 + 1] << 8
 8000ab0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8000b70 <IBUS_ResolveData+0xd8>)
 8000aba:	5cd3      	ldrb	r3, [r2, r3]
 8000abc:	021b      	lsls	r3, r3, #8
				| iBUS_UART_RxBuffer[i * 2]);
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	492a      	ldr	r1, [pc, #168]	@ (8000b70 <IBUS_ResolveData+0xd8>)
 8000ac8:	5ccb      	ldrb	r3, [r1, r3]
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b21a      	sxth	r2, r3
		iBUS_Channel_Temp[i] = (uint16_t) (iBUS_UART_RxBuffer[i * 2 + 1] << 8
 8000ad0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ad4:	b292      	uxth	r2, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	3330      	adds	r3, #48	@ 0x30
 8000ada:	443b      	add	r3, r7
 8000adc:	f823 2c24 	strh.w	r2, [r3, #-36]
		CheckSum_Calc = CheckSum_Calc - iBUS_UART_RxBuffer[i * 2 + 1]
 8000ae0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a21      	ldr	r2, [pc, #132]	@ (8000b70 <IBUS_ResolveData+0xd8>)
 8000aea:	5cd3      	ldrb	r3, [r2, r3]
 8000aec:	461a      	mov	r2, r3
 8000aee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000af0:	1a9b      	subs	r3, r3, r2
 8000af2:	b29b      	uxth	r3, r3
				- iBUS_UART_RxBuffer[i * 2];
 8000af4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000af8:	0052      	lsls	r2, r2, #1
 8000afa:	491d      	ldr	r1, [pc, #116]	@ (8000b70 <IBUS_ResolveData+0xd8>)
 8000afc:	5c8a      	ldrb	r2, [r1, r2]
		CheckSum_Calc = CheckSum_Calc - iBUS_UART_RxBuffer[i * 2 + 1]
 8000afe:	1a9b      	subs	r3, r3, r2
 8000b00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (uint8_t i = 0; i < 14; i++) {
 8000b02:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b06:	3301      	adds	r3, #1
 8000b08:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000b0c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b10:	2b0d      	cmp	r3, #13
 8000b12:	d9cd      	bls.n	8000ab0 <IBUS_ResolveData+0x18>
	}

	iBus_RxCheckSum = iBUS_UART_RxBuffer[29] << 8 | iBUS_UART_RxBuffer[28];
 8000b14:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <IBUS_ResolveData+0xd8>)
 8000b16:	7f5b      	ldrb	r3, [r3, #29]
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	b21a      	sxth	r2, r3
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <IBUS_ResolveData+0xd8>)
 8000b1e:	7f1b      	ldrb	r3, [r3, #28]
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	4313      	orrs	r3, r2
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	857b      	strh	r3, [r7, #42]	@ 0x2a

	if (CheckSum_Calc == iBus_RxCheckSum) {
 8000b28:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d119      	bne.n	8000b64 <IBUS_ResolveData+0xcc>
		for (uint8_t j = 0; j < user_channels; j++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000b36:	e010      	b.n	8000b5a <IBUS_ResolveData+0xc2>
			iBUS_Channel[j] = iBUS_Channel_Temp[j];
 8000b38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b3c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	3330      	adds	r3, #48	@ 0x30
 8000b44:	443b      	add	r3, r7
 8000b46:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <IBUS_ResolveData+0xdc>)
 8000b4c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (uint8_t j = 0; j < user_channels; j++) {
 8000b50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b54:	3301      	adds	r3, #1
 8000b56:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000b5a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d3e9      	bcc.n	8000b38 <IBUS_ResolveData+0xa0>
		}
	}
}
 8000b64:	bf00      	nop
 8000b66:	3734      	adds	r7, #52	@ 0x34
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20000160 	.word	0x20000160
 8000b74:	20000180 	.word	0x20000180

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 fd4a 	bl	8001614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b80:	f000 f8a6 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b84:	f000 f9c6 	bl	8000f14 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000b88:	f000 f930 	bl	8000dec <MX_CAN1_Init>
  MX_UART7_Init();
 8000b8c:	f000 f998 	bl	8000ec0 <MX_UART7_Init>
  MX_CRC_Init();
 8000b90:	f000 f982 	bl	8000e98 <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000b94:	f000 f90e 	bl	8000db4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(POWER1_CTRL_GPIO_Port, POWER1_CTRL_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4842      	ldr	r0, [pc, #264]	@ (8000ca8 <main+0x130>)
 8000b9e:	f001 ffa3 	bl	8002ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(POWER3_CTRL_GPIO_Port, POWER3_CTRL_Pin, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	2110      	movs	r1, #16
 8000ba6:	4840      	ldr	r0, [pc, #256]	@ (8000ca8 <main+0x130>)
 8000ba8:	f001 ff9e 	bl	8002ae8 <HAL_GPIO_WritePin>

	PID_StructInit(&PID_MotorSpeed[0], 20000, 20000, 1.5f, 0.1f, 0.0f);
 8000bac:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 8000cac <main+0x134>
 8000bb0:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8000cb0 <main+0x138>
 8000bb4:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000bb8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000bbc:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000bc0:	483c      	ldr	r0, [pc, #240]	@ (8000cb4 <main+0x13c>)
 8000bc2:	f7ff ff05 	bl	80009d0 <PID_StructInit>
	PID_StructInit(&PID_MotorSpeed[1], 20000, 20000, 1.5f, 0.1f, 0.0f);
 8000bc6:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8000cac <main+0x134>
 8000bca:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8000cb0 <main+0x138>
 8000bce:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000bd2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000bd6:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000bda:	4837      	ldr	r0, [pc, #220]	@ (8000cb8 <main+0x140>)
 8000bdc:	f7ff fef8 	bl	80009d0 <PID_StructInit>
	CAN1_START_IRQ();
 8000be0:	f7ff fc7c 	bl	80004dc <CAN1_START_IRQ>
	iBUS_Start_RxIT();
 8000be4:	f7ff ff1a 	bl	8000a1c <iBUS_Start_RxIT>
	static int TARGET_SPD[2];
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bee:	4833      	ldr	r0, [pc, #204]	@ (8000cbc <main+0x144>)
 8000bf0:	f001 ff7a 	bl	8002ae8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GND_OF_5VO_GPIO_Port, GND_OF_5VO_Pin, GPIO_PIN_SET);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfa:	4831      	ldr	r0, [pc, #196]	@ (8000cc0 <main+0x148>)
 8000bfc:	f001 ff74 	bl	8002ae8 <HAL_GPIO_WritePin>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		PID_Calculate(&PID_MotorSpeed[MotorX], Motor[MotorX].RPM,
 8000c00:	4b30      	ldr	r3, [pc, #192]	@ (8000cc4 <main+0x14c>)
 8000c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c06:	ee07 3a90 	vmov	s15, r3
 8000c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				TARGET_SPD[MotorX]);
 8000c0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000cc8 <main+0x150>)
 8000c10:	681b      	ldr	r3, [r3, #0]
		PID_Calculate(&PID_MotorSpeed[MotorX], Motor[MotorX].RPM,
 8000c12:	ee07 3a10 	vmov	s14, r3
 8000c16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c1a:	eef0 0a47 	vmov.f32	s1, s14
 8000c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c22:	4824      	ldr	r0, [pc, #144]	@ (8000cb4 <main+0x13c>)
 8000c24:	f7ff fdff 	bl	8000826 <PID_Calculate>
		PID_Calculate(&PID_MotorSpeed[MotorY], Motor[MotorY].RPM,
 8000c28:	4b26      	ldr	r3, [pc, #152]	@ (8000cc4 <main+0x14c>)
 8000c2a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000c2e:	ee07 3a90 	vmov	s15, r3
 8000c32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				TARGET_SPD[MotorY]);
 8000c36:	4b24      	ldr	r3, [pc, #144]	@ (8000cc8 <main+0x150>)
 8000c38:	685b      	ldr	r3, [r3, #4]
		PID_Calculate(&PID_MotorSpeed[MotorY], Motor[MotorY].RPM,
 8000c3a:	ee07 3a10 	vmov	s14, r3
 8000c3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000c42:	eef0 0a47 	vmov.f32	s1, s14
 8000c46:	eeb0 0a67 	vmov.f32	s0, s15
 8000c4a:	481b      	ldr	r0, [pc, #108]	@ (8000cb8 <main+0x140>)
 8000c4c:	f7ff fdeb 	bl	8000826 <PID_Calculate>

		Motor_SendCmd(PID_MotorSpeed[MotorX].Output,
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <main+0x13c>)
 8000c52:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000c56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c5a:	ee17 3a90 	vmov	r3, s15
 8000c5e:	b21b      	sxth	r3, r3
				PID_MotorSpeed[MotorY].Output);
 8000c60:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <main+0x13c>)
 8000c62:	edd2 7a26 	vldr	s15, [r2, #152]	@ 0x98
		Motor_SendCmd(PID_MotorSpeed[MotorX].Output,
 8000c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c6a:	ee17 2a90 	vmov	r2, s15
 8000c6e:	b212      	sxth	r2, r2
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fd3a 	bl	80006ec <Motor_SendCmd>
		TARGET_SPD[MotorX] = (iBUS_Channel[1] - 1500) * 3;
 8000c78:	4b14      	ldr	r3, [pc, #80]	@ (8000ccc <main+0x154>)
 8000c7a:	885b      	ldrh	r3, [r3, #2]
 8000c7c:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	4a10      	ldr	r2, [pc, #64]	@ (8000cc8 <main+0x150>)
 8000c88:	6013      	str	r3, [r2, #0]
		TARGET_SPD[MotorY] = (iBUS_Channel[2] - 1500) * 3;
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <main+0x154>)
 8000c8c:	889b      	ldrh	r3, [r3, #4]
 8000c8e:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc8 <main+0x150>)
 8000c9a:	6053      	str	r3, [r2, #4]

		HAL_Delay(1);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f000 fd2b 	bl	80016f8 <HAL_Delay>
		PID_Calculate(&PID_MotorSpeed[MotorX], Motor[MotorX].RPM,
 8000ca2:	bf00      	nop
 8000ca4:	e7ac      	b.n	8000c00 <main+0x88>
 8000ca6:	bf00      	nop
 8000ca8:	40021c00 	.word	0x40021c00
 8000cac:	00000000 	.word	0x00000000
 8000cb0:	3dcccccd 	.word	0x3dcccccd
 8000cb4:	200000a8 	.word	0x200000a8
 8000cb8:	20000104 	.word	0x20000104
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40021800 	.word	0x40021800
 8000cc4:	2000002c 	.word	0x2000002c
 8000cc8:	20000204 	.word	0x20000204
 8000ccc:	20000180 	.word	0x20000180

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b094      	sub	sp, #80	@ 0x50
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	2230      	movs	r2, #48	@ 0x30
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 fc26 	bl	8004530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000dac <SystemClock_Config+0xdc>)
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfc:	4a2b      	ldr	r2, [pc, #172]	@ (8000dac <SystemClock_Config+0xdc>)
 8000cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d04:	4b29      	ldr	r3, [pc, #164]	@ (8000dac <SystemClock_Config+0xdc>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	4b26      	ldr	r3, [pc, #152]	@ (8000db0 <SystemClock_Config+0xe0>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d1c:	4a24      	ldr	r2, [pc, #144]	@ (8000db0 <SystemClock_Config+0xe0>)
 8000d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d22:	6013      	str	r3, [r2, #0]
 8000d24:	4b22      	ldr	r3, [pc, #136]	@ (8000db0 <SystemClock_Config+0xe0>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d30:	2302      	movs	r3, #2
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d34:	2301      	movs	r3, #1
 8000d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d44:	2308      	movs	r3, #8
 8000d46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000d48:	235a      	movs	r3, #90	@ 0x5a
 8000d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000d50:	2303      	movs	r3, #3
 8000d52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d54:	f107 0320 	add.w	r3, r7, #32
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 ff2f 	bl	8002bbc <HAL_RCC_OscConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d64:	f000 fabc 	bl	80012e0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d68:	f001 fed8 	bl	8002b1c <HAL_PWREx_EnableOverDrive>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d72:	f000 fab5 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d76:	230f      	movs	r3, #15
 8000d78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2102      	movs	r1, #2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f002 f98a 	bl	80030ac <HAL_RCC_ClockConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d9e:	f000 fa9f 	bl	80012e0 <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3750      	adds	r7, #80	@ 0x50
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40007000 	.word	0x40007000

08000db4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2014      	movs	r0, #20
 8000dbe:	f001 fc02 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dc2:	2014      	movs	r0, #20
 8000dc4:	f001 fc1b 	bl	80025fe <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2015      	movs	r0, #21
 8000dce:	f001 fbfa 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000dd2:	2015      	movs	r0, #21
 8000dd4:	f001 fc13 	bl	80025fe <HAL_NVIC_EnableIRQ>
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	2013      	movs	r0, #19
 8000dde:	f001 fbf2 	bl	80025c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000de2:	2013      	movs	r0, #19
 8000de4:	f001 fc0b 	bl	80025fe <HAL_NVIC_EnableIRQ>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	@ 0x28
 8000df0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000df2:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000df4:	4a27      	ldr	r2, [pc, #156]	@ (8000e94 <MX_CAN1_Init+0xa8>)
 8000df6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000df8:	4b25      	ldr	r3, [pc, #148]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000dfa:	2205      	movs	r2, #5
 8000dfc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000dfe:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e04:	4b22      	ldr	r3, [pc, #136]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000e0a:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e10:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000e12:	4b1f      	ldr	r3, [pc, #124]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e14:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e18:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e2c:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e3e:	4814      	ldr	r0, [pc, #80]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e40:	f000 fc7e 	bl	8001740 <HAL_CAN_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000e4a:	f000 fa49 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef CAN_FilterConfigStructure;
	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FilterFIFO0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterBank = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
	CAN_FilterConfigStructure.FilterActivation = CAN_FILTER_ENABLE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	623b      	str	r3, [r7, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &CAN_FilterConfigStructure) != HAL_OK) {
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	@ (8000e90 <MX_CAN1_Init+0xa4>)
 8000e78:	f000 fd5e 	bl	8001938 <HAL_CAN_ConfigFilter>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_CAN1_Init+0x9a>
		Error_Handler();
 8000e82:	f000 fa2d 	bl	80012e0 <Error_Handler>
	}
  /* USER CODE END CAN1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000018c 	.word	0x2000018c
 8000e94:	40006400 	.word	0x40006400

08000e98 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <MX_CRC_Init+0x20>)
 8000e9e:	4a07      	ldr	r2, [pc, #28]	@ (8000ebc <MX_CRC_Init+0x24>)
 8000ea0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_CRC_Init+0x20>)
 8000ea4:	f001 fbc5 	bl	8002632 <HAL_CRC_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000eae:	f000 fa17 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200001b4 	.word	0x200001b4
 8000ebc:	40023000 	.word	0x40023000

08000ec0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <MX_UART7_Init+0x4c>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	@ (8000f10 <MX_UART7_Init+0x50>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000eca:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <MX_UART7_Init+0x4c>)
 8000ecc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ed0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <MX_UART7_Init+0x4c>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <MX_UART7_Init+0x4c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <MX_UART7_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <MX_UART7_Init+0x4c>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <MX_UART7_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <MX_UART7_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_UART7_Init+0x4c>)
 8000ef8:	f002 fab8 	bl	800346c <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8000f02:	f000 f9ed 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200001bc 	.word	0x200001bc
 8000f10:	40007800 	.word	0x40007800

08000f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08e      	sub	sp, #56	@ 0x38
 8000f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
 8000f2e:	4bb2      	ldr	r3, [pc, #712]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4ab1      	ldr	r2, [pc, #708]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4baf      	ldr	r3, [pc, #700]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	623b      	str	r3, [r7, #32]
 8000f44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
 8000f4a:	4bab      	ldr	r3, [pc, #684]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4aaa      	ldr	r2, [pc, #680]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4ba8      	ldr	r3, [pc, #672]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	4ba4      	ldr	r3, [pc, #656]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	4aa3      	ldr	r2, [pc, #652]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f72:	4ba1      	ldr	r3, [pc, #644]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
 8000f7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	4b9d      	ldr	r3, [pc, #628]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	4a9c      	ldr	r2, [pc, #624]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f88:	f043 0308 	orr.w	r3, r3, #8
 8000f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8e:	4b9a      	ldr	r3, [pc, #616]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b96      	ldr	r3, [pc, #600]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	4a95      	ldr	r2, [pc, #596]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000faa:	4b93      	ldr	r3, [pc, #588]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b8f      	ldr	r3, [pc, #572]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a8e      	ldr	r2, [pc, #568]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000fc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b8c      	ldr	r3, [pc, #560]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b88      	ldr	r3, [pc, #544]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a87      	ldr	r2, [pc, #540]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b85      	ldr	r3, [pc, #532]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b81      	ldr	r3, [pc, #516]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a80      	ldr	r2, [pc, #512]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8000ff8:	f043 0320 	orr.w	r3, r3, #32
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b7e      	ldr	r3, [pc, #504]	@ (80011f8 <MX_GPIO_Init+0x2e4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GND_OF_5VO_GPIO_Port, GND_OF_5VO_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001010:	487a      	ldr	r0, [pc, #488]	@ (80011fc <MX_GPIO_Init+0x2e8>)
 8001012:	f001 fd69 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_B9__Pin|OLED_B0__Pin|SYNC_IN_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f248 2101 	movw	r1, #33281	@ 0x8201
 800101c:	4878      	ldr	r0, [pc, #480]	@ (8001200 <MX_GPIO_Init+0x2ec>)
 800101e:	f001 fd63 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	213c      	movs	r1, #60	@ 0x3c
 8001026:	4877      	ldr	r0, [pc, #476]	@ (8001204 <MX_GPIO_Init+0x2f0>)
 8001028:	f001 fd5e 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001032:	4872      	ldr	r0, [pc, #456]	@ (80011fc <MX_GPIO_Init+0x2e8>)
 8001034:	f001 fd58 	bl	8002ae8 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800103e:	4872      	ldr	r0, [pc, #456]	@ (8001208 <MX_GPIO_Init+0x2f4>)
 8001040:	f001 fd52 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800104a:	4870      	ldr	r0, [pc, #448]	@ (800120c <MX_GPIO_Init+0x2f8>)
 800104c:	f001 fd4c 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HEAT_IMU_Pin */
  GPIO_InitStruct.Pin = HEAT_IMU_Pin;
 8001050:	2320      	movs	r3, #32
 8001052:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001060:	2302      	movs	r3, #2
 8001062:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(HEAT_IMU_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001068:	4619      	mov	r1, r3
 800106a:	4865      	ldr	r0, [pc, #404]	@ (8001200 <MX_GPIO_Init+0x2ec>)
 800106c:	f001 fb90 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : GND_OF_5VO_Pin LED_A_Pin LED_B_Pin LED_C_Pin
                           LED_D_Pin LED_E_Pin LED_F_Pin LED_G_Pin
                           LED_H_Pin */
  GPIO_InitStruct.Pin = GND_OF_5VO_Pin|LED_A_Pin|LED_B_Pin|LED_C_Pin
 8001070:	f242 13fe 	movw	r3, #8702	@ 0x21fe
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_D_Pin|LED_E_Pin|LED_F_Pin|LED_G_Pin
                          |LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	485c      	ldr	r0, [pc, #368]	@ (80011fc <MX_GPIO_Init+0x2e8>)
 800108a:	f001 fb81 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_B9__Pin OLED_B0__Pin SYNC_IN_Pin */
  GPIO_InitStruct.Pin = OLED_B9__Pin|OLED_B0__Pin|SYNC_IN_Pin;
 800108e:	f248 2301 	movw	r3, #33281	@ 0x8201
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a4:	4619      	mov	r1, r3
 80010a6:	4856      	ldr	r0, [pc, #344]	@ (8001200 <MX_GPIO_Init+0x2ec>)
 80010a8:	f001 fb72 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : DBUS_RX_Pin */
  GPIO_InitStruct.Pin = DBUS_RX_Pin;
 80010ac:	2380      	movs	r3, #128	@ 0x80
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010bc:	2307      	movs	r3, #7
 80010be:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DBUS_RX_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010c4:	4619      	mov	r1, r3
 80010c6:	484e      	ldr	r0, [pc, #312]	@ (8001200 <MX_GPIO_Init+0x2ec>)
 80010c8:	f001 fb62 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO_PWM_Y_Pin SERVO_PWM_X_Pin SERVO_PWM_W_Pin SERVO_PWM_Z_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_Y_Pin|SERVO_PWM_X_Pin|SERVO_PWM_W_Pin|SERVO_PWM_Z_Pin;
 80010cc:	23e4      	movs	r3, #228	@ 0xe4
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010dc:	2303      	movs	r3, #3
 80010de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e4:	4619      	mov	r1, r3
 80010e6:	484a      	ldr	r0, [pc, #296]	@ (8001210 <MX_GPIO_Init+0x2fc>)
 80010e8:	f001 fb52 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_PWM_A_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_A_Pin;
 80010ec:	2301      	movs	r3, #1
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80010fc:	2302      	movs	r3, #2
 80010fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SERVO_PWM_A_GPIO_Port, &GPIO_InitStruct);
 8001100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001104:	4619      	mov	r1, r3
 8001106:	4842      	ldr	r0, [pc, #264]	@ (8001210 <MX_GPIO_Init+0x2fc>)
 8001108:	f001 fb42 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_PWM_A9_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_A9_Pin;
 800110c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800111e:	2301      	movs	r3, #1
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SERVO_PWM_A9_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	483a      	ldr	r0, [pc, #232]	@ (8001214 <MX_GPIO_Init+0x300>)
 800112a:	f001 fb31 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : POWER1_CTRL_Pin POWER2_CTRL_Pin POWER3_CTRL_Pin POWER4_CTRL_Pin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 800112e:	233c      	movs	r3, #60	@ 0x3c
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800113e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001142:	4619      	mov	r1, r3
 8001144:	482f      	ldr	r0, [pc, #188]	@ (8001204 <MX_GPIO_Init+0x2f0>)
 8001146:	f001 fb23 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO_PWM_B_Pin SERVO_PWM_C_Pin SERVO_PWM_D_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_B_Pin|SERVO_PWM_C_Pin|SERVO_PWM_D_Pin;
 800114a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800115c:	2302      	movs	r3, #2
 800115e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	4827      	ldr	r0, [pc, #156]	@ (8001204 <MX_GPIO_Init+0x2f0>)
 8001168:	f001 fb12 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO_PWM_E_Pin SERVO_PWM_F_Pin SERVO_PWM_G_Pin SERVO_PWM_H_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_E_Pin|SERVO_PWM_F_Pin|SERVO_PWM_G_Pin|SERVO_PWM_H_Pin;
 800116c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800117e:	2302      	movs	r3, #2
 8001180:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001186:	4619      	mov	r1, r3
 8001188:	4823      	ldr	r0, [pc, #140]	@ (8001218 <MX_GPIO_Init+0x304>)
 800118a:	f001 fb01 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800118e:	2304      	movs	r3, #4
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	4817      	ldr	r0, [pc, #92]	@ (8001200 <MX_GPIO_Init+0x2ec>)
 80011a2:	f001 faf5 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO_PWM_T_Pin SERVO_PWM_S_Pin SERVO_PWM_U_Pin SERVO_PWM_V_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_T_Pin|SERVO_PWM_S_Pin|SERVO_PWM_U_Pin|SERVO_PWM_V_Pin;
 80011a6:	230f      	movs	r3, #15
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011b6:	2301      	movs	r3, #1
 80011b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011be:	4619      	mov	r1, r3
 80011c0:	4814      	ldr	r0, [pc, #80]	@ (8001214 <MX_GPIO_Init+0x300>)
 80011c2:	f001 fae5 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_PWM_E13_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_E13_Pin;
 80011c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011d8:	2301      	movs	r3, #1
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SERVO_PWM_E13_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	4809      	ldr	r0, [pc, #36]	@ (8001208 <MX_GPIO_Init+0x2f4>)
 80011e4:	f001 fad4 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_MI_Pin */
  GPIO_InitStruct.Pin = OLED_MI_Pin;
 80011e8:	2340      	movs	r3, #64	@ 0x40
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ec:	2302      	movs	r3, #2
 80011ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011f4:	e012      	b.n	800121c <MX_GPIO_Init+0x308>
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40021800 	.word	0x40021800
 8001200:	40020400 	.word	0x40020400
 8001204:	40021c00 	.word	0x40021c00
 8001208:	40021000 	.word	0x40021000
 800120c:	40021400 	.word	0x40021400
 8001210:	40022000 	.word	0x40022000
 8001214:	40020000 	.word	0x40020000
 8001218:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001220:	2305      	movs	r3, #5
 8001222:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OLED_MI_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4829      	ldr	r0, [pc, #164]	@ (80012d0 <MX_GPIO_Init+0x3bc>)
 800122c:	f001 fab0 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001230:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001246:	4619      	mov	r1, r3
 8001248:	4822      	ldr	r0, [pc, #136]	@ (80012d4 <MX_GPIO_Init+0x3c0>)
 800124a:	f001 faa1 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800124e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001260:	2309      	movs	r3, #9
 8001262:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001268:	4619      	mov	r1, r3
 800126a:	481b      	ldr	r0, [pc, #108]	@ (80012d8 <MX_GPIO_Init+0x3c4>)
 800126c:	f001 fa90 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001270:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	4814      	ldr	r0, [pc, #80]	@ (80012dc <MX_GPIO_Init+0x3c8>)
 800128a:	f001 fa81 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_EXTI__Pin */
  GPIO_InitStruct.Pin = SD_EXTI__Pin;
 800128e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001294:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001298:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_EXTI__GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a2:	4619      	mov	r1, r3
 80012a4:	480b      	ldr	r0, [pc, #44]	@ (80012d4 <MX_GPIO_Init+0x3c0>)
 80012a6:	f001 fa73 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYNC_OUT_Pin */
  GPIO_InitStruct.Pin = SYNC_OUT_Pin;
 80012aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SYNC_OUT_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_GPIO_Init+0x3c4>)
 80012c2:	f001 fa65 	bl	8002790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c6:	bf00      	nop
 80012c8:	3738      	adds	r7, #56	@ 0x38
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40021400 	.word	0x40021400

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ee:	480c      	ldr	r0, [pc, #48]	@ (8001320 <Error_Handler+0x40>)
 80012f0:	f001 fbfa 	bl	8002ae8 <HAL_GPIO_WritePin>
	while (1) {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80012f4:	2201      	movs	r2, #1
 80012f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80012fa:	480a      	ldr	r0, [pc, #40]	@ (8001324 <Error_Handler+0x44>)
 80012fc:	f001 fbf4 	bl	8002ae8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001300:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001304:	f000 f9f8 	bl	80016f8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800130e:	4805      	ldr	r0, [pc, #20]	@ (8001324 <Error_Handler+0x44>)
 8001310:	f001 fbea 	bl	8002ae8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001314:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001318:	f000 f9ee 	bl	80016f8 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 800131c:	bf00      	nop
 800131e:	e7e9      	b.n	80012f4 <Error_Handler+0x14>
 8001320:	40021400 	.word	0x40021400
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	4a0f      	ldr	r2, [pc, #60]	@ (8001374 <HAL_MspInit+0x4c>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800133c:	6453      	str	r3, [r2, #68]	@ 0x44
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <HAL_MspInit+0x4c>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_MspInit+0x4c>)
 8001354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <HAL_CAN_MspInit+0x84>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12b      	bne.n	80013f2 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <HAL_CAN_MspInit+0x88>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	4a17      	ldr	r2, [pc, #92]	@ (8001400 <HAL_CAN_MspInit+0x88>)
 80013a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013aa:	4b15      	ldr	r3, [pc, #84]	@ (8001400 <HAL_CAN_MspInit+0x88>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_CAN_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a10      	ldr	r2, [pc, #64]	@ (8001400 <HAL_CAN_MspInit+0x88>)
 80013c0:	f043 0308 	orr.w	r3, r3, #8
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <HAL_CAN_MspInit+0x88>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013d2:	2303      	movs	r3, #3
 80013d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013e2:	2309      	movs	r3, #9
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	@ (8001404 <HAL_CAN_MspInit+0x8c>)
 80013ee:	f001 f9cf 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3728      	adds	r7, #40	@ 0x28
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40006400 	.word	0x40006400
 8001400:	40023800 	.word	0x40023800
 8001404:	40020c00 	.word	0x40020c00

08001408 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <HAL_CRC_MspInit+0x3c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d10d      	bne.n	8001436 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_CRC_MspInit+0x40>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <HAL_CRC_MspInit+0x40>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <HAL_CRC_MspInit+0x40>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023000 	.word	0x40023000
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1d      	ldr	r2, [pc, #116]	@ (80014e0 <HAL_UART_MspInit+0x94>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d134      	bne.n	80014d8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <HAL_UART_MspInit+0x98>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	4a1b      	ldr	r2, [pc, #108]	@ (80014e4 <HAL_UART_MspInit+0x98>)
 8001478:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800147c:	6413      	str	r3, [r2, #64]	@ 0x40
 800147e:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <HAL_UART_MspInit+0x98>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_UART_MspInit+0x98>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a14      	ldr	r2, [pc, #80]	@ (80014e4 <HAL_UART_MspInit+0x98>)
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b12      	ldr	r3, [pc, #72]	@ (80014e4 <HAL_UART_MspInit+0x98>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 80014a6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80014b8:	2308      	movs	r3, #8
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4809      	ldr	r0, [pc, #36]	@ (80014e8 <HAL_UART_MspInit+0x9c>)
 80014c4:	f001 f964 	bl	8002790 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 1, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2101      	movs	r1, #1
 80014cc:	2052      	movs	r0, #82	@ 0x52
 80014ce:	f001 f87a 	bl	80025c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80014d2:	2052      	movs	r0, #82	@ 0x52
 80014d4:	f001 f893 	bl	80025fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	@ 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40007800 	.word	0x40007800
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40021000 	.word	0x40021000

080014ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <NMI_Handler+0x4>

080014f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <MemManage_Handler+0x4>

08001504 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <UsageFault_Handler+0x4>

08001514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001542:	f000 f8b9 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <CAN1_TX_IRQHandler+0x10>)
 8001552:	f000 fd2d 	bl	8001fb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000018c 	.word	0x2000018c

08001560 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <CAN1_RX0_IRQHandler+0x10>)
 8001566:	f000 fd23 	bl	8001fb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000018c 	.word	0x2000018c

08001574 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <CAN1_RX1_IRQHandler+0x10>)
 800157a:	f000 fd19 	bl	8001fb0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000018c 	.word	0x2000018c

08001588 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800158c:	4802      	ldr	r0, [pc, #8]	@ (8001598 <UART7_IRQHandler+0x10>)
 800158e:	f002 f879 	bl	8003684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200001bc 	.word	0x200001bc

0800159c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <SystemInit+0x20>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015a6:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <SystemInit+0x20>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c4:	f7ff ffea 	bl	800159c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ca:	490d      	ldr	r1, [pc, #52]	@ (8001600 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015e0:	4c0a      	ldr	r4, [pc, #40]	@ (800160c <LoopFillZerobss+0x22>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015ee:	f002 ffa7 	bl	8004540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f2:	f7ff fac1 	bl	8000b78 <main>
  bx  lr    
 80015f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001600:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001604:	080045c8 	.word	0x080045c8
  ldr r2, =_sbss
 8001608:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800160c:	20000210 	.word	0x20000210

08001610 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001610:	e7fe      	b.n	8001610 <ADC_IRQHandler>
	...

08001614 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001618:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <HAL_Init+0x40>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001622:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0a      	ldr	r2, [pc, #40]	@ (8001654 <HAL_Init+0x40>)
 800162a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800162e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <HAL_Init+0x40>)
 8001636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 ffb7 	bl	80025b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	200f      	movs	r0, #15
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fe6e 	bl	8001328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 ffcf 	bl	800261a <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 ff97 	bl	80025c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	@ (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000004 	.word	0x20000004
 80016b0:	2000000c 	.word	0x2000000c
 80016b4:	20000008 	.word	0x20000008

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	2000020c 	.word	0x2000020c

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	2000020c 	.word	0x2000020c

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff ffee 	bl	80016e0 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <HAL_Delay+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffde 	bl	80016e0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000000c 	.word	0x2000000c

08001740 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e0ed      	b.n	800192e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fe0a 	bl	8001378 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0201 	orr.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001774:	f7ff ffb4 	bl	80016e0 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800177a:	e012      	b.n	80017a2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800177c:	f7ff ffb0 	bl	80016e0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b0a      	cmp	r3, #10
 8001788:	d90b      	bls.n	80017a2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2205      	movs	r2, #5
 800179a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0c5      	b.n	800192e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0e5      	beq.n	800177c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0202 	bic.w	r2, r2, #2
 80017be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c0:	f7ff ff8e 	bl	80016e0 <HAL_GetTick>
 80017c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017c6:	e012      	b.n	80017ee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017c8:	f7ff ff8a 	bl	80016e0 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b0a      	cmp	r3, #10
 80017d4:	d90b      	bls.n	80017ee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2205      	movs	r2, #5
 80017e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e09f      	b.n	800192e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1e5      	bne.n	80017c8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7e1b      	ldrb	r3, [r3, #24]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d108      	bne.n	8001816 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e007      	b.n	8001826 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7e5b      	ldrb	r3, [r3, #25]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e007      	b.n	8001850 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800184e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	7e9b      	ldrb	r3, [r3, #26]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d108      	bne.n	800186a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0220 	orr.w	r2, r2, #32
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e007      	b.n	800187a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0220 	bic.w	r2, r2, #32
 8001878:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7edb      	ldrb	r3, [r3, #27]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d108      	bne.n	8001894 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0210 	bic.w	r2, r2, #16
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	e007      	b.n	80018a4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0210 	orr.w	r2, r2, #16
 80018a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7f1b      	ldrb	r3, [r3, #28]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d108      	bne.n	80018be <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0208 	orr.w	r2, r2, #8
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e007      	b.n	80018ce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0208 	bic.w	r2, r2, #8
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7f5b      	ldrb	r3, [r3, #29]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d108      	bne.n	80018e8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0204 	orr.w	r2, r2, #4
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e007      	b.n	80018f8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0204 	bic.w	r2, r2, #4
 80018f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	695b      	ldr	r3, [r3, #20]
 800190c:	ea42 0103 	orr.w	r1, r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	1e5a      	subs	r2, r3, #1
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800194e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001950:	7cfb      	ldrb	r3, [r7, #19]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d003      	beq.n	800195e <HAL_CAN_ConfigFilter+0x26>
 8001956:	7cfb      	ldrb	r3, [r7, #19]
 8001958:	2b02      	cmp	r3, #2
 800195a:	f040 80be 	bne.w	8001ada <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800195e:	4b65      	ldr	r3, [pc, #404]	@ (8001af4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001960:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001968:	f043 0201 	orr.w	r2, r3, #1
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001978:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	021b      	lsls	r3, r3, #8
 800198e:	431a      	orrs	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	f003 031f 	and.w	r3, r3, #31
 800199e:	2201      	movs	r2, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	401a      	ands	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d123      	bne.n	8001a08 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	401a      	ands	r2, r3
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80019e2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3248      	adds	r2, #72	@ 0x48
 80019e8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80019fc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80019fe:	6979      	ldr	r1, [r7, #20]
 8001a00:	3348      	adds	r3, #72	@ 0x48
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	440b      	add	r3, r1
 8001a06:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d122      	bne.n	8001a56 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3248      	adds	r2, #72	@ 0x48
 8001a36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a4c:	6979      	ldr	r1, [r7, #20]
 8001a4e:	3348      	adds	r3, #72	@ 0x48
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	401a      	ands	r2, r3
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001a70:	e007      	b.n	8001a82 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	401a      	ands	r2, r3
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001a9c:	e007      	b.n	8001aae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	431a      	orrs	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d107      	bne.n	8001ac6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001acc:	f023 0201 	bic.w	r2, r3, #1
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e006      	b.n	8001ae8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ade:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
  }
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	40006400 	.word	0x40006400

08001af8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d12e      	bne.n	8001b6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 0201 	bic.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b24:	f7ff fddc 	bl	80016e0 <HAL_GetTick>
 8001b28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b2a:	e012      	b.n	8001b52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b2c:	f7ff fdd8 	bl	80016e0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b0a      	cmp	r3, #10
 8001b38:	d90b      	bls.n	8001b52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2205      	movs	r2, #5
 8001b4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e012      	b.n	8001b78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e5      	bne.n	8001b2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	e006      	b.n	8001b78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
  }
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	@ 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d003      	beq.n	8001bac <HAL_CAN_AddTxMessage+0x2c>
 8001ba4:	7ffb      	ldrb	r3, [r7, #31]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	f040 80ad 	bne.w	8001d06 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10a      	bne.n	8001bcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d105      	bne.n	8001bcc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 8095 	beq.w	8001cf6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	0e1b      	lsrs	r3, r3, #24
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10d      	bne.n	8001c04 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	6809      	ldr	r1, [r1, #0]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3318      	adds	r3, #24
 8001bfc:	011b      	lsls	r3, r3, #4
 8001bfe:	440b      	add	r3, r1
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e00f      	b.n	8001c24 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c0e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c14:	68f9      	ldr	r1, [r7, #12]
 8001c16:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001c18:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3318      	adds	r3, #24
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	440b      	add	r3, r1
 8001c22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6819      	ldr	r1, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	3318      	adds	r3, #24
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	440b      	add	r3, r1
 8001c34:	3304      	adds	r3, #4
 8001c36:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	7d1b      	ldrb	r3, [r3, #20]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d111      	bne.n	8001c64 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3318      	adds	r3, #24
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	6811      	ldr	r1, [r2, #0]
 8001c54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3318      	adds	r3, #24
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	440b      	add	r3, r1
 8001c60:	3304      	adds	r3, #4
 8001c62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3307      	adds	r3, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	061a      	lsls	r2, r3, #24
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3306      	adds	r3, #6
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3305      	adds	r3, #5
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	3204      	adds	r2, #4
 8001c84:	7812      	ldrb	r2, [r2, #0]
 8001c86:	4610      	mov	r0, r2
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	6811      	ldr	r1, [r2, #0]
 8001c8c:	ea43 0200 	orr.w	r2, r3, r0
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	011b      	lsls	r3, r3, #4
 8001c94:	440b      	add	r3, r1
 8001c96:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001c9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3303      	adds	r3, #3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	061a      	lsls	r2, r3, #24
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	7812      	ldrb	r2, [r2, #0]
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	6811      	ldr	r1, [r2, #0]
 8001cc2:	ea43 0200 	orr.w	r2, r3, r0
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	440b      	add	r3, r1
 8001ccc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001cd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	3318      	adds	r3, #24
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	6811      	ldr	r1, [r2, #0]
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3318      	adds	r3, #24
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	440b      	add	r3, r1
 8001cf0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	e00e      	b.n	8001d14 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e006      	b.n	8001d14 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
  }
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3724      	adds	r7, #36	@ 0x24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d34:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d36:	7dfb      	ldrb	r3, [r7, #23]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d003      	beq.n	8001d44 <HAL_CAN_GetRxMessage+0x24>
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	f040 8103 	bne.w	8001f4a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10e      	bne.n	8001d68 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d116      	bne.n	8001d86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0f7      	b.n	8001f58 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d107      	bne.n	8001d86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0e8      	b.n	8001f58 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	331b      	adds	r3, #27
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	4413      	add	r3, r2
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0204 	and.w	r2, r3, #4
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10c      	bne.n	8001dbe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	331b      	adds	r3, #27
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	4413      	add	r3, r2
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0d5b      	lsrs	r3, r3, #21
 8001db4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e00b      	b.n	8001dd6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	331b      	adds	r3, #27
 8001dc6:	011b      	lsls	r3, r3, #4
 8001dc8:	4413      	add	r3, r2
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	08db      	lsrs	r3, r3, #3
 8001dce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	331b      	adds	r3, #27
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	4413      	add	r3, r2
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0202 	and.w	r2, r3, #2
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	331b      	adds	r3, #27
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	4413      	add	r3, r2
 8001df8:	3304      	adds	r3, #4
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2208      	movs	r2, #8
 8001e08:	611a      	str	r2, [r3, #16]
 8001e0a:	e00b      	b.n	8001e24 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	331b      	adds	r3, #27
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4413      	add	r3, r2
 8001e18:	3304      	adds	r3, #4
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 020f 	and.w	r2, r3, #15
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	331b      	adds	r3, #27
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	4413      	add	r3, r2
 8001e30:	3304      	adds	r3, #4
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	331b      	adds	r3, #27
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	4413      	add	r3, r2
 8001e48:	3304      	adds	r3, #4
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0a1a      	lsrs	r2, r3, #8
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	4413      	add	r3, r2
 8001e8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0c1a      	lsrs	r2, r3, #16
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	011b      	lsls	r3, r3, #4
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0e1a      	lsrs	r2, r3, #24
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	3303      	adds	r3, #3
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0a1a      	lsrs	r2, r3, #8
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	3305      	adds	r3, #5
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	0c1a      	lsrs	r2, r3, #16
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	3306      	adds	r3, #6
 8001f00:	b2d2      	uxtb	r2, r2
 8001f02:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0e1a      	lsrs	r2, r3, #24
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	3307      	adds	r3, #7
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d108      	bne.n	8001f36 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0220 	orr.w	r2, r2, #32
 8001f32:	60da      	str	r2, [r3, #12]
 8001f34:	e007      	b.n	8001f46 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0220 	orr.w	r2, r2, #32
 8001f44:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e006      	b.n	8001f58 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
  }
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f74:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d002      	beq.n	8001f82 <HAL_CAN_ActivateNotification+0x1e>
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d109      	bne.n	8001f96 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6959      	ldr	r1, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e006      	b.n	8001fa4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
  }
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	@ 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d07c      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d023      	beq.n	8002048 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f983 	bl	800231e <HAL_CAN_TxMailbox0CompleteCallback>
 8002018:	e016      	b.n	8002048 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002026:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
 800202c:	e00c      	b.n	8002048 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002040:	e002      	b.n	8002048 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f989 	bl	800235a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d024      	beq.n	800209c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800205a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f963 	bl	8002332 <HAL_CAN_TxMailbox1CompleteCallback>
 800206c:	e016      	b.n	800209c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d004      	beq.n	8002082 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800207e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002080:	e00c      	b.n	800209c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
 8002094:	e002      	b.n	800209c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f969 	bl	800236e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d024      	beq.n	80020f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f943 	bl	8002346 <HAL_CAN_TxMailbox2CompleteCallback>
 80020c0:	e016      	b.n	80020f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d004      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020d4:	e00c      	b.n	80020f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e8:	e002      	b.n	80020f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f949 	bl	8002382 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2210      	movs	r2, #16
 8002112:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00b      	beq.n	8002136 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2208      	movs	r2, #8
 800212e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7fe f9f9 	bl	8000528 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d009      	beq.n	8002154 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d002      	beq.n	8002154 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f921 	bl	8002396 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00c      	beq.n	8002178 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2210      	movs	r2, #16
 8002176:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00b      	beq.n	800219a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2208      	movs	r2, #8
 8002192:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 f912 	bl	80023be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d009      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f8f9 	bl	80023aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80021b8:	6a3b      	ldr	r3, [r7, #32]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0310 	and.w	r3, r3, #16
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2210      	movs	r2, #16
 80021d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f8fc 	bl	80023d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00b      	beq.n	80021fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2208      	movs	r2, #8
 80021f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f8f5 	bl	80023e6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d07b      	beq.n	80022fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d072      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d008      	beq.n	800222c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800222c:	6a3b      	ldr	r3, [r7, #32]
 800222e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002232:	2b00      	cmp	r3, #0
 8002234:	d008      	beq.n	8002248 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	f043 0302 	orr.w	r3, r3, #2
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800224e:	2b00      	cmp	r3, #0
 8002250:	d008      	beq.n	8002264 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800226a:	2b00      	cmp	r3, #0
 800226c:	d043      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	d03e      	beq.n	80022f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800227e:	2b60      	cmp	r3, #96	@ 0x60
 8002280:	d02b      	beq.n	80022da <HAL_CAN_IRQHandler+0x32a>
 8002282:	2b60      	cmp	r3, #96	@ 0x60
 8002284:	d82e      	bhi.n	80022e4 <HAL_CAN_IRQHandler+0x334>
 8002286:	2b50      	cmp	r3, #80	@ 0x50
 8002288:	d022      	beq.n	80022d0 <HAL_CAN_IRQHandler+0x320>
 800228a:	2b50      	cmp	r3, #80	@ 0x50
 800228c:	d82a      	bhi.n	80022e4 <HAL_CAN_IRQHandler+0x334>
 800228e:	2b40      	cmp	r3, #64	@ 0x40
 8002290:	d019      	beq.n	80022c6 <HAL_CAN_IRQHandler+0x316>
 8002292:	2b40      	cmp	r3, #64	@ 0x40
 8002294:	d826      	bhi.n	80022e4 <HAL_CAN_IRQHandler+0x334>
 8002296:	2b30      	cmp	r3, #48	@ 0x30
 8002298:	d010      	beq.n	80022bc <HAL_CAN_IRQHandler+0x30c>
 800229a:	2b30      	cmp	r3, #48	@ 0x30
 800229c:	d822      	bhi.n	80022e4 <HAL_CAN_IRQHandler+0x334>
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d002      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x2f8>
 80022a2:	2b20      	cmp	r3, #32
 80022a4:	d005      	beq.n	80022b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80022a6:	e01d      	b.n	80022e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	f043 0308 	orr.w	r3, r3, #8
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022b0:	e019      	b.n	80022e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	f043 0310 	orr.w	r3, r3, #16
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022ba:	e014      	b.n	80022e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	f043 0320 	orr.w	r3, r3, #32
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022c4:	e00f      	b.n	80022e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022ce:	e00a      	b.n	80022e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022d8:	e005      	b.n	80022e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80022e2:	e000      	b.n	80022e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80022e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80022f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2204      	movs	r2, #4
 80022fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f872 	bl	80023fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002316:	bf00      	nop
 8002318:	3728      	adds	r7, #40	@ 0x28
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80023be:	b480      	push	{r7}
 80023c0:	b083      	sub	sp, #12
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80023e6:	b480      	push	{r7}
 80023e8:	b083      	sub	sp, #12
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002420:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800242c:	4013      	ands	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002438:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800243c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002442:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <__NVIC_SetPriorityGrouping+0x44>)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	60d3      	str	r3, [r2, #12]
}
 8002448:	bf00      	nop
 800244a:	3714      	adds	r7, #20
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800245c:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <__NVIC_GetPriorityGrouping+0x18>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	f003 0307 	and.w	r3, r3, #7
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	db0b      	blt.n	800249e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	f003 021f 	and.w	r2, r3, #31
 800248c:	4907      	ldr	r1, [pc, #28]	@ (80024ac <__NVIC_EnableIRQ+0x38>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2001      	movs	r0, #1
 8002496:	fa00 f202 	lsl.w	r2, r0, r2
 800249a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000e100 	.word	0xe000e100

080024b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	6039      	str	r1, [r7, #0]
 80024ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	db0a      	blt.n	80024da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	@ (80024fc <__NVIC_SetPriority+0x4c>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	0112      	lsls	r2, r2, #4
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	440b      	add	r3, r1
 80024d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d8:	e00a      	b.n	80024f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4908      	ldr	r1, [pc, #32]	@ (8002500 <__NVIC_SetPriority+0x50>)
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	3b04      	subs	r3, #4
 80024e8:	0112      	lsls	r2, r2, #4
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	440b      	add	r3, r1
 80024ee:	761a      	strb	r2, [r3, #24]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000e100 	.word	0xe000e100
 8002500:	e000ed00 	.word	0xe000ed00

08002504 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	@ 0x24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f1c3 0307 	rsb	r3, r3, #7
 800251e:	2b04      	cmp	r3, #4
 8002520:	bf28      	it	cs
 8002522:	2304      	movcs	r3, #4
 8002524:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3304      	adds	r3, #4
 800252a:	2b06      	cmp	r3, #6
 800252c:	d902      	bls.n	8002534 <NVIC_EncodePriority+0x30>
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3b03      	subs	r3, #3
 8002532:	e000      	b.n	8002536 <NVIC_EncodePriority+0x32>
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002538:	f04f 32ff 	mov.w	r2, #4294967295
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	401a      	ands	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800254c:	f04f 31ff 	mov.w	r1, #4294967295
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	43d9      	mvns	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	4313      	orrs	r3, r2
         );
}
 800255e:	4618      	mov	r0, r3
 8002560:	3724      	adds	r7, #36	@ 0x24
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3b01      	subs	r3, #1
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800257c:	d301      	bcc.n	8002582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800257e:	2301      	movs	r3, #1
 8002580:	e00f      	b.n	80025a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002582:	4a0a      	ldr	r2, [pc, #40]	@ (80025ac <SysTick_Config+0x40>)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3b01      	subs	r3, #1
 8002588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800258a:	210f      	movs	r1, #15
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f7ff ff8e 	bl	80024b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <SysTick_Config+0x40>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259a:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <SysTick_Config+0x40>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010

080025b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff ff29 	bl	8002410 <__NVIC_SetPriorityGrouping>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	4603      	mov	r3, r0
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
 80025d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025d8:	f7ff ff3e 	bl	8002458 <__NVIC_GetPriorityGrouping>
 80025dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f7ff ff8e 	bl	8002504 <NVIC_EncodePriority>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ee:	4611      	mov	r1, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff5d 	bl	80024b0 <__NVIC_SetPriority>
}
 80025f6:	bf00      	nop
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	4603      	mov	r3, r0
 8002606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff31 	bl	8002474 <__NVIC_EnableIRQ>
}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7ff ffa2 	bl	800256c <SysTick_Config>
 8002628:	4603      	mov	r3, r0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e00e      	b.n	8002662 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	795b      	ldrb	r3, [r3, #5]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d105      	bne.n	800265a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7fe fed7 	bl	8001408 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002678:	f7ff f832 	bl	80016e0 <HAL_GetTick>
 800267c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d008      	beq.n	800269c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2280      	movs	r2, #128	@ 0x80
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e052      	b.n	8002742 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0216 	bic.w	r2, r2, #22
 80026aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d103      	bne.n	80026cc <HAL_DMA_Abort+0x62>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0208 	bic.w	r2, r2, #8
 80026da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ec:	e013      	b.n	8002716 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ee:	f7fe fff7 	bl	80016e0 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d90c      	bls.n	8002716 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2203      	movs	r2, #3
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e015      	b.n	8002742 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e4      	bne.n	80026ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	223f      	movs	r2, #63	@ 0x3f
 800272a:	409a      	lsls	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d004      	beq.n	8002768 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2280      	movs	r2, #128	@ 0x80
 8002762:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e00c      	b.n	8002782 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2205      	movs	r2, #5
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0201 	bic.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
	...

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e177      	b.n	8002a9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8166 	bne.w	8002a96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80c0 	beq.w	8002a96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b66      	ldr	r3, [pc, #408]	@ (8002ab4 <HAL_GPIO_Init+0x324>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800291e:	4a65      	ldr	r2, [pc, #404]	@ (8002ab4 <HAL_GPIO_Init+0x324>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002924:	6453      	str	r3, [r2, #68]	@ 0x44
 8002926:	4b63      	ldr	r3, [pc, #396]	@ (8002ab4 <HAL_GPIO_Init+0x324>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a61      	ldr	r2, [pc, #388]	@ (8002ab8 <HAL_GPIO_Init+0x328>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a58      	ldr	r2, [pc, #352]	@ (8002abc <HAL_GPIO_Init+0x32c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d037      	beq.n	80029ce <HAL_GPIO_Init+0x23e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a57      	ldr	r2, [pc, #348]	@ (8002ac0 <HAL_GPIO_Init+0x330>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d031      	beq.n	80029ca <HAL_GPIO_Init+0x23a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a56      	ldr	r2, [pc, #344]	@ (8002ac4 <HAL_GPIO_Init+0x334>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02b      	beq.n	80029c6 <HAL_GPIO_Init+0x236>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a55      	ldr	r2, [pc, #340]	@ (8002ac8 <HAL_GPIO_Init+0x338>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d025      	beq.n	80029c2 <HAL_GPIO_Init+0x232>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a54      	ldr	r2, [pc, #336]	@ (8002acc <HAL_GPIO_Init+0x33c>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01f      	beq.n	80029be <HAL_GPIO_Init+0x22e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a53      	ldr	r2, [pc, #332]	@ (8002ad0 <HAL_GPIO_Init+0x340>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d019      	beq.n	80029ba <HAL_GPIO_Init+0x22a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a52      	ldr	r2, [pc, #328]	@ (8002ad4 <HAL_GPIO_Init+0x344>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0x226>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a51      	ldr	r2, [pc, #324]	@ (8002ad8 <HAL_GPIO_Init+0x348>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00d      	beq.n	80029b2 <HAL_GPIO_Init+0x222>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a50      	ldr	r2, [pc, #320]	@ (8002adc <HAL_GPIO_Init+0x34c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <HAL_GPIO_Init+0x21e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ae0 <HAL_GPIO_Init+0x350>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_GPIO_Init+0x21a>
 80029a6:	2309      	movs	r3, #9
 80029a8:	e012      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029aa:	230a      	movs	r3, #10
 80029ac:	e010      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ae:	2308      	movs	r3, #8
 80029b0:	e00e      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029b2:	2307      	movs	r3, #7
 80029b4:	e00c      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029b6:	2306      	movs	r3, #6
 80029b8:	e00a      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ba:	2305      	movs	r3, #5
 80029bc:	e008      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029be:	2304      	movs	r3, #4
 80029c0:	e006      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029c2:	2303      	movs	r3, #3
 80029c4:	e004      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e002      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <HAL_GPIO_Init+0x240>
 80029ce:	2300      	movs	r3, #0
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	f002 0203 	and.w	r2, r2, #3
 80029d6:	0092      	lsls	r2, r2, #2
 80029d8:	4093      	lsls	r3, r2
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e0:	4935      	ldr	r1, [pc, #212]	@ (8002ab8 <HAL_GPIO_Init+0x328>)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	089b      	lsrs	r3, r3, #2
 80029e6:	3302      	adds	r3, #2
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae4 <HAL_GPIO_Init+0x354>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a12:	4a34      	ldr	r2, [pc, #208]	@ (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a18:	4b32      	ldr	r3, [pc, #200]	@ (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d003      	beq.n	8002a3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a42:	4b28      	ldr	r3, [pc, #160]	@ (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a66:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a90:	4a14      	ldr	r2, [pc, #80]	@ (8002ae4 <HAL_GPIO_Init+0x354>)
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	2b0f      	cmp	r3, #15
 8002aa0:	f67f ae84 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	3724      	adds	r7, #36	@ 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40013800 	.word	0x40013800
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40020800 	.word	0x40020800
 8002ac8:	40020c00 	.word	0x40020c00
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40021400 	.word	0x40021400
 8002ad4:	40021800 	.word	0x40021800
 8002ad8:	40021c00 	.word	0x40021c00
 8002adc:	40022000 	.word	0x40022000
 8002ae0:	40022400 	.word	0x40022400
 8002ae4:	40013c00 	.word	0x40013c00

08002ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
 8002af4:	4613      	mov	r3, r2
 8002af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b04:	e003      	b.n	8002b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	041a      	lsls	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	619a      	str	r2, [r3, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	603b      	str	r3, [r7, #0]
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <HAL_PWREx_EnableOverDrive+0x90>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bac <HAL_PWREx_EnableOverDrive+0x90>)
 8002b30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b36:	4b1d      	ldr	r3, [pc, #116]	@ (8002bac <HAL_PWREx_EnableOverDrive+0x90>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b42:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b48:	f7fe fdca 	bl	80016e0 <HAL_GetTick>
 8002b4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b4e:	e009      	b.n	8002b64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b50:	f7fe fdc6 	bl	80016e0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b5e:	d901      	bls.n	8002b64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e01f      	b.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b64:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b70:	d1ee      	bne.n	8002b50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b72:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b78:	f7fe fdb2 	bl	80016e0 <HAL_GetTick>
 8002b7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b7e:	e009      	b.n	8002b94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b80:	f7fe fdae 	bl	80016e0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b8e:	d901      	bls.n	8002b94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e007      	b.n	8002ba4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b94:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ba0:	d1ee      	bne.n	8002b80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	420e0040 	.word	0x420e0040
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	420e0044 	.word	0x420e0044

08002bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e267      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d075      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bda:	4b88      	ldr	r3, [pc, #544]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d00c      	beq.n	8002c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002be6:	4b85      	ldr	r3, [pc, #532]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d112      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b82      	ldr	r3, [pc, #520]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bfe:	d10b      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	4b7e      	ldr	r3, [pc, #504]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d05b      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x108>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d157      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e242      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c20:	d106      	bne.n	8002c30 <HAL_RCC_OscConfig+0x74>
 8002c22:	4b76      	ldr	r3, [pc, #472]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a75      	ldr	r2, [pc, #468]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2c:	6013      	str	r3, [r2, #0]
 8002c2e:	e01d      	b.n	8002c6c <HAL_RCC_OscConfig+0xb0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c38:	d10c      	bne.n	8002c54 <HAL_RCC_OscConfig+0x98>
 8002c3a:	4b70      	ldr	r3, [pc, #448]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6f      	ldr	r2, [pc, #444]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	4b6d      	ldr	r3, [pc, #436]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6c      	ldr	r2, [pc, #432]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	e00b      	b.n	8002c6c <HAL_RCC_OscConfig+0xb0>
 8002c54:	4b69      	ldr	r3, [pc, #420]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a68      	ldr	r2, [pc, #416]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b66      	ldr	r3, [pc, #408]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a65      	ldr	r2, [pc, #404]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d013      	beq.n	8002c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fe fd34 	bl	80016e0 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fd30 	bl	80016e0 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b64      	cmp	r3, #100	@ 0x64
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e207      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0f0      	beq.n	8002c7c <HAL_RCC_OscConfig+0xc0>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fd20 	bl	80016e0 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ca4:	f7fe fd1c 	bl	80016e0 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b64      	cmp	r3, #100	@ 0x64
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e1f3      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	4b51      	ldr	r3, [pc, #324]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xe8>
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d063      	beq.n	8002d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cde:	4b47      	ldr	r3, [pc, #284]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d11c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cea:	4b44      	ldr	r3, [pc, #272]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d116      	bne.n	8002d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf6:	4b41      	ldr	r3, [pc, #260]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d005      	beq.n	8002d0e <HAL_RCC_OscConfig+0x152>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d001      	beq.n	8002d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e1c7      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4937      	ldr	r1, [pc, #220]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d22:	e03a      	b.n	8002d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d020      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d2c:	4b34      	ldr	r3, [pc, #208]	@ (8002e00 <HAL_RCC_OscConfig+0x244>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d32:	f7fe fcd5 	bl	80016e0 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fcd1 	bl	80016e0 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d901      	bls.n	8002d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e1a8      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0f0      	beq.n	8002d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d58:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4925      	ldr	r1, [pc, #148]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]
 8002d6c:	e015      	b.n	8002d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6e:	4b24      	ldr	r3, [pc, #144]	@ (8002e00 <HAL_RCC_OscConfig+0x244>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fcb4 	bl	80016e0 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fcb0 	bl	80016e0 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e187      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d036      	beq.n	8002e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <HAL_RCC_OscConfig+0x248>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7fe fc94 	bl	80016e0 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7fe fc90 	bl	80016e0 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e167      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <HAL_RCC_OscConfig+0x240>)
 8002dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x200>
 8002dda:	e01b      	b.n	8002e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ddc:	4b09      	ldr	r3, [pc, #36]	@ (8002e04 <HAL_RCC_OscConfig+0x248>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de2:	f7fe fc7d 	bl	80016e0 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de8:	e00e      	b.n	8002e08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dea:	f7fe fc79 	bl	80016e0 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d907      	bls.n	8002e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e150      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470000 	.word	0x42470000
 8002e04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e08:	4b88      	ldr	r3, [pc, #544]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1ea      	bne.n	8002dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8097 	beq.w	8002f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e22:	2300      	movs	r3, #0
 8002e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e26:	4b81      	ldr	r3, [pc, #516]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	4b7d      	ldr	r3, [pc, #500]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	4a7c      	ldr	r2, [pc, #496]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e42:	4b7a      	ldr	r3, [pc, #488]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e52:	4b77      	ldr	r3, [pc, #476]	@ (8003030 <HAL_RCC_OscConfig+0x474>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d118      	bne.n	8002e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5e:	4b74      	ldr	r3, [pc, #464]	@ (8003030 <HAL_RCC_OscConfig+0x474>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a73      	ldr	r2, [pc, #460]	@ (8003030 <HAL_RCC_OscConfig+0x474>)
 8002e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fc39 	bl	80016e0 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e72:	f7fe fc35 	bl	80016e0 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e10c      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	4b6a      	ldr	r3, [pc, #424]	@ (8003030 <HAL_RCC_OscConfig+0x474>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x2ea>
 8002e98:	4b64      	ldr	r3, [pc, #400]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9c:	4a63      	ldr	r2, [pc, #396]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002e9e:	f043 0301 	orr.w	r3, r3, #1
 8002ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ea4:	e01c      	b.n	8002ee0 <HAL_RCC_OscConfig+0x324>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b05      	cmp	r3, #5
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x30c>
 8002eae:	4b5f      	ldr	r3, [pc, #380]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb2:	4a5e      	ldr	r2, [pc, #376]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002eb4:	f043 0304 	orr.w	r3, r3, #4
 8002eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eba:	4b5c      	ldr	r3, [pc, #368]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCC_OscConfig+0x324>
 8002ec8:	4b58      	ldr	r3, [pc, #352]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ecc:	4a57      	ldr	r2, [pc, #348]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002ece:	f023 0301 	bic.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed4:	4b55      	ldr	r3, [pc, #340]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed8:	4a54      	ldr	r2, [pc, #336]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002eda:	f023 0304 	bic.w	r3, r3, #4
 8002ede:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d015      	beq.n	8002f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fe fbfa 	bl	80016e0 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef0:	f7fe fbf6 	bl	80016e0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e0cb      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f06:	4b49      	ldr	r3, [pc, #292]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0ee      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x334>
 8002f12:	e014      	b.n	8002f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f14:	f7fe fbe4 	bl	80016e0 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fbe0 	bl	80016e0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e0b5      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f32:	4b3e      	ldr	r3, [pc, #248]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1ee      	bne.n	8002f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f44:	4b39      	ldr	r3, [pc, #228]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	4a38      	ldr	r2, [pc, #224]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a1 	beq.w	800309c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f5a:	4b34      	ldr	r3, [pc, #208]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d05c      	beq.n	8003020 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d141      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b31      	ldr	r3, [pc, #196]	@ (8003034 <HAL_RCC_OscConfig+0x478>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fbb4 	bl	80016e0 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fbb0 	bl	80016e0 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e087      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	4b27      	ldr	r3, [pc, #156]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	019b      	lsls	r3, r3, #6
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	041b      	lsls	r3, r3, #16
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	061b      	lsls	r3, r3, #24
 8002fbe:	491b      	ldr	r1, [pc, #108]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <HAL_RCC_OscConfig+0x478>)
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fca:	f7fe fb89 	bl	80016e0 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fe fb85 	bl	80016e0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e05c      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe4:	4b11      	ldr	r3, [pc, #68]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x416>
 8002ff0:	e054      	b.n	800309c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	4b10      	ldr	r3, [pc, #64]	@ (8003034 <HAL_RCC_OscConfig+0x478>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fb72 	bl	80016e0 <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7fe fb6e 	bl	80016e0 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e045      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003012:	4b06      	ldr	r3, [pc, #24]	@ (800302c <HAL_RCC_OscConfig+0x470>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x444>
 800301e:	e03d      	b.n	800309c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e038      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
 800302c:	40023800 	.word	0x40023800
 8003030:	40007000 	.word	0x40007000
 8003034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003038:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCC_OscConfig+0x4ec>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d028      	beq.n	8003098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d121      	bne.n	8003098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d11a      	bne.n	8003098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800306e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003070:	4293      	cmp	r3, r2
 8003072:	d111      	bne.n	8003098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	3b01      	subs	r3, #1
 8003082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d107      	bne.n	8003098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800

080030ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0cc      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b68      	ldr	r3, [pc, #416]	@ (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d90c      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b65      	ldr	r3, [pc, #404]	@ (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b63      	ldr	r3, [pc, #396]	@ (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0b8      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003100:	4b59      	ldr	r3, [pc, #356]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a58      	ldr	r2, [pc, #352]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800310a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d005      	beq.n	8003124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003118:	4b53      	ldr	r3, [pc, #332]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	4a52      	ldr	r2, [pc, #328]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003124:	4b50      	ldr	r3, [pc, #320]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	494d      	ldr	r1, [pc, #308]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d044      	beq.n	80031cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314a:	4b47      	ldr	r3, [pc, #284]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d119      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e07f      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d003      	beq.n	800316a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	2b03      	cmp	r3, #3
 8003168:	d107      	bne.n	800317a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b3f      	ldr	r3, [pc, #252]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d109      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e06f      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800317a:	4b3b      	ldr	r3, [pc, #236]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e067      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800318a:	4b37      	ldr	r3, [pc, #220]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	4934      	ldr	r1, [pc, #208]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800319c:	f7fe faa0 	bl	80016e0 <HAL_GetTick>
 80031a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a4:	f7fe fa9c 	bl	80016e0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e04f      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ba:	4b2b      	ldr	r3, [pc, #172]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 020c 	and.w	r2, r3, #12
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1eb      	bne.n	80031a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031cc:	4b25      	ldr	r3, [pc, #148]	@ (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d20c      	bcs.n	80031f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031da:	4b22      	ldr	r3, [pc, #136]	@ (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e2:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e032      	b.n	800325a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003200:	4b19      	ldr	r3, [pc, #100]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4916      	ldr	r1, [pc, #88]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	4313      	orrs	r3, r2
 8003210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b00      	cmp	r3, #0
 800321c:	d009      	beq.n	8003232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800321e:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	490e      	ldr	r1, [pc, #56]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800322e:	4313      	orrs	r3, r2
 8003230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003232:	f000 f821 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8003236:	4602      	mov	r2, r0
 8003238:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	091b      	lsrs	r3, r3, #4
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	490a      	ldr	r1, [pc, #40]	@ (800326c <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	5ccb      	ldrb	r3, [r1, r3]
 8003246:	fa22 f303 	lsr.w	r3, r2, r3
 800324a:	4a09      	ldr	r2, [pc, #36]	@ (8003270 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800324e:	4b09      	ldr	r3, [pc, #36]	@ (8003274 <HAL_RCC_ClockConfig+0x1c8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe fa00 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	40023c00 	.word	0x40023c00
 8003268:	40023800 	.word	0x40023800
 800326c:	080045a0 	.word	0x080045a0
 8003270:	20000004 	.word	0x20000004
 8003274:	20000008 	.word	0x20000008

08003278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800327c:	b090      	sub	sp, #64	@ 0x40
 800327e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	637b      	str	r3, [r7, #52]	@ 0x34
 8003284:	2300      	movs	r3, #0
 8003286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003288:	2300      	movs	r3, #0
 800328a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003290:	4b59      	ldr	r3, [pc, #356]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 030c 	and.w	r3, r3, #12
 8003298:	2b08      	cmp	r3, #8
 800329a:	d00d      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x40>
 800329c:	2b08      	cmp	r3, #8
 800329e:	f200 80a1 	bhi.w	80033e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x34>
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d003      	beq.n	80032b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80032aa:	e09b      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032ac:	4b53      	ldr	r3, [pc, #332]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x184>)
 80032ae:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80032b0:	e09b      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032b2:	4b53      	ldr	r3, [pc, #332]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x188>)
 80032b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032b6:	e098      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b8:	4b4f      	ldr	r3, [pc, #316]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032c2:	4b4d      	ldr	r3, [pc, #308]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d028      	beq.n	8003320 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ce:	4b4a      	ldr	r3, [pc, #296]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	099b      	lsrs	r3, r3, #6
 80032d4:	2200      	movs	r2, #0
 80032d6:	623b      	str	r3, [r7, #32]
 80032d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032e0:	2100      	movs	r1, #0
 80032e2:	4b47      	ldr	r3, [pc, #284]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x188>)
 80032e4:	fb03 f201 	mul.w	r2, r3, r1
 80032e8:	2300      	movs	r3, #0
 80032ea:	fb00 f303 	mul.w	r3, r0, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	4a43      	ldr	r2, [pc, #268]	@ (8003400 <HAL_RCC_GetSysClockFreq+0x188>)
 80032f2:	fba0 1202 	umull	r1, r2, r0, r2
 80032f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032f8:	460a      	mov	r2, r1
 80032fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80032fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032fe:	4413      	add	r3, r2
 8003300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003304:	2200      	movs	r2, #0
 8003306:	61bb      	str	r3, [r7, #24]
 8003308:	61fa      	str	r2, [r7, #28]
 800330a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800330e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003312:	f7fc ff6b 	bl	80001ec <__aeabi_uldivmod>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4613      	mov	r3, r2
 800331c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800331e:	e053      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003320:	4b35      	ldr	r3, [pc, #212]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	099b      	lsrs	r3, r3, #6
 8003326:	2200      	movs	r2, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	617a      	str	r2, [r7, #20]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003332:	f04f 0b00 	mov.w	fp, #0
 8003336:	4652      	mov	r2, sl
 8003338:	465b      	mov	r3, fp
 800333a:	f04f 0000 	mov.w	r0, #0
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	0159      	lsls	r1, r3, #5
 8003344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003348:	0150      	lsls	r0, r2, #5
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	ebb2 080a 	subs.w	r8, r2, sl
 8003352:	eb63 090b 	sbc.w	r9, r3, fp
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003362:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003366:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800336a:	ebb2 0408 	subs.w	r4, r2, r8
 800336e:	eb63 0509 	sbc.w	r5, r3, r9
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	00eb      	lsls	r3, r5, #3
 800337c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003380:	00e2      	lsls	r2, r4, #3
 8003382:	4614      	mov	r4, r2
 8003384:	461d      	mov	r5, r3
 8003386:	eb14 030a 	adds.w	r3, r4, sl
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	eb45 030b 	adc.w	r3, r5, fp
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800339e:	4629      	mov	r1, r5
 80033a0:	028b      	lsls	r3, r1, #10
 80033a2:	4621      	mov	r1, r4
 80033a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a8:	4621      	mov	r1, r4
 80033aa:	028a      	lsls	r2, r1, #10
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b2:	2200      	movs	r2, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	60fa      	str	r2, [r7, #12]
 80033b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033bc:	f7fc ff16 	bl	80001ec <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4613      	mov	r3, r2
 80033c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	3301      	adds	r3, #1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80033d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80033da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033e2:	e002      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_RCC_GetSysClockFreq+0x184>)
 80033e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3740      	adds	r7, #64	@ 0x40
 80033f0:	46bd      	mov	sp, r7
 80033f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	00b71b00 	.word	0x00b71b00

08003404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b03      	ldr	r3, [pc, #12]	@ (8003418 <HAL_RCC_GetHCLKFreq+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000004 	.word	0x20000004

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003420:	f7ff fff0 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	@ (800343c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0a9b      	lsrs	r3, r3, #10
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4903      	ldr	r1, [pc, #12]	@ (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	080045b0 	.word	0x080045b0

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003448:	f7ff ffdc 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	@ (8003464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0b5b      	lsrs	r3, r3, #13
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	@ (8003468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	080045b0 	.word	0x080045b0

0800346c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e042      	b.n	8003504 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd ffda 	bl	800144c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	@ 0x24
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fdc9 	bl	8004048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2220      	movs	r2, #32
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b08a      	sub	sp, #40	@ 0x28
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b20      	cmp	r3, #32
 800352a:	f040 8081 	bne.w	8003630 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d002      	beq.n	800353a <HAL_UART_Receive+0x2e>
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e079      	b.n	8003632 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2222      	movs	r2, #34	@ 0x22
 8003548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003552:	f7fe f8c5 	bl	80016e0 <HAL_GetTick>
 8003556:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	88fa      	ldrh	r2, [r7, #6]
 800355c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	88fa      	ldrh	r2, [r7, #6]
 8003562:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356c:	d108      	bne.n	8003580 <HAL_UART_Receive+0x74>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d104      	bne.n	8003580 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e003      	b.n	8003588 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003588:	e047      	b.n	800361a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	9300      	str	r3, [sp, #0]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	2120      	movs	r1, #32
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fb27 	bl	8003be8 <UART_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e042      	b.n	8003632 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10c      	bne.n	80035cc <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035be:	b29a      	uxth	r2, r3
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	3302      	adds	r3, #2
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e01f      	b.n	800360c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035d4:	d007      	beq.n	80035e6 <HAL_UART_Receive+0xda>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10a      	bne.n	80035f4 <HAL_UART_Receive+0xe8>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e008      	b.n	8003606 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003600:	b2da      	uxtb	r2, r3
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3301      	adds	r3, #1
 800360a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1b2      	bne.n	800358a <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	e000      	b.n	8003632 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003630:	2302      	movs	r3, #2
  }
}
 8003632:	4618      	mov	r0, r3
 8003634:	3720      	adds	r7, #32
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	60b9      	str	r1, [r7, #8]
 8003644:	4613      	mov	r3, r2
 8003646:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b20      	cmp	r3, #32
 8003652:	d112      	bne.n	800367a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <HAL_UART_Receive_IT+0x26>
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e00b      	b.n	800367c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800366a:	88fb      	ldrh	r3, [r7, #6]
 800366c:	461a      	mov	r2, r3
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fb12 	bl	8003c9a <UART_Start_Receive_IT>
 8003676:	4603      	mov	r3, r0
 8003678:	e000      	b.n	800367c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b0ba      	sub	sp, #232	@ 0xe8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036aa:	2300      	movs	r3, #0
 80036ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d009      	beq.n	80036ea <HAL_UART_IRQHandler+0x66>
 80036d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fbf2 	bl	8003ecc <UART_Receive_IT>
      return;
 80036e8:	e25b      	b.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 80de 	beq.w	80038b0 <HAL_UART_IRQHandler+0x22c>
 80036f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003704:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80d1 	beq.w	80038b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_UART_IRQHandler+0xae>
 800371a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800371e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_UART_IRQHandler+0xd2>
 800373e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	f043 0202 	orr.w	r2, r3, #2
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_UART_IRQHandler+0xf6>
 8003762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	f043 0204 	orr.w	r2, r3, #4
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d011      	beq.n	80037aa <HAL_UART_IRQHandler+0x126>
 8003786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a2:	f043 0208 	orr.w	r2, r3, #8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 81f2 	beq.w	8003b98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d008      	beq.n	80037d2 <HAL_UART_IRQHandler+0x14e>
 80037c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fb7d 	bl	8003ecc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	2b40      	cmp	r3, #64	@ 0x40
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <HAL_UART_IRQHandler+0x17a>
 80037f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d04f      	beq.n	800389e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa85 	bl	8003d0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	d141      	bne.n	8003896 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3314      	adds	r3, #20
 8003818:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003828:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800382c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003830:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3314      	adds	r3, #20
 800383a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800383e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003842:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800384a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1d9      	bne.n	8003812 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d013      	beq.n	800388e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386a:	4a7e      	ldr	r2, [pc, #504]	@ (8003a64 <HAL_UART_IRQHandler+0x3e0>)
 800386c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe ff69 	bl	800274a <HAL_DMA_Abort_IT>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d016      	beq.n	80038ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003888:	4610      	mov	r0, r2
 800388a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388c:	e00e      	b.n	80038ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f994 	bl	8003bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003894:	e00a      	b.n	80038ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f990 	bl	8003bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	e006      	b.n	80038ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f98c 	bl	8003bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038aa:	e175      	b.n	8003b98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ac:	bf00      	nop
    return;
 80038ae:	e173      	b.n	8003b98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	f040 814f 	bne.w	8003b58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8148 	beq.w	8003b58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038cc:	f003 0310 	and.w	r3, r3, #16
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8141 	beq.w	8003b58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038d6:	2300      	movs	r3, #0
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	f040 80b6 	bne.w	8003a68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003908:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 8145 	beq.w	8003b9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800391a:	429a      	cmp	r2, r3
 800391c:	f080 813e 	bcs.w	8003b9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003926:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003932:	f000 8088 	beq.w	8003a46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003944:	e853 3f00 	ldrex	r3, [r3]
 8003948:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800394c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003954:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003962:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800396e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800397a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1d9      	bne.n	8003936 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	3314      	adds	r3, #20
 8003988:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003994:	f023 0301 	bic.w	r3, r3, #1
 8003998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3314      	adds	r3, #20
 80039a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e1      	bne.n	8003982 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3314      	adds	r3, #20
 80039c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3314      	adds	r3, #20
 80039de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039ea:	e841 2300 	strex	r3, r2, [r1]
 80039ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1e3      	bne.n	80039be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2220      	movs	r2, #32
 80039fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a0e:	e853 3f00 	ldrex	r3, [r3]
 8003a12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a16:	f023 0310 	bic.w	r3, r3, #16
 8003a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a30:	e841 2300 	strex	r3, r2, [r1]
 8003a34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1e3      	bne.n	8003a04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe fe12 	bl	800266a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f8b7 	bl	8003bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a62:	e09b      	b.n	8003b9c <HAL_UART_IRQHandler+0x518>
 8003a64:	08003dd5 	.word	0x08003dd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 808e 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8089 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ab2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ab4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ab8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e3      	bne.n	8003a8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3314      	adds	r3, #20
 8003acc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	3314      	adds	r3, #20
 8003ae6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003aea:	633a      	str	r2, [r7, #48]	@ 0x30
 8003aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e3      	bne.n	8003ac6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	330c      	adds	r3, #12
 8003b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0310 	bic.w	r3, r3, #16
 8003b22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b30:	61fa      	str	r2, [r7, #28]
 8003b32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	69b9      	ldr	r1, [r7, #24]
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e3      	bne.n	8003b0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 f83d 	bl	8003bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b56:	e023      	b.n	8003ba0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d009      	beq.n	8003b78 <HAL_UART_IRQHandler+0x4f4>
 8003b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f943 	bl	8003dfc <UART_Transmit_IT>
    return;
 8003b76:	e014      	b.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00e      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
 8003b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f983 	bl	8003e9c <UART_EndTransmit_IT>
    return;
 8003b96:	e004      	b.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003b98:	bf00      	nop
 8003b9a:	e002      	b.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003b9c:	bf00      	nop
 8003b9e:	e000      	b.n	8003ba2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003ba0:	bf00      	nop
  }
}
 8003ba2:	37e8      	adds	r7, #232	@ 0xe8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bf8:	e03b      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d037      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7fd fd6d 	bl	80016e0 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	6a3a      	ldr	r2, [r7, #32]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e03a      	b.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d023      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b80      	cmp	r3, #128	@ 0x80
 8003c2e:	d020      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b40      	cmp	r3, #64	@ 0x40
 8003c34:	d01d      	beq.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d116      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f857 	bl	8003d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2208      	movs	r2, #8
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e00f      	b.n	8003c92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	bf0c      	ite	eq
 8003c82:	2301      	moveq	r3, #1
 8003c84:	2300      	movne	r3, #0
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	79fb      	ldrb	r3, [r7, #7]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d0b4      	beq.n	8003bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	88fa      	ldrh	r2, [r7, #6]
 8003cb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	88fa      	ldrh	r2, [r7, #6]
 8003cb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2222      	movs	r2, #34	@ 0x22
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d007      	beq.n	8003ce0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cde:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68da      	ldr	r2, [r3, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f042 0220 	orr.w	r2, r2, #32
 8003cfe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b095      	sub	sp, #84	@ 0x54
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	330c      	adds	r3, #12
 8003d1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d36:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e5      	bne.n	8003d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3314      	adds	r3, #20
 8003d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6a3b      	ldr	r3, [r7, #32]
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3314      	adds	r3, #20
 8003d68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e5      	bne.n	8003d4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d119      	bne.n	8003dba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f023 0310 	bic.w	r3, r3, #16
 8003d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003da6:	61ba      	str	r2, [r7, #24]
 8003da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6979      	ldr	r1, [r7, #20]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	613b      	str	r3, [r7, #16]
   return(result);
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dc8:	bf00      	nop
 8003dca:	3754      	adds	r7, #84	@ 0x54
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f7ff fee4 	bl	8003bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b21      	cmp	r3, #33	@ 0x21
 8003e0e:	d13e      	bne.n	8003e8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e18:	d114      	bne.n	8003e44 <UART_Transmit_IT+0x48>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d110      	bne.n	8003e44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	881b      	ldrh	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	1c9a      	adds	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	621a      	str	r2, [r3, #32]
 8003e42:	e008      	b.n	8003e56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	1c59      	adds	r1, r3, #1
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	6211      	str	r1, [r2, #32]
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4619      	mov	r1, r3
 8003e64:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10f      	bne.n	8003e8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68da      	ldr	r2, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fe73 	bl	8003ba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b08c      	sub	sp, #48	@ 0x30
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b22      	cmp	r3, #34	@ 0x22
 8003ede:	f040 80ae 	bne.w	800403e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eea:	d117      	bne.n	8003f1c <UART_Receive_IT+0x50>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d113      	bne.n	8003f1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	1c9a      	adds	r2, r3, #2
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f1a:	e026      	b.n	8003f6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2e:	d007      	beq.n	8003f40 <UART_Receive_IT+0x74>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <UART_Receive_IT+0x82>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	e008      	b.n	8003f60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3b01      	subs	r3, #1
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	4619      	mov	r1, r3
 8003f78:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d15d      	bne.n	800403a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0220 	bic.w	r2, r2, #32
 8003f8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695a      	ldr	r2, [r3, #20]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d135      	bne.n	8004030 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f023 0310 	bic.w	r3, r3, #16
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fea:	623a      	str	r2, [r7, #32]
 8003fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fee:	69f9      	ldr	r1, [r7, #28]
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e5      	bne.n	8003fca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d10a      	bne.n	8004022 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004026:	4619      	mov	r1, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fdd1 	bl	8003bd0 <HAL_UARTEx_RxEventCallback>
 800402e:	e002      	b.n	8004036 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7fc fd01 	bl	8000a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	e002      	b.n	8004040 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	e000      	b.n	8004040 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
  }
}
 8004040:	4618      	mov	r0, r3
 8004042:	3730      	adds	r7, #48	@ 0x30
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800404c:	b0c0      	sub	sp, #256	@ 0x100
 800404e:	af00      	add	r7, sp, #0
 8004050:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004064:	68d9      	ldr	r1, [r3, #12]
 8004066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	ea40 0301 	orr.w	r3, r0, r1
 8004070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	431a      	orrs	r2, r3
 8004080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	431a      	orrs	r2, r3
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80040a0:	f021 010c 	bic.w	r1, r1, #12
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80040ae:	430b      	orrs	r3, r1
 80040b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c2:	6999      	ldr	r1, [r3, #24]
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	ea40 0301 	orr.w	r3, r0, r1
 80040ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4b8f      	ldr	r3, [pc, #572]	@ (8004314 <UART_SetConfig+0x2cc>)
 80040d8:	429a      	cmp	r2, r3
 80040da:	d005      	beq.n	80040e8 <UART_SetConfig+0xa0>
 80040dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004318 <UART_SetConfig+0x2d0>)
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d104      	bne.n	80040f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040e8:	f7ff f9ac 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 80040ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040f0:	e003      	b.n	80040fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040f2:	f7ff f993 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 80040f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fe:	69db      	ldr	r3, [r3, #28]
 8004100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004104:	f040 810c 	bne.w	8004320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800410c:	2200      	movs	r2, #0
 800410e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004112:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	1891      	adds	r1, r2, r2
 8004120:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004122:	415b      	adcs	r3, r3
 8004124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800412a:	4621      	mov	r1, r4
 800412c:	eb12 0801 	adds.w	r8, r2, r1
 8004130:	4629      	mov	r1, r5
 8004132:	eb43 0901 	adc.w	r9, r3, r1
 8004136:	f04f 0200 	mov.w	r2, #0
 800413a:	f04f 0300 	mov.w	r3, #0
 800413e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800414a:	4690      	mov	r8, r2
 800414c:	4699      	mov	r9, r3
 800414e:	4623      	mov	r3, r4
 8004150:	eb18 0303 	adds.w	r3, r8, r3
 8004154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004158:	462b      	mov	r3, r5
 800415a:	eb49 0303 	adc.w	r3, r9, r3
 800415e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800416e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004176:	460b      	mov	r3, r1
 8004178:	18db      	adds	r3, r3, r3
 800417a:	653b      	str	r3, [r7, #80]	@ 0x50
 800417c:	4613      	mov	r3, r2
 800417e:	eb42 0303 	adc.w	r3, r2, r3
 8004182:	657b      	str	r3, [r7, #84]	@ 0x54
 8004184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800418c:	f7fc f82e 	bl	80001ec <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4b61      	ldr	r3, [pc, #388]	@ (800431c <UART_SetConfig+0x2d4>)
 8004196:	fba3 2302 	umull	r2, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	011c      	lsls	r4, r3, #4
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80041a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80041ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80041b8:	415b      	adcs	r3, r3
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041c0:	4641      	mov	r1, r8
 80041c2:	eb12 0a01 	adds.w	sl, r2, r1
 80041c6:	4649      	mov	r1, r9
 80041c8:	eb43 0b01 	adc.w	fp, r3, r1
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e0:	4692      	mov	sl, r2
 80041e2:	469b      	mov	fp, r3
 80041e4:	4643      	mov	r3, r8
 80041e6:	eb1a 0303 	adds.w	r3, sl, r3
 80041ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ee:	464b      	mov	r3, r9
 80041f0:	eb4b 0303 	adc.w	r3, fp, r3
 80041f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004204:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800420c:	460b      	mov	r3, r1
 800420e:	18db      	adds	r3, r3, r3
 8004210:	643b      	str	r3, [r7, #64]	@ 0x40
 8004212:	4613      	mov	r3, r2
 8004214:	eb42 0303 	adc.w	r3, r2, r3
 8004218:	647b      	str	r3, [r7, #68]	@ 0x44
 800421a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800421e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004222:	f7fb ffe3 	bl	80001ec <__aeabi_uldivmod>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4611      	mov	r1, r2
 800422c:	4b3b      	ldr	r3, [pc, #236]	@ (800431c <UART_SetConfig+0x2d4>)
 800422e:	fba3 2301 	umull	r2, r3, r3, r1
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	2264      	movs	r2, #100	@ 0x64
 8004236:	fb02 f303 	mul.w	r3, r2, r3
 800423a:	1acb      	subs	r3, r1, r3
 800423c:	00db      	lsls	r3, r3, #3
 800423e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004242:	4b36      	ldr	r3, [pc, #216]	@ (800431c <UART_SetConfig+0x2d4>)
 8004244:	fba3 2302 	umull	r2, r3, r3, r2
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004250:	441c      	add	r4, r3
 8004252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004256:	2200      	movs	r2, #0
 8004258:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800425c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	1891      	adds	r1, r2, r2
 800426a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800426c:	415b      	adcs	r3, r3
 800426e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004274:	4641      	mov	r1, r8
 8004276:	1851      	adds	r1, r2, r1
 8004278:	6339      	str	r1, [r7, #48]	@ 0x30
 800427a:	4649      	mov	r1, r9
 800427c:	414b      	adcs	r3, r1
 800427e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800428c:	4659      	mov	r1, fp
 800428e:	00cb      	lsls	r3, r1, #3
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004296:	4651      	mov	r1, sl
 8004298:	00ca      	lsls	r2, r1, #3
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	4642      	mov	r2, r8
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042a8:	464b      	mov	r3, r9
 80042aa:	460a      	mov	r2, r1
 80042ac:	eb42 0303 	adc.w	r3, r2, r3
 80042b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042c8:	460b      	mov	r3, r1
 80042ca:	18db      	adds	r3, r3, r3
 80042cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042ce:	4613      	mov	r3, r2
 80042d0:	eb42 0303 	adc.w	r3, r2, r3
 80042d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042de:	f7fb ff85 	bl	80001ec <__aeabi_uldivmod>
 80042e2:	4602      	mov	r2, r0
 80042e4:	460b      	mov	r3, r1
 80042e6:	4b0d      	ldr	r3, [pc, #52]	@ (800431c <UART_SetConfig+0x2d4>)
 80042e8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ec:	095b      	lsrs	r3, r3, #5
 80042ee:	2164      	movs	r1, #100	@ 0x64
 80042f0:	fb01 f303 	mul.w	r3, r1, r3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	3332      	adds	r3, #50	@ 0x32
 80042fa:	4a08      	ldr	r2, [pc, #32]	@ (800431c <UART_SetConfig+0x2d4>)
 80042fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	f003 0207 	and.w	r2, r3, #7
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4422      	add	r2, r4
 800430e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004310:	e106      	b.n	8004520 <UART_SetConfig+0x4d8>
 8004312:	bf00      	nop
 8004314:	40011000 	.word	0x40011000
 8004318:	40011400 	.word	0x40011400
 800431c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800432a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800432e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004332:	4642      	mov	r2, r8
 8004334:	464b      	mov	r3, r9
 8004336:	1891      	adds	r1, r2, r2
 8004338:	6239      	str	r1, [r7, #32]
 800433a:	415b      	adcs	r3, r3
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
 800433e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004342:	4641      	mov	r1, r8
 8004344:	1854      	adds	r4, r2, r1
 8004346:	4649      	mov	r1, r9
 8004348:	eb43 0501 	adc.w	r5, r3, r1
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	00eb      	lsls	r3, r5, #3
 8004356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800435a:	00e2      	lsls	r2, r4, #3
 800435c:	4614      	mov	r4, r2
 800435e:	461d      	mov	r5, r3
 8004360:	4643      	mov	r3, r8
 8004362:	18e3      	adds	r3, r4, r3
 8004364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004368:	464b      	mov	r3, r9
 800436a:	eb45 0303 	adc.w	r3, r5, r3
 800436e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800437e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800438e:	4629      	mov	r1, r5
 8004390:	008b      	lsls	r3, r1, #2
 8004392:	4621      	mov	r1, r4
 8004394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004398:	4621      	mov	r1, r4
 800439a:	008a      	lsls	r2, r1, #2
 800439c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043a0:	f7fb ff24 	bl	80001ec <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4b60      	ldr	r3, [pc, #384]	@ (800452c <UART_SetConfig+0x4e4>)
 80043aa:	fba3 2302 	umull	r2, r3, r3, r2
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	011c      	lsls	r4, r3, #4
 80043b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	61b9      	str	r1, [r7, #24]
 80043cc:	415b      	adcs	r3, r3
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d4:	4641      	mov	r1, r8
 80043d6:	1851      	adds	r1, r2, r1
 80043d8:	6139      	str	r1, [r7, #16]
 80043da:	4649      	mov	r1, r9
 80043dc:	414b      	adcs	r3, r1
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043ec:	4659      	mov	r1, fp
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	4651      	mov	r1, sl
 80043f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f6:	4651      	mov	r1, sl
 80043f8:	00ca      	lsls	r2, r1, #3
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	4642      	mov	r2, r8
 8004402:	189b      	adds	r3, r3, r2
 8004404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004408:	464b      	mov	r3, r9
 800440a:	460a      	mov	r2, r1
 800440c:	eb42 0303 	adc.w	r3, r2, r3
 8004410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800441e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004420:	f04f 0200 	mov.w	r2, #0
 8004424:	f04f 0300 	mov.w	r3, #0
 8004428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800442c:	4649      	mov	r1, r9
 800442e:	008b      	lsls	r3, r1, #2
 8004430:	4641      	mov	r1, r8
 8004432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004436:	4641      	mov	r1, r8
 8004438:	008a      	lsls	r2, r1, #2
 800443a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800443e:	f7fb fed5 	bl	80001ec <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4611      	mov	r1, r2
 8004448:	4b38      	ldr	r3, [pc, #224]	@ (800452c <UART_SetConfig+0x4e4>)
 800444a:	fba3 2301 	umull	r2, r3, r3, r1
 800444e:	095b      	lsrs	r3, r3, #5
 8004450:	2264      	movs	r2, #100	@ 0x64
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	1acb      	subs	r3, r1, r3
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	3332      	adds	r3, #50	@ 0x32
 800445c:	4a33      	ldr	r2, [pc, #204]	@ (800452c <UART_SetConfig+0x4e4>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	095b      	lsrs	r3, r3, #5
 8004464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004468:	441c      	add	r4, r3
 800446a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800446e:	2200      	movs	r2, #0
 8004470:	673b      	str	r3, [r7, #112]	@ 0x70
 8004472:	677a      	str	r2, [r7, #116]	@ 0x74
 8004474:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	1891      	adds	r1, r2, r2
 800447e:	60b9      	str	r1, [r7, #8]
 8004480:	415b      	adcs	r3, r3
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004488:	4641      	mov	r1, r8
 800448a:	1851      	adds	r1, r2, r1
 800448c:	6039      	str	r1, [r7, #0]
 800448e:	4649      	mov	r1, r9
 8004490:	414b      	adcs	r3, r1
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044a0:	4659      	mov	r1, fp
 80044a2:	00cb      	lsls	r3, r1, #3
 80044a4:	4651      	mov	r1, sl
 80044a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044aa:	4651      	mov	r1, sl
 80044ac:	00ca      	lsls	r2, r1, #3
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	4603      	mov	r3, r0
 80044b4:	4642      	mov	r2, r8
 80044b6:	189b      	adds	r3, r3, r2
 80044b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ba:	464b      	mov	r3, r9
 80044bc:	460a      	mov	r2, r1
 80044be:	eb42 0303 	adc.w	r3, r2, r3
 80044c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044dc:	4649      	mov	r1, r9
 80044de:	008b      	lsls	r3, r1, #2
 80044e0:	4641      	mov	r1, r8
 80044e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e6:	4641      	mov	r1, r8
 80044e8:	008a      	lsls	r2, r1, #2
 80044ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044ee:	f7fb fe7d 	bl	80001ec <__aeabi_uldivmod>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <UART_SetConfig+0x4e4>)
 80044f8:	fba3 1302 	umull	r1, r3, r3, r2
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	2164      	movs	r1, #100	@ 0x64
 8004500:	fb01 f303 	mul.w	r3, r1, r3
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	3332      	adds	r3, #50	@ 0x32
 800450a:	4a08      	ldr	r2, [pc, #32]	@ (800452c <UART_SetConfig+0x4e4>)
 800450c:	fba2 2303 	umull	r2, r3, r2, r3
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	f003 020f 	and.w	r2, r3, #15
 8004516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4422      	add	r2, r4
 800451e:	609a      	str	r2, [r3, #8]
}
 8004520:	bf00      	nop
 8004522:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004526:	46bd      	mov	sp, r7
 8004528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800452c:	51eb851f 	.word	0x51eb851f

08004530 <memset>:
 8004530:	4402      	add	r2, r0
 8004532:	4603      	mov	r3, r0
 8004534:	4293      	cmp	r3, r2
 8004536:	d100      	bne.n	800453a <memset+0xa>
 8004538:	4770      	bx	lr
 800453a:	f803 1b01 	strb.w	r1, [r3], #1
 800453e:	e7f9      	b.n	8004534 <memset+0x4>

08004540 <__libc_init_array>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4d0d      	ldr	r5, [pc, #52]	@ (8004578 <__libc_init_array+0x38>)
 8004544:	4c0d      	ldr	r4, [pc, #52]	@ (800457c <__libc_init_array+0x3c>)
 8004546:	1b64      	subs	r4, r4, r5
 8004548:	10a4      	asrs	r4, r4, #2
 800454a:	2600      	movs	r6, #0
 800454c:	42a6      	cmp	r6, r4
 800454e:	d109      	bne.n	8004564 <__libc_init_array+0x24>
 8004550:	4d0b      	ldr	r5, [pc, #44]	@ (8004580 <__libc_init_array+0x40>)
 8004552:	4c0c      	ldr	r4, [pc, #48]	@ (8004584 <__libc_init_array+0x44>)
 8004554:	f000 f818 	bl	8004588 <_init>
 8004558:	1b64      	subs	r4, r4, r5
 800455a:	10a4      	asrs	r4, r4, #2
 800455c:	2600      	movs	r6, #0
 800455e:	42a6      	cmp	r6, r4
 8004560:	d105      	bne.n	800456e <__libc_init_array+0x2e>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	f855 3b04 	ldr.w	r3, [r5], #4
 8004568:	4798      	blx	r3
 800456a:	3601      	adds	r6, #1
 800456c:	e7ee      	b.n	800454c <__libc_init_array+0xc>
 800456e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004572:	4798      	blx	r3
 8004574:	3601      	adds	r6, #1
 8004576:	e7f2      	b.n	800455e <__libc_init_array+0x1e>
 8004578:	080045c0 	.word	0x080045c0
 800457c:	080045c0 	.word	0x080045c0
 8004580:	080045c0 	.word	0x080045c0
 8004584:	080045c4 	.word	0x080045c4

08004588 <_init>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr

08004594 <_fini>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	bf00      	nop
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr
