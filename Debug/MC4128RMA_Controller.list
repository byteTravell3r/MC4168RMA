
MC4128RMA_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004fa0  08004fa0  00005fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005000  08005000  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005000  08005000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005008  08005008  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005008  08005008  00006008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800500c  0800500c  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005010  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00000378  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d8  200003d8  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c803  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023c5  00000000  00000000  00013893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009c8  00000000  00000000  00015c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000760  00000000  00000000  00016620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023aa2  00000000  00000000  00016d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d530  00000000  00000000  0003a822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d36fc  00000000  00000000  00047d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b44e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b70  00000000  00000000  0011b494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0011e004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000060 	.word	0x20000060
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f88 	.word	0x08004f88

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000064 	.word	0x20000064
 80001ec:	08004f88 	.word	0x08004f88

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <CAN1_START_IRQ>:

static uint32_t TxMailbox = CAN_TX_MAILBOX0;
static CAN_TxHeaderTypeDef TxHeader;
static uint8_t TxData[8];

void CAN1_START_IRQ() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000584:	480f      	ldr	r0, [pc, #60]	@ (80005c4 <CAN1_START_IRQ+0x44>)
 8000586:	f001 fb4f 	bl	8001c28 <HAL_CAN_Start>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <CAN1_START_IRQ+0x14>
		Error_Handler();
 8000590:	f000 ff08 	bl	80013a4 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 8000594:	2104      	movs	r1, #4
 8000596:	480b      	ldr	r0, [pc, #44]	@ (80005c4 <CAN1_START_IRQ+0x44>)
 8000598:	f001 fd7c 	bl	8002094 <HAL_CAN_ActivateNotification>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <CAN1_START_IRQ+0x26>
		Error_Handler();
 80005a2:	f000 feff 	bl	80013a4 <Error_Handler>
	}

	TxHeader.StdId = ADDR_3508_SET_ID0;
 80005a6:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <CAN1_START_IRQ+0x48>)
 80005a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005ac:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 80005ae:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <CAN1_START_IRQ+0x48>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <CAN1_START_IRQ+0x48>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 0x08;
 80005ba:	4b03      	ldr	r3, [pc, #12]	@ (80005c8 <CAN1_START_IRQ+0x48>)
 80005bc:	2208      	movs	r2, #8
 80005be:	611a      	str	r2, [r3, #16]
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	200001e8 	.word	0x200001e8
 80005c8:	200000b4 	.word	0x200000b4

080005cc <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005da:	4825      	ldr	r0, [pc, #148]	@ (8000670 <HAL_CAN_RxFifo0FullCallback+0xa4>)
 80005dc:	f002 fb1c 	bl	8002c18 <HAL_GPIO_WritePin>
	static uint8_t RxData[8];
	static CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 80005e2:	4a25      	ldr	r2, [pc, #148]	@ (8000678 <HAL_CAN_RxFifo0FullCallback+0xac>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	f001 fc32 	bl	8001e50 <HAL_CAN_GetRxMessage>
	uint32_t ID_NUM;
	ID_NUM = RxHeader.StdId - ADDR_3508_GET_ID1;
 80005ec:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <HAL_CAN_RxFifo0FullCallback+0xac>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80005f4:	60fb      	str	r3, [r7, #12]
	if (ID_NUM == MotorX || ID_NUM == MotorY) {
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <HAL_CAN_RxFifo0FullCallback+0x36>
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d12b      	bne.n	800065a <HAL_CAN_RxFifo0FullCallback+0x8e>
		if (Motor[ID_NUM].MSG_COUNT++ <= 50) {
 8000602:	491e      	ldr	r1, [pc, #120]	@ (800067c <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	4613      	mov	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	3318      	adds	r3, #24
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	1c50      	adds	r0, r2, #1
 8000616:	4c19      	ldr	r4, [pc, #100]	@ (800067c <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000618:	68f9      	ldr	r1, [r7, #12]
 800061a:	460b      	mov	r3, r1
 800061c:	00db      	lsls	r3, r3, #3
 800061e:	1a5b      	subs	r3, r3, r1
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4423      	add	r3, r4
 8000624:	3318      	adds	r3, #24
 8000626:	6018      	str	r0, [r3, #0]
 8000628:	2a32      	cmp	r2, #50	@ 0x32
 800062a:	d80b      	bhi.n	8000644 <HAL_CAN_RxFifo0FullCallback+0x78>
			Motor_GetInitPosition(&Motor[ID_NUM], RxData);
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	4613      	mov	r3, r2
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	1a9b      	subs	r3, r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4a11      	ldr	r2, [pc, #68]	@ (800067c <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000638:	4413      	add	r3, r2
 800063a:	490e      	ldr	r1, [pc, #56]	@ (8000674 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f88b 	bl	8000758 <Motor_GetInitPosition>
 8000642:	e00a      	b.n	800065a <HAL_CAN_RxFifo0FullCallback+0x8e>
		} else
			Motor_ResolveFeedbackData(&Motor[ID_NUM], RxData);
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	4613      	mov	r3, r2
 8000648:	00db      	lsls	r3, r3, #3
 800064a:	1a9b      	subs	r3, r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4a0b      	ldr	r2, [pc, #44]	@ (800067c <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000650:	4413      	add	r3, r2
 8000652:	4908      	ldr	r1, [pc, #32]	@ (8000674 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f813 	bl	8000680 <Motor_ResolveFeedbackData>
	}
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000660:	4803      	ldr	r0, [pc, #12]	@ (8000670 <HAL_CAN_RxFifo0FullCallback+0xa4>)
 8000662:	f002 fad9 	bl	8002c18 <HAL_GPIO_WritePin>
}
 8000666:	bf00      	nop
 8000668:	3714      	adds	r7, #20
 800066a:	46bd      	mov	sp, r7
 800066c:	bd90      	pop	{r4, r7, pc}
 800066e:	bf00      	nop
 8000670:	40021800 	.word	0x40021800
 8000674:	200000f0 	.word	0x200000f0
 8000678:	200000d4 	.word	0x200000d4
 800067c:	2000007c 	.word	0x2000007c

08000680 <Motor_ResolveFeedbackData>:

void Motor_ResolveFeedbackData(MotorDataTypeDef *MOTOR_STR, uint8_t DATA[]) {
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	MOTOR_STR->LAST_ANGLE = MOTOR_STR->CURR_ANGLE;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	88da      	ldrh	r2, [r3, #6]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	811a      	strh	r2, [r3, #8]
	MOTOR_STR->CURR_ANGLE = (uint16_t) (DATA[0] << 8 | DATA[1]);
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	b21a      	sxth	r2, r3
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	4313      	orrs	r3, r2
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	80da      	strh	r2, [r3, #6]
	MOTOR_STR->RPM = (int16_t) (DATA[2] << 8 | DATA[3]);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	3302      	adds	r3, #2
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	3303      	adds	r3, #3
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b21a      	sxth	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	801a      	strh	r2, [r3, #0]
	MOTOR_STR->I_REAL = (int16_t) (DATA[4] << 8 | DATA[5]) / -5;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	3304      	adds	r3, #4
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	021b      	lsls	r3, r3, #8
 80006ce:	b21a      	sxth	r2, r3
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	3305      	adds	r3, #5
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	4313      	orrs	r3, r2
 80006da:	b21b      	sxth	r3, r3
 80006dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000754 <Motor_ResolveFeedbackData+0xd4>)
 80006de:	fb82 1203 	smull	r1, r2, r2, r3
 80006e2:	1052      	asrs	r2, r2, #1
 80006e4:	17db      	asrs	r3, r3, #31
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	b21a      	sxth	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	805a      	strh	r2, [r3, #2]
	MOTOR_STR->TEMPERATURE = DATA[6];
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	799a      	ldrb	r2, [r3, #6]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	731a      	strb	r2, [r3, #12]

	if (MOTOR_STR->CURR_ANGLE - MOTOR_STR->LAST_ANGLE > 4096)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	88db      	ldrh	r3, [r3, #6]
 80006fa:	461a      	mov	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	891b      	ldrh	r3, [r3, #8]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000706:	dd05      	ble.n	8000714 <Motor_ResolveFeedbackData+0x94>
		MOTOR_STR->ROUNDS--;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	691b      	ldr	r3, [r3, #16]
 800070c:	1e5a      	subs	r2, r3, #1
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	611a      	str	r2, [r3, #16]
 8000712:	e00d      	b.n	8000730 <Motor_ResolveFeedbackData+0xb0>
	else if (MOTOR_STR->CURR_ANGLE - MOTOR_STR->LAST_ANGLE < -4096)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	88db      	ldrh	r3, [r3, #6]
 8000718:	461a      	mov	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	891b      	ldrh	r3, [r3, #8]
 800071e:	1ad3      	subs	r3, r2, r3
 8000720:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 8000724:	da04      	bge.n	8000730 <Motor_ResolveFeedbackData+0xb0>
		MOTOR_STR->ROUNDS++;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	691b      	ldr	r3, [r3, #16]
 800072a:	1c5a      	adds	r2, r3, #1
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	611a      	str	r2, [r3, #16]

	MOTOR_STR->TOTAL_ANGLE = MOTOR_STR->ROUNDS * 8192 + MOTOR_STR->CURR_ANGLE
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	035b      	lsls	r3, r3, #13
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	88d2      	ldrh	r2, [r2, #6]
 800073a:	4413      	add	r3, r2
			- MOTOR_STR->OFFSET_ANGLE;
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	8952      	ldrh	r2, [r2, #10]
 8000740:	1a9a      	subs	r2, r3, r2
	MOTOR_STR->TOTAL_ANGLE = MOTOR_STR->ROUNDS * 8192 + MOTOR_STR->CURR_ANGLE
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	615a      	str	r2, [r3, #20]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	66666667 	.word	0x66666667

08000758 <Motor_GetInitPosition>:

void Motor_GetInitPosition(MotorDataTypeDef *MOTOR_STR, uint8_t DATA[]) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	MOTOR_STR->CURR_ANGLE = (uint16_t) (DATA[0] << 8 | DATA[1]);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	021b      	lsls	r3, r3, #8
 8000768:	b21a      	sxth	r2, r3
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b21b      	sxth	r3, r3
 8000772:	4313      	orrs	r3, r2
 8000774:	b21b      	sxth	r3, r3
 8000776:	b29a      	uxth	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	80da      	strh	r2, [r3, #6]
	MOTOR_STR->OFFSET_ANGLE = MOTOR_STR->CURR_ANGLE;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	88da      	ldrh	r2, [r3, #6]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	815a      	strh	r2, [r3, #10]
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <Motor_SendCmd>:

void Motor_SendCmd(int16_t I1, int16_t I2) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	460a      	mov	r2, r1
 800079a:	80fb      	strh	r3, [r7, #6]
 800079c:	4613      	mov	r3, r2
 800079e:	80bb      	strh	r3, [r7, #4]
	TxData[0] = I1 >> 8;
 80007a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007a4:	121b      	asrs	r3, r3, #8
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <Motor_SendCmd+0x5c>)
 80007ac:	701a      	strb	r2, [r3, #0]
	TxData[1] = I1;
 80007ae:	88fb      	ldrh	r3, [r7, #6]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <Motor_SendCmd+0x5c>)
 80007b4:	705a      	strb	r2, [r3, #1]
	TxData[2] = I2 >> 8;
 80007b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80007ba:	121b      	asrs	r3, r3, #8
 80007bc:	b21b      	sxth	r3, r3
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <Motor_SendCmd+0x5c>)
 80007c2:	709a      	strb	r2, [r3, #2]
	TxData[3] = I2;
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <Motor_SendCmd+0x5c>)
 80007ca:	70da      	strb	r2, [r3, #3]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <Motor_SendCmd+0x60>)
 80007ce:	4a07      	ldr	r2, [pc, #28]	@ (80007ec <Motor_SendCmd+0x5c>)
 80007d0:	4908      	ldr	r1, [pc, #32]	@ (80007f4 <Motor_SendCmd+0x64>)
 80007d2:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <Motor_SendCmd+0x68>)
 80007d4:	f001 fa6c 	bl	8001cb0 <HAL_CAN_AddTxMessage>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <Motor_SendCmd+0x52>
		Error_Handler();
 80007de:	f000 fde1 	bl	80013a4 <Error_Handler>
	}
//	HAL_UART_Receive_IT(IBUS_UART, rx_buffer, 32);
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200000cc 	.word	0x200000cc
 80007f0:	20000000 	.word	0x20000000
 80007f4:	200000b4 	.word	0x200000b4
 80007f8:	200001e8 	.word	0x200001e8

080007fc <abs_limit>:
#include "USR_PID.h"
#include <math.h>

#define ABS(x) ( (x>0) ? (x) : (-x) )

void abs_limit(float *a, float ABS_MAX) {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	ed87 0a00 	vstr	s0, [r7]
	if (*a > ABS_MAX)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	edd3 7a00 	vldr	s15, [r3]
 800080e:	ed97 7a00 	vldr	s14, [r7]
 8000812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081a:	d502      	bpl.n	8000822 <abs_limit+0x26>
		*a = ABS_MAX;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	601a      	str	r2, [r3, #0]
	if (*a < -ABS_MAX)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	ed93 7a00 	vldr	s14, [r3]
 8000828:	edd7 7a00 	vldr	s15, [r7]
 800082c:	eef1 7a67 	vneg.f32	s15, s15
 8000830:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000838:	d400      	bmi.n	800083c <abs_limit+0x40>
		*a = -ABS_MAX;
}
 800083a:	e006      	b.n	800084a <abs_limit+0x4e>
		*a = -ABS_MAX;
 800083c:	edd7 7a00 	vldr	s15, [r7]
 8000840:	eef1 7a67 	vneg.f32	s15, s15
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	edc3 7a00 	vstr	s15, [r3]
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <pid_param_init>:

static void pid_param_init(PID_TypeDef *pid, uint32_t maxout,
		uint32_t intergral_limit, float kp, float ki, float kd) {
 8000856:	b480      	push	{r7}
 8000858:	b087      	sub	sp, #28
 800085a:	af00      	add	r7, sp, #0
 800085c:	6178      	str	r0, [r7, #20]
 800085e:	6139      	str	r1, [r7, #16]
 8000860:	60fa      	str	r2, [r7, #12]
 8000862:	ed87 0a02 	vstr	s0, [r7, #8]
 8000866:	edc7 0a01 	vstr	s1, [r7, #4]
 800086a:	ed87 1a00 	vstr	s2, [r7]

	pid->IntegralLimit = intergral_limit;
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	651a      	str	r2, [r3, #80]	@ 0x50
	pid->MaxOutput = maxout;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	64da      	str	r2, [r3, #76]	@ 0x4c
	pid->p = kp;
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	601a      	str	r2, [r3, #0]
	pid->i = ki;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	605a      	str	r2, [r3, #4]
	pid->d = kd;
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	683a      	ldr	r2, [r7, #0]
 800088a:	609a      	str	r2, [r3, #8]
}
 800088c:	bf00      	nop
 800088e:	371c      	adds	r7, #28
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <pid_reset>:

static void pid_reset(PID_TypeDef *pid, float kp, float ki, float kd) {
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80008a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80008a8:	ed87 1a00 	vstr	s2, [r7]
	pid->p = kp;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	601a      	str	r2, [r3, #0]
	pid->i = ki;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	605a      	str	r2, [r3, #4]
	pid->d = kd;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	609a      	str	r2, [r3, #8]
}
 80008be:	bf00      	nop
 80008c0:	3714      	adds	r7, #20
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <PID_Calculate>:

uint8_t PID_Calculate(PID_TypeDef *pid, float get, float set) {
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b084      	sub	sp, #16
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	ed87 0a02 	vstr	s0, [r7, #8]
 80008d6:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->get[CURR] = get;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->set[CURR] = set;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	621a      	str	r2, [r3, #32]
	pid->err[CURR] = set - get;	//set - measure
 80008e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80008ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80008ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	if (pid->MaxErr != 0 && ABS(pid->err[CURR]) > pid->MaxErr)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80008fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000906:	d01a      	beq.n	800093e <PID_Calculate+0x74>
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800090e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000916:	dd03      	ble.n	8000920 <PID_Calculate+0x56>
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800091e:	e004      	b.n	800092a <PID_Calculate+0x60>
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000926:	eef1 7a67 	vneg.f32	s15, s15
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8000930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000938:	dd01      	ble.n	800093e <PID_Calculate+0x74>
		return 0;
 800093a:	2300      	movs	r3, #0
 800093c:	e096      	b.n	8000a6c <PID_Calculate+0x1a2>
	if (pid->DeadBand != 0 && ABS(pid->err[CURR]) < pid->DeadBand)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8000944:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094c:	d01a      	beq.n	8000984 <PID_Calculate+0xba>
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000954:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800095c:	dd03      	ble.n	8000966 <PID_Calculate+0x9c>
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000964:	e004      	b.n	8000970 <PID_Calculate+0xa6>
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800096c:	eef1 7a67 	vneg.f32	s15, s15
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8000976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800097a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097e:	d501      	bpl.n	8000984 <PID_Calculate+0xba>
		return 0;
 8000980:	2300      	movs	r3, #0
 8000982:	e073      	b.n	8000a6c <PID_Calculate+0x1a2>

	pid->pout = pid->p * pid->err[CURR];
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	ed93 7a00 	vldr	s14, [r3]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->iout += pid->i * pid->err[CURR];
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	ed93 7a04 	vldr	s14, [r3, #16]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80009ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->dout = pid->d * (pid->err[CURR] - pid->err[PREV1]);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80009cc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80009d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	edc3 7a05 	vstr	s15, [r3, #20]
	abs_limit(&(pid->iout), pid->IntegralLimit);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f103 0210 	add.w	r2, r3, #16
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ec:	eeb0 0a67 	vmov.f32	s0, s15
 80009f0:	4610      	mov	r0, r2
 80009f2:	f7ff ff03 	bl	80007fc <abs_limit>
	pid->Output = pid->pout + pid->iout + pid->dout;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	abs_limit(&(pid->Output), pid->MaxOutput);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a20:	ee07 3a90 	vmov	s15, r3
 8000a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a28:	eeb0 0a67 	vmov.f32	s0, s15
 8000a2c:	4610      	mov	r0, r2
 8000a2e:	f7ff fee5 	bl	80007fc <abs_limit>
	pid->last_pos_out = pid->Output;	//update last time
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	641a      	str	r2, [r3, #64]	@ 0x40

	pid->err[PREV2] = pid->err[PREV1];
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->err[PREV1] = pid->err[CURR];
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->get[PREV2] = pid->get[PREV1];
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->get[PREV1] = pid->get[CURR];
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->set[PREV2] = pid->set[PREV1];
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	69da      	ldr	r2, [r3, #28]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	619a      	str	r2, [r3, #24]
	pid->set[PREV1] = pid->set[CURR];
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	6a1a      	ldr	r2, [r3, #32]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	61da      	str	r2, [r3, #28]
	return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <PID_StructInit>:

void PID_StructInit(PID_TypeDef *pid, uint32_t maxout,
		uint32_t I_Limit, float kp, float ki, float kd) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6178      	str	r0, [r7, #20]
 8000a7c:	6139      	str	r1, [r7, #16]
 8000a7e:	60fa      	str	r2, [r7, #12]
 8000a80:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a84:	edc7 0a01 	vstr	s1, [r7, #4]
 8000a88:	ed87 1a00 	vstr	s2, [r7]

	pid->f_param_init = pid_param_init;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <PID_StructInit+0x44>)
 8000a90:	655a      	str	r2, [r3, #84]	@ 0x54
	pid->f_pid_reset = pid_reset;
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	4a09      	ldr	r2, [pc, #36]	@ (8000abc <PID_StructInit+0x48>)
 8000a96:	659a      	str	r2, [r3, #88]	@ 0x58
	pid->f_param_init(pid, maxout, I_Limit, kp, ki, kd);
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a9c:	ed97 1a00 	vldr	s2, [r7]
 8000aa0:	edd7 0a01 	vldr	s1, [r7, #4]
 8000aa4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	6939      	ldr	r1, [r7, #16]
 8000aac:	6978      	ldr	r0, [r7, #20]
 8000aae:	4798      	blx	r3
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	08000857 	.word	0x08000857
 8000abc:	08000899 	.word	0x08000899

08000ac0 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[32] = { 0 };
uint16_t channel[IBUS_USER_CHANNELS] = { 0 };
uint16_t checksum_cal, checksum_ibus;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == IBUS_UART_INSTANCE) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x20>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d102      	bne.n	8000ad8 <HAL_UART_RxCpltCallback+0x18>
		IBUS_READ_CHANNEL(IBUS_USER_CHANNELS);
 8000ad2:	200a      	movs	r0, #10
 8000ad4:	f000 f814 	bl	8000b00 <IBUS_READ_CHANNEL>
	}
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40007800 	.word	0x40007800

08000ae4 <IBUS_INIT>:

void IBUS_INIT() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(IBUS_UART, rx_buffer, 32);
 8000ae8:	2220      	movs	r2, #32
 8000aea:	4903      	ldr	r1, [pc, #12]	@ (8000af8 <IBUS_INIT+0x14>)
 8000aec:	4803      	ldr	r0, [pc, #12]	@ (8000afc <IBUS_INIT+0x18>)
 8000aee:	f002 fe30 	bl	8003752 <HAL_UART_Receive_IT>
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	200001b0 	.word	0x200001b0
 8000afc:	20000218 	.word	0x20000218

08000b00 <IBUS_READ_CHANNEL>:

void IBUS_READ_CHANNEL(uint8_t user_channels) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	@ 0x30
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	uint16_t channel_buffer[IBUS_MAX_CHANNLES] = { 0 };
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
 8000b1a:	615a      	str	r2, [r3, #20]
 8000b1c:	619a      	str	r2, [r3, #24]

	if (rx_buffer[0] == IBUS_LENGTH && rx_buffer[1] == IBUS_COMMAND40) {
 8000b1e:	4b39      	ldr	r3, [pc, #228]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b20      	cmp	r3, #32
 8000b24:	d164      	bne.n	8000bf0 <IBUS_READ_CHANNEL+0xf0>
 8000b26:	4b37      	ldr	r3, [pc, #220]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000b28:	785b      	ldrb	r3, [r3, #1]
 8000b2a:	2b40      	cmp	r3, #64	@ 0x40
 8000b2c:	d160      	bne.n	8000bf0 <IBUS_READ_CHANNEL+0xf0>
		checksum_cal = 0xffff - rx_buffer[0] - rx_buffer[1];
 8000b2e:	4b35      	ldr	r3, [pc, #212]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	4a33      	ldr	r2, [pc, #204]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000b38:	7852      	ldrb	r2, [r2, #1]
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	4b32      	ldr	r3, [pc, #200]	@ (8000c08 <IBUS_READ_CHANNEL+0x108>)
 8000b40:	801a      	strh	r2, [r3, #0]

		for (int i = 0; i < IBUS_MAX_CHANNLES; i++) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b46:	e02a      	b.n	8000b9e <IBUS_READ_CHANNEL+0x9e>
			channel_buffer[i] = (uint16_t) (rx_buffer[i * 2 + 3] << 8
 8000b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	3303      	adds	r3, #3
 8000b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	021b      	lsls	r3, r3, #8
					| rx_buffer[i * 2 + 2]);
 8000b54:	b21a      	sxth	r2, r3
 8000b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b58:	3301      	adds	r3, #1
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4929      	ldr	r1, [pc, #164]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000b5e:	5ccb      	ldrb	r3, [r1, r3]
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	b21b      	sxth	r3, r3
			channel_buffer[i] = (uint16_t) (rx_buffer[i * 2 + 3] << 8
 8000b66:	b29a      	uxth	r2, r3
 8000b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	3330      	adds	r3, #48	@ 0x30
 8000b6e:	443b      	add	r3, r7
 8000b70:	f823 2c24 	strh.w	r2, [r3, #-36]
			checksum_cal = checksum_cal - rx_buffer[i * 2 + 3]
 8000b74:	4b24      	ldr	r3, [pc, #144]	@ (8000c08 <IBUS_READ_CHANNEL+0x108>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b7a:	0052      	lsls	r2, r2, #1
 8000b7c:	3203      	adds	r2, #3
 8000b7e:	4921      	ldr	r1, [pc, #132]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000b80:	5c8a      	ldrb	r2, [r1, r2]
 8000b82:	1a9b      	subs	r3, r3, r2
 8000b84:	b29b      	uxth	r3, r3
					- rx_buffer[i * 2 + 2];
 8000b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b88:	3201      	adds	r2, #1
 8000b8a:	0052      	lsls	r2, r2, #1
 8000b8c:	491d      	ldr	r1, [pc, #116]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000b8e:	5c8a      	ldrb	r2, [r1, r2]
 8000b90:	1a9b      	subs	r3, r3, r2
 8000b92:	b29a      	uxth	r2, r3
			checksum_cal = checksum_cal - rx_buffer[i * 2 + 3]
 8000b94:	4b1c      	ldr	r3, [pc, #112]	@ (8000c08 <IBUS_READ_CHANNEL+0x108>)
 8000b96:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < IBUS_MAX_CHANNLES; i++) {
 8000b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba0:	2b0d      	cmp	r3, #13
 8000ba2:	ddd1      	ble.n	8000b48 <IBUS_READ_CHANNEL+0x48>
		}

		checksum_ibus = rx_buffer[31] << 8 | rx_buffer[30];
 8000ba4:	4b17      	ldr	r3, [pc, #92]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000ba6:	7fdb      	ldrb	r3, [r3, #31]
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000bae:	7f9b      	ldrb	r3, [r3, #30]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <IBUS_READ_CHANNEL+0x10c>)
 8000bba:	801a      	strh	r2, [r3, #0]

		if (checksum_cal == checksum_ibus) {
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <IBUS_READ_CHANNEL+0x108>)
 8000bbe:	881a      	ldrh	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <IBUS_READ_CHANNEL+0x10c>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d113      	bne.n	8000bf0 <IBUS_READ_CHANNEL+0xf0>
			for (int j = 0; j < user_channels; j++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bcc:	e00c      	b.n	8000be8 <IBUS_READ_CHANNEL+0xe8>
			channel[j] = channel_buffer[j];
 8000bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	3330      	adds	r3, #48	@ 0x30
 8000bd4:	443b      	add	r3, r7
 8000bd6:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8000bda:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <IBUS_READ_CHANNEL+0x110>)
 8000bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int j = 0; j < user_channels; j++) {
 8000be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000be4:	3301      	adds	r3, #1
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbee      	blt.n	8000bce <IBUS_READ_CHANNEL+0xce>
			}
		}
	}
	HAL_UART_Receive_IT(IBUS_UART, rx_buffer, 32);
 8000bf0:	2220      	movs	r2, #32
 8000bf2:	4904      	ldr	r1, [pc, #16]	@ (8000c04 <IBUS_READ_CHANNEL+0x104>)
 8000bf4:	4807      	ldr	r0, [pc, #28]	@ (8000c14 <IBUS_READ_CHANNEL+0x114>)
 8000bf6:	f002 fdac 	bl	8003752 <HAL_UART_Receive_IT>
}
 8000bfa:	bf00      	nop
 8000bfc:	3730      	adds	r7, #48	@ 0x30
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200001b0 	.word	0x200001b0
 8000c08:	200001e4 	.word	0x200001e4
 8000c0c:	200001e6 	.word	0x200001e6
 8000c10:	200001d0 	.word	0x200001d0
 8000c14:	20000218 	.word	0x20000218

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f000 fd92 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f8b8 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 f9d8 	bl	8000fd8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000c28:	f000 f942 	bl	8000eb0 <MX_CAN1_Init>
  MX_UART7_Init();
 8000c2c:	f000 f9aa 	bl	8000f84 <MX_UART7_Init>
  MX_CRC_Init();
 8000c30:	f000 f994 	bl	8000f5c <MX_CRC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000c34:	f000 f920 	bl	8000e78 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(POWER1_CTRL_GPIO_Port, POWER1_CTRL_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	4848      	ldr	r0, [pc, #288]	@ (8000d60 <main+0x148>)
 8000c3e:	f001 ffeb 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(POWER3_CTRL_GPIO_Port, POWER3_CTRL_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2110      	movs	r1, #16
 8000c46:	4846      	ldr	r0, [pc, #280]	@ (8000d60 <main+0x148>)
 8000c48:	f001 ffe6 	bl	8002c18 <HAL_GPIO_WritePin>

	PID_StructInit(&PID_MotorSpeed[0], 20000, 20000, 1.5f, 0.1f, 0.0f);
 8000c4c:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 8000d64 <main+0x14c>
 8000c50:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8000d68 <main+0x150>
 8000c54:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000c58:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c5c:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000c60:	4842      	ldr	r0, [pc, #264]	@ (8000d6c <main+0x154>)
 8000c62:	f7ff ff07 	bl	8000a74 <PID_StructInit>
	PID_StructInit(&PID_MotorSpeed[1], 20000, 20000, 1.5f, 0.1f, 0.0f);
 8000c66:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 8000d64 <main+0x14c>
 8000c6a:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8000d68 <main+0x150>
 8000c6e:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 8000c72:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000c76:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000c7a:	483d      	ldr	r0, [pc, #244]	@ (8000d70 <main+0x158>)
 8000c7c:	f7ff fefa 	bl	8000a74 <PID_StructInit>
	CAN1_START_IRQ();
 8000c80:	f7ff fc7e 	bl	8000580 <CAN1_START_IRQ>
	IBUS_INIT();
 8000c84:	f7ff ff2e 	bl	8000ae4 <IBUS_INIT>
	static int TARGET_SPD[2];
	static char report[32];
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c8e:	4839      	ldr	r0, [pc, #228]	@ (8000d74 <main+0x15c>)
 8000c90:	f001 ffc2 	bl	8002c18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GND_OF_5VO_GPIO_Port, GND_OF_5VO_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9a:	4837      	ldr	r0, [pc, #220]	@ (8000d78 <main+0x160>)
 8000c9c:	f001 ffbc 	bl	8002c18 <HAL_GPIO_WritePin>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		PID_Calculate(&PID_MotorSpeed[MotorX], Motor[MotorX].RPM,
 8000ca0:	4b36      	ldr	r3, [pc, #216]	@ (8000d7c <main+0x164>)
 8000ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca6:	ee07 3a90 	vmov	s15, r3
 8000caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				TARGET_SPD[MotorX]);
 8000cae:	4b34      	ldr	r3, [pc, #208]	@ (8000d80 <main+0x168>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
		PID_Calculate(&PID_MotorSpeed[MotorX], Motor[MotorX].RPM,
 8000cb2:	ee07 3a10 	vmov	s14, r3
 8000cb6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000cba:	eef0 0a47 	vmov.f32	s1, s14
 8000cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc2:	482a      	ldr	r0, [pc, #168]	@ (8000d6c <main+0x154>)
 8000cc4:	f7ff fe01 	bl	80008ca <PID_Calculate>
		PID_Calculate(&PID_MotorSpeed[MotorY], Motor[MotorY].RPM,
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d7c <main+0x164>)
 8000cca:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				TARGET_SPD[MotorY]);
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d80 <main+0x168>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
		PID_Calculate(&PID_MotorSpeed[MotorY], Motor[MotorY].RPM,
 8000cda:	ee07 3a10 	vmov	s14, r3
 8000cde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000ce2:	eef0 0a47 	vmov.f32	s1, s14
 8000ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cea:	4821      	ldr	r0, [pc, #132]	@ (8000d70 <main+0x158>)
 8000cec:	f7ff fded 	bl	80008ca <PID_Calculate>

		Motor_SendCmd(PID_MotorSpeed[MotorX].Output,
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <main+0x154>)
 8000cf2:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cfa:	ee17 3a90 	vmov	r3, s15
 8000cfe:	b21b      	sxth	r3, r3
				PID_MotorSpeed[MotorY].Output);
 8000d00:	4a1a      	ldr	r2, [pc, #104]	@ (8000d6c <main+0x154>)
 8000d02:	edd2 7a26 	vldr	s15, [r2, #152]	@ 0x98
		Motor_SendCmd(PID_MotorSpeed[MotorX].Output,
 8000d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d0a:	ee17 2a90 	vmov	r2, s15
 8000d0e:	b212      	sxth	r2, r2
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fd3c 	bl	8000790 <Motor_SendCmd>
		extern uint16_t channel[];
		if (channel[1] == 0) {
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <main+0x16c>)
 8000d1a:	885b      	ldrh	r3, [r3, #2]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d103      	bne.n	8000d28 <main+0x110>
			TARGET_SPD[MotorX] = 0;
 8000d20:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <main+0x168>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e008      	b.n	8000d3a <main+0x122>
		} else {
			TARGET_SPD[MotorX] = (channel[1] - 1500) * 5;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <main+0x16c>)
 8000d2a:	885b      	ldrh	r3, [r3, #2]
 8000d2c:	f2a3 52dc 	subw	r2, r3, #1500	@ 0x5dc
 8000d30:	4613      	mov	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	4413      	add	r3, r2
 8000d36:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <main+0x168>)
 8000d38:	6013      	str	r3, [r2, #0]
		}
//		TARGET_SPD[MotorY] = (channel[2] - 1500) * 3;
//		TARGET_SPD[MotorX] = 10;
		sprintf(report, "TAR_SPD=%d, RPM=%d\n", TARGET_SPD[MotorX], Motor[MotorX].RPM);
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <main+0x168>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <main+0x164>)
 8000d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d44:	4910      	ldr	r1, [pc, #64]	@ (8000d88 <main+0x170>)
 8000d46:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <main+0x174>)
 8000d48:	f003 fc7e 	bl	8004648 <siprintf>
		HAL_UART_Transmit(&huart7, report, sizeof(report), 100);
 8000d4c:	2364      	movs	r3, #100	@ 0x64
 8000d4e:	2220      	movs	r2, #32
 8000d50:	490e      	ldr	r1, [pc, #56]	@ (8000d8c <main+0x174>)
 8000d52:	480f      	ldr	r0, [pc, #60]	@ (8000d90 <main+0x178>)
 8000d54:	f002 fc72 	bl	800363c <HAL_UART_Transmit>
		HAL_Delay(1);
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f000 fd65 	bl	8001828 <HAL_Delay>
	while (1) {
 8000d5e:	e79f      	b.n	8000ca0 <main+0x88>
 8000d60:	40021c00 	.word	0x40021c00
 8000d64:	00000000 	.word	0x00000000
 8000d68:	3dcccccd 	.word	0x3dcccccd
 8000d6c:	200000f8 	.word	0x200000f8
 8000d70:	20000154 	.word	0x20000154
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40021800 	.word	0x40021800
 8000d7c:	2000007c 	.word	0x2000007c
 8000d80:	20000260 	.word	0x20000260
 8000d84:	200001d0 	.word	0x200001d0
 8000d88:	08004fa0 	.word	0x08004fa0
 8000d8c:	20000268 	.word	0x20000268
 8000d90:	20000218 	.word	0x20000218

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	@ 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	@ 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f003 fc70 	bl	8004688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <SystemClock_Config+0xdc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	4a2b      	ldr	r2, [pc, #172]	@ (8000e70 <SystemClock_Config+0xdc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc8:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <SystemClock_Config+0xdc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b26      	ldr	r3, [pc, #152]	@ (8000e74 <SystemClock_Config+0xe0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000de0:	4a24      	ldr	r2, [pc, #144]	@ (8000e74 <SystemClock_Config+0xe0>)
 8000de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	4b22      	ldr	r3, [pc, #136]	@ (8000e74 <SystemClock_Config+0xe0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000df4:	2302      	movs	r3, #2
 8000df6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000e0c:	235a      	movs	r3, #90	@ 0x5a
 8000e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e14:	2303      	movs	r3, #3
 8000e16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 ff65 	bl	8002cec <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e28:	f000 fabc 	bl	80013a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e2c:	f001 ff0e 	bl	8002c4c <HAL_PWREx_EnableOverDrive>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e36:	f000 fab5 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3a:	230f      	movs	r3, #15
 8000e3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2102      	movs	r1, #2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 f9bf 	bl	80031dc <HAL_RCC_ClockConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000e64:	f000 fa9e 	bl	80013a4 <Error_Handler>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3750      	adds	r7, #80	@ 0x50
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40007000 	.word	0x40007000

08000e78 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2014      	movs	r0, #20
 8000e82:	f001 fc38 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e86:	2014      	movs	r0, #20
 8000e88:	f001 fc51 	bl	800272e <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2015      	movs	r0, #21
 8000e92:	f001 fc30 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000e96:	2015      	movs	r0, #21
 8000e98:	f001 fc49 	bl	800272e <HAL_NVIC_EnableIRQ>
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2013      	movs	r0, #19
 8000ea2:	f001 fc28 	bl	80026f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ea6:	2013      	movs	r0, #19
 8000ea8:	f001 fc41 	bl	800272e <HAL_NVIC_EnableIRQ>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000eb6:	4b27      	ldr	r3, [pc, #156]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000eb8:	4a27      	ldr	r2, [pc, #156]	@ (8000f58 <MX_CAN1_Init+0xa8>)
 8000eba:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000ebc:	4b25      	ldr	r3, [pc, #148]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ec2:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ec8:	4b22      	ldr	r3, [pc, #136]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000ece:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000ed0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ed4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000ed8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000edc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000efc:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f02:	4814      	ldr	r0, [pc, #80]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000f04:	f000 fcb4 	bl	8001870 <HAL_CAN_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000f0e:	f000 fa49 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef CAN_FilterConfigStructure;
	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FilterFIFO0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterBank = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
	CAN_FilterConfigStructure.FilterActivation = CAN_FILTER_ENABLE;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &CAN_FilterConfigStructure) != HAL_OK) {
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	@ (8000f54 <MX_CAN1_Init+0xa4>)
 8000f3c:	f000 fd94 	bl	8001a68 <HAL_CAN_ConfigFilter>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_CAN1_Init+0x9a>
		Error_Handler();
 8000f46:	f000 fa2d 	bl	80013a4 <Error_Handler>
	}
  /* USER CODE END CAN1_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3728      	adds	r7, #40	@ 0x28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001e8 	.word	0x200001e8
 8000f58:	40006400 	.word	0x40006400

08000f5c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f60:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_CRC_Init+0x20>)
 8000f62:	4a07      	ldr	r2, [pc, #28]	@ (8000f80 <MX_CRC_Init+0x24>)
 8000f64:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f66:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_CRC_Init+0x20>)
 8000f68:	f001 fbfb 	bl	8002762 <HAL_CRC_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f72:	f000 fa17 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000210 	.word	0x20000210
 8000f80:	40023000 	.word	0x40023000

08000f84 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_UART7_Init+0x4c>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <MX_UART7_Init+0x50>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <MX_UART7_Init+0x4c>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MX_UART7_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <MX_UART7_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <MX_UART7_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <MX_UART7_Init+0x4c>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <MX_UART7_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <MX_UART7_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_UART7_Init+0x4c>)
 8000fbc:	f002 faee 	bl	800359c <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8000fc6:	f000 f9ed 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000218 	.word	0x20000218
 8000fd4:	40007800 	.word	0x40007800

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08e      	sub	sp, #56	@ 0x38
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
 8000ff2:	4bb2      	ldr	r3, [pc, #712]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4ab1      	ldr	r2, [pc, #708]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8000ff8:	f043 0302 	orr.w	r3, r3, #2
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4baf      	ldr	r3, [pc, #700]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	623b      	str	r3, [r7, #32]
 8001008:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	4bab      	ldr	r3, [pc, #684]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4aaa      	ldr	r2, [pc, #680]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4ba8      	ldr	r3, [pc, #672]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	4ba4      	ldr	r3, [pc, #656]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4aa3      	ldr	r2, [pc, #652]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4ba1      	ldr	r3, [pc, #644]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	4b9d      	ldr	r3, [pc, #628]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a9c      	ldr	r2, [pc, #624]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b9a      	ldr	r3, [pc, #616]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b96      	ldr	r3, [pc, #600]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a95      	ldr	r2, [pc, #596]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b93      	ldr	r3, [pc, #588]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b8f      	ldr	r3, [pc, #572]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a8e      	ldr	r2, [pc, #568]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 8001084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b8c      	ldr	r3, [pc, #560]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b88      	ldr	r3, [pc, #544]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a87      	ldr	r2, [pc, #540]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b85      	ldr	r3, [pc, #532]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0310 	and.w	r3, r3, #16
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b81      	ldr	r3, [pc, #516]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a80      	ldr	r2, [pc, #512]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 80010bc:	f043 0320 	orr.w	r3, r3, #32
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b7e      	ldr	r3, [pc, #504]	@ (80012bc <MX_GPIO_Init+0x2e4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0320 	and.w	r3, r3, #32
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GND_OF_5VO_GPIO_Port, GND_OF_5VO_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d4:	487a      	ldr	r0, [pc, #488]	@ (80012c0 <MX_GPIO_Init+0x2e8>)
 80010d6:	f001 fd9f 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_B9__Pin|OLED_B0__Pin|SYNC_IN_Pin, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f248 2101 	movw	r1, #33281	@ 0x8201
 80010e0:	4878      	ldr	r0, [pc, #480]	@ (80012c4 <MX_GPIO_Init+0x2ec>)
 80010e2:	f001 fd99 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	213c      	movs	r1, #60	@ 0x3c
 80010ea:	4877      	ldr	r0, [pc, #476]	@ (80012c8 <MX_GPIO_Init+0x2f0>)
 80010ec:	f001 fd94 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_A_Pin|LED_B_Pin|LED_C_Pin|LED_D_Pin
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 80010f6:	4872      	ldr	r0, [pc, #456]	@ (80012c0 <MX_GPIO_Init+0x2e8>)
 80010f8:	f001 fd8e 	bl	8002c18 <HAL_GPIO_WritePin>
                          |LED_E_Pin|LED_F_Pin|LED_G_Pin|LED_H_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001102:	4872      	ldr	r0, [pc, #456]	@ (80012cc <MX_GPIO_Init+0x2f4>)
 8001104:	f001 fd88 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800110e:	4870      	ldr	r0, [pc, #448]	@ (80012d0 <MX_GPIO_Init+0x2f8>)
 8001110:	f001 fd82 	bl	8002c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HEAT_IMU_Pin */
  GPIO_InitStruct.Pin = HEAT_IMU_Pin;
 8001114:	2320      	movs	r3, #32
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001124:	2302      	movs	r3, #2
 8001126:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(HEAT_IMU_GPIO_Port, &GPIO_InitStruct);
 8001128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112c:	4619      	mov	r1, r3
 800112e:	4865      	ldr	r0, [pc, #404]	@ (80012c4 <MX_GPIO_Init+0x2ec>)
 8001130:	f001 fbc6 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GND_OF_5VO_Pin LED_A_Pin LED_B_Pin LED_C_Pin
                           LED_D_Pin LED_E_Pin LED_F_Pin LED_G_Pin
                           LED_H_Pin */
  GPIO_InitStruct.Pin = GND_OF_5VO_Pin|LED_A_Pin|LED_B_Pin|LED_C_Pin
 8001134:	f242 13fe 	movw	r3, #8702	@ 0x21fe
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LED_D_Pin|LED_E_Pin|LED_F_Pin|LED_G_Pin
                          |LED_H_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113a:	2301      	movs	r3, #1
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001142:	2300      	movs	r3, #0
 8001144:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001146:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114a:	4619      	mov	r1, r3
 800114c:	485c      	ldr	r0, [pc, #368]	@ (80012c0 <MX_GPIO_Init+0x2e8>)
 800114e:	f001 fbb7 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_B9__Pin OLED_B0__Pin SYNC_IN_Pin */
  GPIO_InitStruct.Pin = OLED_B9__Pin|OLED_B0__Pin|SYNC_IN_Pin;
 8001152:	f248 2301 	movw	r3, #33281	@ 0x8201
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001164:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001168:	4619      	mov	r1, r3
 800116a:	4856      	ldr	r0, [pc, #344]	@ (80012c4 <MX_GPIO_Init+0x2ec>)
 800116c:	f001 fba8 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DBUS_RX_Pin */
  GPIO_InitStruct.Pin = DBUS_RX_Pin;
 8001170:	2380      	movs	r3, #128	@ 0x80
 8001172:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001180:	2307      	movs	r3, #7
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DBUS_RX_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	484e      	ldr	r0, [pc, #312]	@ (80012c4 <MX_GPIO_Init+0x2ec>)
 800118c:	f001 fb98 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO_PWM_Y_Pin SERVO_PWM_X_Pin SERVO_PWM_W_Pin SERVO_PWM_Z_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_Y_Pin|SERVO_PWM_X_Pin|SERVO_PWM_W_Pin|SERVO_PWM_Z_Pin;
 8001190:	23e4      	movs	r3, #228	@ 0xe4
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80011a0:	2303      	movs	r3, #3
 80011a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	484a      	ldr	r0, [pc, #296]	@ (80012d4 <MX_GPIO_Init+0x2fc>)
 80011ac:	f001 fb88 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_PWM_A_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_A_Pin;
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011c0:	2302      	movs	r3, #2
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SERVO_PWM_A_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4842      	ldr	r0, [pc, #264]	@ (80012d4 <MX_GPIO_Init+0x2fc>)
 80011cc:	f001 fb78 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_PWM_A9_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_A9_Pin;
 80011d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011e2:	2301      	movs	r3, #1
 80011e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SERVO_PWM_A9_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ea:	4619      	mov	r1, r3
 80011ec:	483a      	ldr	r0, [pc, #232]	@ (80012d8 <MX_GPIO_Init+0x300>)
 80011ee:	f001 fb67 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : POWER1_CTRL_Pin POWER2_CTRL_Pin POWER3_CTRL_Pin POWER4_CTRL_Pin */
  GPIO_InitStruct.Pin = POWER1_CTRL_Pin|POWER2_CTRL_Pin|POWER3_CTRL_Pin|POWER4_CTRL_Pin;
 80011f2:	233c      	movs	r3, #60	@ 0x3c
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	482f      	ldr	r0, [pc, #188]	@ (80012c8 <MX_GPIO_Init+0x2f0>)
 800120a:	f001 fb59 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO_PWM_B_Pin SERVO_PWM_C_Pin SERVO_PWM_D_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_B_Pin|SERVO_PWM_C_Pin|SERVO_PWM_D_Pin;
 800120e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001220:	2302      	movs	r3, #2
 8001222:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001228:	4619      	mov	r1, r3
 800122a:	4827      	ldr	r0, [pc, #156]	@ (80012c8 <MX_GPIO_Init+0x2f0>)
 800122c:	f001 fb48 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO_PWM_E_Pin SERVO_PWM_F_Pin SERVO_PWM_G_Pin SERVO_PWM_H_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_E_Pin|SERVO_PWM_F_Pin|SERVO_PWM_G_Pin|SERVO_PWM_H_Pin;
 8001230:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001242:	2302      	movs	r3, #2
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800124a:	4619      	mov	r1, r3
 800124c:	4823      	ldr	r0, [pc, #140]	@ (80012dc <MX_GPIO_Init+0x304>)
 800124e:	f001 fb37 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001252:	2304      	movs	r3, #4
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001262:	4619      	mov	r1, r3
 8001264:	4817      	ldr	r0, [pc, #92]	@ (80012c4 <MX_GPIO_Init+0x2ec>)
 8001266:	f001 fb2b 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SERVO_PWM_T_Pin SERVO_PWM_S_Pin SERVO_PWM_U_Pin SERVO_PWM_V_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_T_Pin|SERVO_PWM_S_Pin|SERVO_PWM_U_Pin|SERVO_PWM_V_Pin;
 800126a:	230f      	movs	r3, #15
 800126c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800127a:	2301      	movs	r3, #1
 800127c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4814      	ldr	r0, [pc, #80]	@ (80012d8 <MX_GPIO_Init+0x300>)
 8001286:	f001 fb1b 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SERVO_PWM_E13_Pin */
  GPIO_InitStruct.Pin = SERVO_PWM_E13_Pin;
 800128a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800129c:	2301      	movs	r3, #1
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SERVO_PWM_E13_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4809      	ldr	r0, [pc, #36]	@ (80012cc <MX_GPIO_Init+0x2f4>)
 80012a8:	f001 fb0a 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_MI_Pin */
  GPIO_InitStruct.Pin = OLED_MI_Pin;
 80012ac:	2340      	movs	r3, #64	@ 0x40
 80012ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012b8:	e012      	b.n	80012e0 <MX_GPIO_Init+0x308>
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40021c00 	.word	0x40021c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40021400 	.word	0x40021400
 80012d4:	40022000 	.word	0x40022000
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020c00 	.word	0x40020c00
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012e4:	2305      	movs	r3, #5
 80012e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OLED_MI_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	4829      	ldr	r0, [pc, #164]	@ (8001394 <MX_GPIO_Init+0x3bc>)
 80012f0:	f001 fae6 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80012f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80012f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4822      	ldr	r0, [pc, #136]	@ (8001398 <MX_GPIO_Init+0x3c0>)
 800130e:	f001 fad7 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001312:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001324:	2309      	movs	r3, #9
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	481b      	ldr	r0, [pc, #108]	@ (800139c <MX_GPIO_Init+0x3c4>)
 8001330:	f001 fac6 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001334:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133a:	2301      	movs	r3, #1
 800133c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	2300      	movs	r3, #0
 8001344:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_GPIO_Init+0x3c8>)
 800134e:	f001 fab7 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_EXTI__Pin */
  GPIO_InitStruct.Pin = SD_EXTI__Pin;
 8001352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001358:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800135c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SD_EXTI__GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	480b      	ldr	r0, [pc, #44]	@ (8001398 <MX_GPIO_Init+0x3c0>)
 800136a:	f001 faa9 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SYNC_OUT_Pin */
  GPIO_InitStruct.Pin = SYNC_OUT_Pin;
 800136e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001374:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SYNC_OUT_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_GPIO_Init+0x3c4>)
 8001386:	f001 fa9b 	bl	80028c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138a:	bf00      	nop
 800138c:	3738      	adds	r7, #56	@ 0x38
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40020000 	.word	0x40020000
 8001398:	40021000 	.word	0x40021000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40021400 	.word	0x40021400

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013b2:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <Error_Handler+0x40>)
 80013b4:	f001 fc30 	bl	8002c18 <HAL_GPIO_WritePin>
	while (1) {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013be:	480a      	ldr	r0, [pc, #40]	@ (80013e8 <Error_Handler+0x44>)
 80013c0:	f001 fc2a 	bl	8002c18 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80013c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c8:	f000 fa2e 	bl	8001828 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <Error_Handler+0x44>)
 80013d4:	f001 fc20 	bl	8002c18 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80013d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013dc:	f000 fa24 	bl	8001828 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80013e0:	bf00      	nop
 80013e2:	e7e9      	b.n	80013b8 <Error_Handler+0x14>
 80013e4:	40021400 	.word	0x40021400
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	@ 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a19      	ldr	r2, [pc, #100]	@ (80014c0 <HAL_CAN_MspInit+0x84>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d12b      	bne.n	80014b6 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
 8001462:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_CAN_MspInit+0x88>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <HAL_CAN_MspInit+0x88>)
 8001468:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800146c:	6413      	str	r3, [r2, #64]	@ 0x40
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_CAN_MspInit+0x88>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_CAN_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a10      	ldr	r2, [pc, #64]	@ (80014c4 <HAL_CAN_MspInit+0x88>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_CAN_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001496:	2303      	movs	r3, #3
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014a6:	2309      	movs	r3, #9
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <HAL_CAN_MspInit+0x8c>)
 80014b2:	f001 fa05 	bl	80028c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	@ 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40006400 	.word	0x40006400
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020c00 	.word	0x40020c00

080014cc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <HAL_CRC_MspInit+0x3c>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10d      	bne.n	80014fa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b0a      	ldr	r3, [pc, #40]	@ (800150c <HAL_CRC_MspInit+0x40>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <HAL_CRC_MspInit+0x40>)
 80014e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <HAL_CRC_MspInit+0x40>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80014fa:	bf00      	nop
 80014fc:	3714      	adds	r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023000 	.word	0x40023000
 800150c:	40023800 	.word	0x40023800

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	@ 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a1d      	ldr	r2, [pc, #116]	@ (80015a4 <HAL_UART_MspInit+0x94>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d134      	bne.n	800159c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <HAL_UART_MspInit+0x98>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	4a1b      	ldr	r2, [pc, #108]	@ (80015a8 <HAL_UART_MspInit+0x98>)
 800153c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001540:	6413      	str	r3, [r2, #64]	@ 0x40
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <HAL_UART_MspInit+0x98>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <HAL_UART_MspInit+0x98>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a14      	ldr	r2, [pc, #80]	@ (80015a8 <HAL_UART_MspInit+0x98>)
 8001558:	f043 0310 	orr.w	r3, r3, #16
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b12      	ldr	r3, [pc, #72]	@ (80015a8 <HAL_UART_MspInit+0x98>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800156a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800156e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800157c:	2308      	movs	r3, #8
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4809      	ldr	r0, [pc, #36]	@ (80015ac <HAL_UART_MspInit+0x9c>)
 8001588:	f001 f99a 	bl	80028c0 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 1, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2101      	movs	r1, #1
 8001590:	2052      	movs	r0, #82	@ 0x52
 8001592:	f001 f8b0 	bl	80026f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001596:	2052      	movs	r0, #82	@ 0x52
 8001598:	f001 f8c9 	bl	800272e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	@ 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40007800 	.word	0x40007800
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40021000 	.word	0x40021000

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <NMI_Handler+0x4>

080015b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <MemManage_Handler+0x4>

080015c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001606:	f000 f8ef 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001614:	4802      	ldr	r0, [pc, #8]	@ (8001620 <CAN1_TX_IRQHandler+0x10>)
 8001616:	f000 fd63 	bl	80020e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200001e8 	.word	0x200001e8

08001624 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001628:	4802      	ldr	r0, [pc, #8]	@ (8001634 <CAN1_RX0_IRQHandler+0x10>)
 800162a:	f000 fd59 	bl	80020e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200001e8 	.word	0x200001e8

08001638 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <CAN1_RX1_IRQHandler+0x10>)
 800163e:	f000 fd4f 	bl	80020e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200001e8 	.word	0x200001e8

0800164c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001650:	4802      	ldr	r0, [pc, #8]	@ (800165c <UART7_IRQHandler+0x10>)
 8001652:	f002 f8a3 	bl	800379c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000218 	.word	0x20000218

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	@ (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f003 f802 	bl	8004698 <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20030000 	.word	0x20030000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	20000288 	.word	0x20000288
 80016c8:	200003d8 	.word	0x200003d8

080016cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001728 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f4:	f7ff ffea 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	@ (8001730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	@ (800173c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800171e:	f002 ffc1 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7ff fa79 	bl	8000c18 <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001728:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001734:	08005010 	.word	0x08005010
  ldr r2, =_sbss
 8001738:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800173c:	200003d8 	.word	0x200003d8

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001748:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <HAL_Init+0x40>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <HAL_Init+0x40>)
 800174e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001754:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_Init+0x40>)
 800175a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800175e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a07      	ldr	r2, [pc, #28]	@ (8001784 <HAL_Init+0x40>)
 8001766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176c:	2003      	movs	r0, #3
 800176e:	f000 ffb7 	bl	80026e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001772:	200f      	movs	r0, #15
 8001774:	f000 f808 	bl	8001788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001778:	f7ff fe38 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023c00 	.word	0x40023c00

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <HAL_InitTick+0x54>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <HAL_InitTick+0x58>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 ffcf 	bl	800274a <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00e      	b.n	80017d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80a      	bhi.n	80017d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f000 ff97 	bl	80026f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c8:	4a06      	ldr	r2, [pc, #24]	@ (80017e4 <HAL_InitTick+0x5c>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000004 	.word	0x20000004
 80017e0:	2000000c 	.word	0x2000000c
 80017e4:	20000008 	.word	0x20000008

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2000000c 	.word	0x2000000c
 800180c:	2000028c 	.word	0x2000028c

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	@ (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	2000028c 	.word	0x2000028c

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <HAL_Delay+0x44>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	2000000c 	.word	0x2000000c

08001870 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0ed      	b.n	8001a5e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d102      	bne.n	8001894 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fdd4 	bl	800143c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 0201 	orr.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a4:	f7ff ffb4 	bl	8001810 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018aa:	e012      	b.n	80018d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018ac:	f7ff ffb0 	bl	8001810 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b0a      	cmp	r3, #10
 80018b8:	d90b      	bls.n	80018d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2205      	movs	r2, #5
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e0c5      	b.n	8001a5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0e5      	beq.n	80018ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0202 	bic.w	r2, r2, #2
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018f0:	f7ff ff8e 	bl	8001810 <HAL_GetTick>
 80018f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018f6:	e012      	b.n	800191e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f8:	f7ff ff8a 	bl	8001810 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b0a      	cmp	r3, #10
 8001904:	d90b      	bls.n	800191e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2205      	movs	r2, #5
 8001916:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e09f      	b.n	8001a5e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1e5      	bne.n	80018f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7e1b      	ldrb	r3, [r3, #24]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d108      	bne.n	8001946 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e007      	b.n	8001956 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	7e5b      	ldrb	r3, [r3, #25]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d108      	bne.n	8001970 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e007      	b.n	8001980 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800197e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7e9b      	ldrb	r3, [r3, #26]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d108      	bne.n	800199a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0220 	orr.w	r2, r2, #32
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e007      	b.n	80019aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0220 	bic.w	r2, r2, #32
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7edb      	ldrb	r3, [r3, #27]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d108      	bne.n	80019c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0210 	bic.w	r2, r2, #16
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	e007      	b.n	80019d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0210 	orr.w	r2, r2, #16
 80019d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7f1b      	ldrb	r3, [r3, #28]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d108      	bne.n	80019ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0208 	orr.w	r2, r2, #8
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e007      	b.n	80019fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0208 	bic.w	r2, r2, #8
 80019fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7f5b      	ldrb	r3, [r3, #29]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d108      	bne.n	8001a18 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0204 	orr.w	r2, r2, #4
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e007      	b.n	8001a28 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0204 	bic.w	r2, r2, #4
 8001a26:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689a      	ldr	r2, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	ea42 0103 	orr.w	r1, r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a80:	7cfb      	ldrb	r3, [r7, #19]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d003      	beq.n	8001a8e <HAL_CAN_ConfigFilter+0x26>
 8001a86:	7cfb      	ldrb	r3, [r7, #19]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	f040 80be 	bne.w	8001c0a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a8e:	4b65      	ldr	r3, [pc, #404]	@ (8001c24 <HAL_CAN_ConfigFilter+0x1bc>)
 8001a90:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001aa8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	2201      	movs	r2, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d123      	bne.n	8001b38 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3248      	adds	r2, #72	@ 0x48
 8001b18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b2e:	6979      	ldr	r1, [r7, #20]
 8001b30:	3348      	adds	r3, #72	@ 0x48
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d122      	bne.n	8001b86 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b60:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3248      	adds	r2, #72	@ 0x48
 8001b66:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b7a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b7c:	6979      	ldr	r1, [r7, #20]
 8001b7e:	3348      	adds	r3, #72	@ 0x48
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	401a      	ands	r2, r3
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001ba0:	e007      	b.n	8001bb2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001bcc:	e007      	b.n	8001bde <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	431a      	orrs	r2, r3
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d107      	bne.n	8001bf6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bfc:	f023 0201 	bic.w	r2, r3, #1
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e006      	b.n	8001c18 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
  }
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40006400 	.word	0x40006400

08001c28 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d12e      	bne.n	8001c9a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c54:	f7ff fddc 	bl	8001810 <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c5a:	e012      	b.n	8001c82 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c5c:	f7ff fdd8 	bl	8001810 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b0a      	cmp	r3, #10
 8001c68:	d90b      	bls.n	8001c82 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2205      	movs	r2, #5
 8001c7a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e012      	b.n	8001ca8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d1e5      	bne.n	8001c5c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e006      	b.n	8001ca8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
  }
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cce:	7ffb      	ldrb	r3, [r7, #31]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d003      	beq.n	8001cdc <HAL_CAN_AddTxMessage+0x2c>
 8001cd4:	7ffb      	ldrb	r3, [r7, #31]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	f040 80ad 	bne.w	8001e36 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10a      	bne.n	8001cfc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8095 	beq.w	8001e26 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	0e1b      	lsrs	r3, r3, #24
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d06:	2201      	movs	r2, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	409a      	lsls	r2, r3
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d22:	68f9      	ldr	r1, [r7, #12]
 8001d24:	6809      	ldr	r1, [r1, #0]
 8001d26:	431a      	orrs	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3318      	adds	r3, #24
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	440b      	add	r3, r1
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e00f      	b.n	8001d54 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d3e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d48:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	3318      	adds	r3, #24
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	440b      	add	r3, r1
 8001d52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6819      	ldr	r1, [r3, #0]
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3318      	adds	r3, #24
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	440b      	add	r3, r1
 8001d64:	3304      	adds	r3, #4
 8001d66:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	7d1b      	ldrb	r3, [r3, #20]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d111      	bne.n	8001d94 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3318      	adds	r3, #24
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	6811      	ldr	r1, [r2, #0]
 8001d84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	440b      	add	r3, r1
 8001d90:	3304      	adds	r3, #4
 8001d92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3307      	adds	r3, #7
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	061a      	lsls	r2, r3, #24
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3306      	adds	r3, #6
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	041b      	lsls	r3, r3, #16
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3305      	adds	r3, #5
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	4313      	orrs	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	3204      	adds	r2, #4
 8001db4:	7812      	ldrb	r2, [r2, #0]
 8001db6:	4610      	mov	r0, r2
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	6811      	ldr	r1, [r2, #0]
 8001dbc:	ea43 0200 	orr.w	r2, r3, r0
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001dca:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3303      	adds	r3, #3
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	061a      	lsls	r2, r3, #24
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	041b      	lsls	r3, r3, #16
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3301      	adds	r3, #1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	021b      	lsls	r3, r3, #8
 8001de6:	4313      	orrs	r3, r2
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	4610      	mov	r0, r2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	6811      	ldr	r1, [r2, #0]
 8001df2:	ea43 0200 	orr.w	r2, r3, r0
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001e00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3318      	adds	r3, #24
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	4413      	add	r3, r2
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	6811      	ldr	r1, [r2, #0]
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3318      	adds	r3, #24
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	440b      	add	r3, r1
 8001e20:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e00e      	b.n	8001e44 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e006      	b.n	8001e44 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
  }
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3724      	adds	r7, #36	@ 0x24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e50:	b480      	push	{r7}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e64:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e66:	7dfb      	ldrb	r3, [r7, #23]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d003      	beq.n	8001e74 <HAL_CAN_GetRxMessage+0x24>
 8001e6c:	7dfb      	ldrb	r3, [r7, #23]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	f040 8103 	bne.w	800207a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10e      	bne.n	8001e98 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d116      	bne.n	8001eb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0f7      	b.n	8002088 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d107      	bne.n	8001eb6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e0e8      	b.n	8002088 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	331b      	adds	r3, #27
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	4413      	add	r3, r2
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0204 	and.w	r2, r3, #4
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10c      	bne.n	8001eee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	331b      	adds	r3, #27
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4413      	add	r3, r2
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	0d5b      	lsrs	r3, r3, #21
 8001ee4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e00b      	b.n	8001f06 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	331b      	adds	r3, #27
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	4413      	add	r3, r2
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	08db      	lsrs	r3, r3, #3
 8001efe:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	331b      	adds	r3, #27
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	4413      	add	r3, r2
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0202 	and.w	r2, r3, #2
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	331b      	adds	r3, #27
 8001f24:	011b      	lsls	r3, r3, #4
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2208      	movs	r2, #8
 8001f38:	611a      	str	r2, [r3, #16]
 8001f3a:	e00b      	b.n	8001f54 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	331b      	adds	r3, #27
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 020f 	and.w	r2, r3, #15
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	331b      	adds	r3, #27
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4413      	add	r3, r2
 8001f60:	3304      	adds	r3, #4
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	331b      	adds	r3, #27
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4413      	add	r3, r2
 8001f78:	3304      	adds	r3, #4
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	0a1a      	lsrs	r2, r3, #8
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b2d2      	uxtb	r2, r2
 8001fb2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	4413      	add	r3, r2
 8001fbe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	0c1a      	lsrs	r2, r3, #16
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	0e1a      	lsrs	r2, r3, #24
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	3303      	adds	r3, #3
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	4413      	add	r3, r2
 800200a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0a1a      	lsrs	r2, r3, #8
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	3305      	adds	r3, #5
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	4413      	add	r3, r2
 8002024:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	0c1a      	lsrs	r2, r3, #16
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	3306      	adds	r3, #6
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	011b      	lsls	r3, r3, #4
 800203c:	4413      	add	r3, r2
 800203e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	0e1a      	lsrs	r2, r3, #24
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	3307      	adds	r3, #7
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d108      	bne.n	8002066 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0220 	orr.w	r2, r2, #32
 8002062:	60da      	str	r2, [r3, #12]
 8002064:	e007      	b.n	8002076 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002076:	2300      	movs	r3, #0
 8002078:	e006      	b.n	8002088 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d002      	beq.n	80020b2 <HAL_CAN_ActivateNotification+0x1e>
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d109      	bne.n	80020c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6959      	ldr	r1, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e006      	b.n	80020d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
  }
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d07c      	beq.n	8002220 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2201      	movs	r2, #1
 8002136:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f983 	bl	800244e <HAL_CAN_TxMailbox0CompleteCallback>
 8002148:	e016      	b.n	8002178 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
 800215c:	e00c      	b.n	8002178 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	f003 0308 	and.w	r3, r3, #8
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002170:	e002      	b.n	8002178 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f989 	bl	800248a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d024      	beq.n	80021cc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800218a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f963 	bl	8002462 <HAL_CAN_TxMailbox1CompleteCallback>
 800219c:	e016      	b.n	80021cc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d004      	beq.n	80021b2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b0:	e00c      	b.n	80021cc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d004      	beq.n	80021c6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c4:	e002      	b.n	80021cc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f969 	bl	800249e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d024      	beq.n	8002220 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f943 	bl	8002476 <HAL_CAN_TxMailbox2CompleteCallback>
 80021f0:	e016      	b.n	8002220 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002202:	627b      	str	r3, [r7, #36]	@ 0x24
 8002204:	e00c      	b.n	8002220 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d004      	beq.n	800221a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
 8002218:	e002      	b.n	8002220 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f949 	bl	80024b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002220:	6a3b      	ldr	r3, [r7, #32]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00c      	beq.n	8002244 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2210      	movs	r2, #16
 8002242:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d006      	beq.n	8002266 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2208      	movs	r2, #8
 800225e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7fe f9b3 	bl	80005cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d009      	beq.n	8002284 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f921 	bl	80024c6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00c      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f003 0310 	and.w	r3, r3, #16
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2210      	movs	r2, #16
 80022a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2208      	movs	r2, #8
 80022c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f912 	bl	80024ee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8f9 	bl	80024da <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00b      	beq.n	800230a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d006      	beq.n	800230a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2210      	movs	r2, #16
 8002302:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f8fc 	bl	8002502 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00b      	beq.n	800232c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d006      	beq.n	800232c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2208      	movs	r2, #8
 8002324:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8f5 	bl	8002516 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d07b      	beq.n	800242e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d072      	beq.n	8002426 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002372:	f043 0302 	orr.w	r3, r3, #2
 8002376:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800239a:	2b00      	cmp	r3, #0
 800239c:	d043      	beq.n	8002426 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d03e      	beq.n	8002426 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023ae:	2b60      	cmp	r3, #96	@ 0x60
 80023b0:	d02b      	beq.n	800240a <HAL_CAN_IRQHandler+0x32a>
 80023b2:	2b60      	cmp	r3, #96	@ 0x60
 80023b4:	d82e      	bhi.n	8002414 <HAL_CAN_IRQHandler+0x334>
 80023b6:	2b50      	cmp	r3, #80	@ 0x50
 80023b8:	d022      	beq.n	8002400 <HAL_CAN_IRQHandler+0x320>
 80023ba:	2b50      	cmp	r3, #80	@ 0x50
 80023bc:	d82a      	bhi.n	8002414 <HAL_CAN_IRQHandler+0x334>
 80023be:	2b40      	cmp	r3, #64	@ 0x40
 80023c0:	d019      	beq.n	80023f6 <HAL_CAN_IRQHandler+0x316>
 80023c2:	2b40      	cmp	r3, #64	@ 0x40
 80023c4:	d826      	bhi.n	8002414 <HAL_CAN_IRQHandler+0x334>
 80023c6:	2b30      	cmp	r3, #48	@ 0x30
 80023c8:	d010      	beq.n	80023ec <HAL_CAN_IRQHandler+0x30c>
 80023ca:	2b30      	cmp	r3, #48	@ 0x30
 80023cc:	d822      	bhi.n	8002414 <HAL_CAN_IRQHandler+0x334>
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d002      	beq.n	80023d8 <HAL_CAN_IRQHandler+0x2f8>
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d005      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023d6:	e01d      	b.n	8002414 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	f043 0308 	orr.w	r3, r3, #8
 80023de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023e0:	e019      	b.n	8002416 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	f043 0310 	orr.w	r3, r3, #16
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023ea:	e014      	b.n	8002416 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	f043 0320 	orr.w	r3, r3, #32
 80023f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023f4:	e00f      	b.n	8002416 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023fe:	e00a      	b.n	8002416 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002406:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002408:	e005      	b.n	8002416 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002410:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002412:	e000      	b.n	8002416 <HAL_CAN_IRQHandler+0x336>
            break;
 8002414:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002424:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2204      	movs	r2, #4
 800242c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	2b00      	cmp	r3, #0
 8002432:	d008      	beq.n	8002446 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f872 	bl	800252a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	@ 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800256c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	@ (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db0b      	blt.n	80025ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4907      	ldr	r1, [pc, #28]	@ (80025dc <__NVIC_EnableIRQ+0x38>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2001      	movs	r0, #1
 80025c6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	e000e100 	.word	0xe000e100

080025e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	db0a      	blt.n	800260a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	490c      	ldr	r1, [pc, #48]	@ (800262c <__NVIC_SetPriority+0x4c>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	0112      	lsls	r2, r2, #4
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	440b      	add	r3, r1
 8002604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002608:	e00a      	b.n	8002620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4908      	ldr	r1, [pc, #32]	@ (8002630 <__NVIC_SetPriority+0x50>)
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	3b04      	subs	r3, #4
 8002618:	0112      	lsls	r2, r2, #4
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	440b      	add	r3, r1
 800261e:	761a      	strb	r2, [r3, #24]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	e000e100 	.word	0xe000e100
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002634:	b480      	push	{r7}
 8002636:	b089      	sub	sp, #36	@ 0x24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	2b04      	cmp	r3, #4
 8002650:	bf28      	it	cs
 8002652:	2304      	movcs	r3, #4
 8002654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3304      	adds	r3, #4
 800265a:	2b06      	cmp	r3, #6
 800265c:	d902      	bls.n	8002664 <NVIC_EncodePriority+0x30>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3b03      	subs	r3, #3
 8002662:	e000      	b.n	8002666 <NVIC_EncodePriority+0x32>
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43da      	mvns	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	401a      	ands	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800267c:	f04f 31ff 	mov.w	r1, #4294967295
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa01 f303 	lsl.w	r3, r1, r3
 8002686:	43d9      	mvns	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	4313      	orrs	r3, r2
         );
}
 800268e:	4618      	mov	r0, r3
 8002690:	3724      	adds	r7, #36	@ 0x24
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026ac:	d301      	bcc.n	80026b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00f      	b.n	80026d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b2:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <SysTick_Config+0x40>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ba:	210f      	movs	r1, #15
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f7ff ff8e 	bl	80025e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <SysTick_Config+0x40>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ca:	4b04      	ldr	r3, [pc, #16]	@ (80026dc <SysTick_Config+0x40>)
 80026cc:	2207      	movs	r2, #7
 80026ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	e000e010 	.word	0xe000e010

080026e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ff29 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
 8002702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002708:	f7ff ff3e 	bl	8002588 <__NVIC_GetPriorityGrouping>
 800270c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	6978      	ldr	r0, [r7, #20]
 8002714:	f7ff ff8e 	bl	8002634 <NVIC_EncodePriority>
 8002718:	4602      	mov	r2, r0
 800271a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff5d 	bl	80025e0 <__NVIC_SetPriority>
}
 8002726:	bf00      	nop
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	4603      	mov	r3, r0
 8002736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff ff31 	bl	80025a4 <__NVIC_EnableIRQ>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ffa2 	bl	800269c <SysTick_Config>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e00e      	b.n	8002792 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	795b      	ldrb	r3, [r3, #5]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fea1 	bl	80014cc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff f832 	bl	8001810 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d008      	beq.n	80027cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2280      	movs	r2, #128	@ 0x80
 80027be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e052      	b.n	8002872 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0216 	bic.w	r2, r2, #22
 80027da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695a      	ldr	r2, [r3, #20]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <HAL_DMA_Abort+0x62>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0208 	bic.w	r2, r2, #8
 800280a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281c:	e013      	b.n	8002846 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800281e:	f7fe fff7 	bl	8001810 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b05      	cmp	r3, #5
 800282a:	d90c      	bls.n	8002846 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2220      	movs	r2, #32
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2203      	movs	r2, #3
 8002836:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e015      	b.n	8002872 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e4      	bne.n	800281e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002858:	223f      	movs	r2, #63	@ 0x3f
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d004      	beq.n	8002898 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2280      	movs	r2, #128	@ 0x80
 8002892:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e00c      	b.n	80028b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2205      	movs	r2, #5
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	@ 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d6:	2300      	movs	r3, #0
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	e177      	b.n	8002bcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028dc:	2201      	movs	r2, #1
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	f040 8166 	bne.w	8002bc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b01      	cmp	r3, #1
 8002904:	d005      	beq.n	8002912 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800290e:	2b02      	cmp	r3, #2
 8002910:	d130      	bne.n	8002974 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	4013      	ands	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002948:	2201      	movs	r2, #1
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 0201 	and.w	r2, r3, #1
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b03      	cmp	r3, #3
 800297e:	d017      	beq.n	80029b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d123      	bne.n	8002a04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	08da      	lsrs	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3208      	adds	r2, #8
 80029c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	08da      	lsrs	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3208      	adds	r2, #8
 80029fe:	69b9      	ldr	r1, [r7, #24]
 8002a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	2203      	movs	r2, #3
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0203 	and.w	r2, r3, #3
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80c0 	beq.w	8002bc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b66      	ldr	r3, [pc, #408]	@ (8002be4 <HAL_GPIO_Init+0x324>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4e:	4a65      	ldr	r2, [pc, #404]	@ (8002be4 <HAL_GPIO_Init+0x324>)
 8002a50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a54:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a56:	4b63      	ldr	r3, [pc, #396]	@ (8002be4 <HAL_GPIO_Init+0x324>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a62:	4a61      	ldr	r2, [pc, #388]	@ (8002be8 <HAL_GPIO_Init+0x328>)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	089b      	lsrs	r3, r3, #2
 8002a68:	3302      	adds	r3, #2
 8002a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	220f      	movs	r2, #15
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4013      	ands	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a58      	ldr	r2, [pc, #352]	@ (8002bec <HAL_GPIO_Init+0x32c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d037      	beq.n	8002afe <HAL_GPIO_Init+0x23e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a57      	ldr	r2, [pc, #348]	@ (8002bf0 <HAL_GPIO_Init+0x330>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d031      	beq.n	8002afa <HAL_GPIO_Init+0x23a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a56      	ldr	r2, [pc, #344]	@ (8002bf4 <HAL_GPIO_Init+0x334>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02b      	beq.n	8002af6 <HAL_GPIO_Init+0x236>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a55      	ldr	r2, [pc, #340]	@ (8002bf8 <HAL_GPIO_Init+0x338>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d025      	beq.n	8002af2 <HAL_GPIO_Init+0x232>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a54      	ldr	r2, [pc, #336]	@ (8002bfc <HAL_GPIO_Init+0x33c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01f      	beq.n	8002aee <HAL_GPIO_Init+0x22e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a53      	ldr	r2, [pc, #332]	@ (8002c00 <HAL_GPIO_Init+0x340>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d019      	beq.n	8002aea <HAL_GPIO_Init+0x22a>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	@ (8002c04 <HAL_GPIO_Init+0x344>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d013      	beq.n	8002ae6 <HAL_GPIO_Init+0x226>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a51      	ldr	r2, [pc, #324]	@ (8002c08 <HAL_GPIO_Init+0x348>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00d      	beq.n	8002ae2 <HAL_GPIO_Init+0x222>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a50      	ldr	r2, [pc, #320]	@ (8002c0c <HAL_GPIO_Init+0x34c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d007      	beq.n	8002ade <HAL_GPIO_Init+0x21e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8002c10 <HAL_GPIO_Init+0x350>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d101      	bne.n	8002ada <HAL_GPIO_Init+0x21a>
 8002ad6:	2309      	movs	r3, #9
 8002ad8:	e012      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002ada:	230a      	movs	r3, #10
 8002adc:	e010      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002ade:	2308      	movs	r3, #8
 8002ae0:	e00e      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002ae2:	2307      	movs	r3, #7
 8002ae4:	e00c      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002ae6:	2306      	movs	r3, #6
 8002ae8:	e00a      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002aea:	2305      	movs	r3, #5
 8002aec:	e008      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002aee:	2304      	movs	r3, #4
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002af2:	2303      	movs	r3, #3
 8002af4:	e004      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e002      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <HAL_GPIO_Init+0x240>
 8002afe:	2300      	movs	r3, #0
 8002b00:	69fa      	ldr	r2, [r7, #28]
 8002b02:	f002 0203 	and.w	r2, r2, #3
 8002b06:	0092      	lsls	r2, r2, #2
 8002b08:	4093      	lsls	r3, r2
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b10:	4935      	ldr	r1, [pc, #212]	@ (8002be8 <HAL_GPIO_Init+0x328>)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	089b      	lsrs	r3, r3, #2
 8002b16:	3302      	adds	r3, #2
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c14 <HAL_GPIO_Init+0x354>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b42:	4a34      	ldr	r2, [pc, #208]	@ (8002c14 <HAL_GPIO_Init+0x354>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b48:	4b32      	ldr	r3, [pc, #200]	@ (8002c14 <HAL_GPIO_Init+0x354>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b6c:	4a29      	ldr	r2, [pc, #164]	@ (8002c14 <HAL_GPIO_Init+0x354>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b72:	4b28      	ldr	r3, [pc, #160]	@ (8002c14 <HAL_GPIO_Init+0x354>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b96:	4a1f      	ldr	r2, [pc, #124]	@ (8002c14 <HAL_GPIO_Init+0x354>)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c14 <HAL_GPIO_Init+0x354>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bc0:	4a14      	ldr	r2, [pc, #80]	@ (8002c14 <HAL_GPIO_Init+0x354>)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b0f      	cmp	r3, #15
 8002bd0:	f67f ae84 	bls.w	80028dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	bf00      	nop
 8002bd8:	3724      	adds	r7, #36	@ 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40013800 	.word	0x40013800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40021400 	.word	0x40021400
 8002c04:	40021800 	.word	0x40021800
 8002c08:	40021c00 	.word	0x40021c00
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40022400 	.word	0x40022400
 8002c14:	40013c00 	.word	0x40013c00

08002c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	807b      	strh	r3, [r7, #2]
 8002c24:	4613      	mov	r3, r2
 8002c26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c28:	787b      	ldrb	r3, [r7, #1]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2e:	887a      	ldrh	r2, [r7, #2]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c34:	e003      	b.n	8002c3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c36:	887b      	ldrh	r3, [r7, #2]
 8002c38:	041a      	lsls	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	619a      	str	r2, [r3, #24]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4b20      	ldr	r3, [pc, #128]	@ (8002cdc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cdc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c66:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <HAL_PWREx_EnableOverDrive+0x90>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c72:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c78:	f7fe fdca 	bl	8001810 <HAL_GetTick>
 8002c7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c7e:	e009      	b.n	8002c94 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c80:	f7fe fdc6 	bl	8001810 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c8e:	d901      	bls.n	8002c94 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e01f      	b.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c94:	4b13      	ldr	r3, [pc, #76]	@ (8002ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ca0:	d1ee      	bne.n	8002c80 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca8:	f7fe fdb2 	bl	8001810 <HAL_GetTick>
 8002cac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cae:	e009      	b.n	8002cc4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cb0:	f7fe fdae 	bl	8001810 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cbe:	d901      	bls.n	8002cc4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e007      	b.n	8002cd4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cc4:	4b07      	ldr	r3, [pc, #28]	@ (8002ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ccc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002cd0:	d1ee      	bne.n	8002cb0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	420e0040 	.word	0x420e0040
 8002ce4:	40007000 	.word	0x40007000
 8002ce8:	420e0044 	.word	0x420e0044

08002cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e267      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d075      	beq.n	8002df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0a:	4b88      	ldr	r3, [pc, #544]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d00c      	beq.n	8002d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d16:	4b85      	ldr	r3, [pc, #532]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d112      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d22:	4b82      	ldr	r3, [pc, #520]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d2e:	d10b      	bne.n	8002d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d30:	4b7e      	ldr	r3, [pc, #504]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d05b      	beq.n	8002df4 <HAL_RCC_OscConfig+0x108>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d157      	bne.n	8002df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e242      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d50:	d106      	bne.n	8002d60 <HAL_RCC_OscConfig+0x74>
 8002d52:	4b76      	ldr	r3, [pc, #472]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a75      	ldr	r2, [pc, #468]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e01d      	b.n	8002d9c <HAL_RCC_OscConfig+0xb0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x98>
 8002d6a:	4b70      	ldr	r3, [pc, #448]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a6f      	ldr	r2, [pc, #444]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	4b6d      	ldr	r3, [pc, #436]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a6c      	ldr	r2, [pc, #432]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0xb0>
 8002d84:	4b69      	ldr	r3, [pc, #420]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a68      	ldr	r2, [pc, #416]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	4b66      	ldr	r3, [pc, #408]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a65      	ldr	r2, [pc, #404]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002d96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d013      	beq.n	8002dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fd34 	bl	8001810 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe fd30 	bl	8001810 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	@ 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e207      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d0f0      	beq.n	8002dac <HAL_RCC_OscConfig+0xc0>
 8002dca:	e014      	b.n	8002df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fd20 	bl	8001810 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd4:	f7fe fd1c 	bl	8001810 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b64      	cmp	r3, #100	@ 0x64
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e1f3      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	4b51      	ldr	r3, [pc, #324]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1f0      	bne.n	8002dd4 <HAL_RCC_OscConfig+0xe8>
 8002df2:	e000      	b.n	8002df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d063      	beq.n	8002eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e02:	4b4a      	ldr	r3, [pc, #296]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e0e:	4b47      	ldr	r3, [pc, #284]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e16:	2b08      	cmp	r3, #8
 8002e18:	d11c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1a:	4b44      	ldr	r3, [pc, #272]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d116      	bne.n	8002e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	4b41      	ldr	r3, [pc, #260]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_RCC_OscConfig+0x152>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e1c7      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4937      	ldr	r1, [pc, #220]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e52:	e03a      	b.n	8002eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d020      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e5c:	4b34      	ldr	r3, [pc, #208]	@ (8002f30 <HAL_RCC_OscConfig+0x244>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fe fcd5 	bl	8001810 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fe fcd1 	bl	8001810 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e1a8      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e88:	4b28      	ldr	r3, [pc, #160]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	4925      	ldr	r1, [pc, #148]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	600b      	str	r3, [r1, #0]
 8002e9c:	e015      	b.n	8002eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e9e:	4b24      	ldr	r3, [pc, #144]	@ (8002f30 <HAL_RCC_OscConfig+0x244>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7fe fcb4 	bl	8001810 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eac:	f7fe fcb0 	bl	8001810 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e187      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d036      	beq.n	8002f44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d016      	beq.n	8002f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ede:	4b15      	ldr	r3, [pc, #84]	@ (8002f34 <HAL_RCC_OscConfig+0x248>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fe fc94 	bl	8001810 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eec:	f7fe fc90 	bl	8001810 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e167      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <HAL_RCC_OscConfig+0x240>)
 8002f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x200>
 8002f0a:	e01b      	b.n	8002f44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f0c:	4b09      	ldr	r3, [pc, #36]	@ (8002f34 <HAL_RCC_OscConfig+0x248>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f12:	f7fe fc7d 	bl	8001810 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	e00e      	b.n	8002f38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1a:	f7fe fc79 	bl	8001810 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d907      	bls.n	8002f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e150      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	42470000 	.word	0x42470000
 8002f34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f38:	4b88      	ldr	r3, [pc, #544]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ea      	bne.n	8002f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 8097 	beq.w	8003080 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f56:	4b81      	ldr	r3, [pc, #516]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10f      	bne.n	8002f82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	4b7d      	ldr	r3, [pc, #500]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	4a7c      	ldr	r2, [pc, #496]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f72:	4b7a      	ldr	r3, [pc, #488]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f82:	4b77      	ldr	r3, [pc, #476]	@ (8003160 <HAL_RCC_OscConfig+0x474>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d118      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8e:	4b74      	ldr	r3, [pc, #464]	@ (8003160 <HAL_RCC_OscConfig+0x474>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a73      	ldr	r2, [pc, #460]	@ (8003160 <HAL_RCC_OscConfig+0x474>)
 8002f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9a:	f7fe fc39 	bl	8001810 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa2:	f7fe fc35 	bl	8001810 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e10c      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003160 <HAL_RCC_OscConfig+0x474>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x2ea>
 8002fc8:	4b64      	ldr	r3, [pc, #400]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a63      	ldr	r2, [pc, #396]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002fce:	f043 0301 	orr.w	r3, r3, #1
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd4:	e01c      	b.n	8003010 <HAL_RCC_OscConfig+0x324>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b05      	cmp	r3, #5
 8002fdc:	d10c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x30c>
 8002fde:	4b5f      	ldr	r3, [pc, #380]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	4a5e      	ldr	r2, [pc, #376]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fea:	4b5c      	ldr	r3, [pc, #368]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fee:	4a5b      	ldr	r2, [pc, #364]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff6:	e00b      	b.n	8003010 <HAL_RCC_OscConfig+0x324>
 8002ff8:	4b58      	ldr	r3, [pc, #352]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffc:	4a57      	ldr	r2, [pc, #348]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	6713      	str	r3, [r2, #112]	@ 0x70
 8003004:	4b55      	ldr	r3, [pc, #340]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003008:	4a54      	ldr	r2, [pc, #336]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 800300a:	f023 0304 	bic.w	r3, r3, #4
 800300e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d015      	beq.n	8003044 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7fe fbfa 	bl	8001810 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301e:	e00a      	b.n	8003036 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fe fbf6 	bl	8001810 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0cb      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003036:	4b49      	ldr	r3, [pc, #292]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0ee      	beq.n	8003020 <HAL_RCC_OscConfig+0x334>
 8003042:	e014      	b.n	800306e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003044:	f7fe fbe4 	bl	8001810 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304a:	e00a      	b.n	8003062 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800304c:	f7fe fbe0 	bl	8001810 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e0b5      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003062:	4b3e      	ldr	r3, [pc, #248]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ee      	bne.n	800304c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800306e:	7dfb      	ldrb	r3, [r7, #23]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d105      	bne.n	8003080 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003074:	4b39      	ldr	r3, [pc, #228]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	4a38      	ldr	r2, [pc, #224]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800307e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80a1 	beq.w	80031cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800308a:	4b34      	ldr	r3, [pc, #208]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	2b08      	cmp	r3, #8
 8003094:	d05c      	beq.n	8003150 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d141      	bne.n	8003122 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309e:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <HAL_RCC_OscConfig+0x478>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a4:	f7fe fbb4 	bl	8001810 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fe fbb0 	bl	8001810 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e087      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030be:	4b27      	ldr	r3, [pc, #156]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	019b      	lsls	r3, r3, #6
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	085b      	lsrs	r3, r3, #1
 80030e2:	3b01      	subs	r3, #1
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	491b      	ldr	r1, [pc, #108]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003164 <HAL_RCC_OscConfig+0x478>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fa:	f7fe fb89 	bl	8001810 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003102:	f7fe fb85 	bl	8001810 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e05c      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003114:	4b11      	ldr	r3, [pc, #68]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x416>
 8003120:	e054      	b.n	80031cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <HAL_RCC_OscConfig+0x478>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fb72 	bl	8001810 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe fb6e 	bl	8001810 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e045      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_OscConfig+0x470>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x444>
 800314e:	e03d      	b.n	80031cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d107      	bne.n	8003168 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e038      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
 800315c:	40023800 	.word	0x40023800
 8003160:	40007000 	.word	0x40007000
 8003164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003168:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <HAL_RCC_OscConfig+0x4ec>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	699b      	ldr	r3, [r3, #24]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d028      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d121      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d11a      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003198:	4013      	ands	r3, r2
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800319e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d111      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ae:	085b      	lsrs	r3, r3, #1
 80031b0:	3b01      	subs	r3, #1
 80031b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d107      	bne.n	80031c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023800 	.word	0x40023800

080031dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0cc      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f0:	4b68      	ldr	r3, [pc, #416]	@ (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d90c      	bls.n	8003218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b65      	ldr	r3, [pc, #404]	@ (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003206:	4b63      	ldr	r3, [pc, #396]	@ (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d001      	beq.n	8003218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b8      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003230:	4b59      	ldr	r3, [pc, #356]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a58      	ldr	r2, [pc, #352]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800323a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003248:	4b53      	ldr	r3, [pc, #332]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	4a52      	ldr	r2, [pc, #328]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003254:	4b50      	ldr	r3, [pc, #320]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	494d      	ldr	r1, [pc, #308]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	4313      	orrs	r3, r2
 8003264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d044      	beq.n	80032fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d107      	bne.n	800328a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	4b47      	ldr	r3, [pc, #284]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d119      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e07f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d003      	beq.n	800329a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003296:	2b03      	cmp	r3, #3
 8003298:	d107      	bne.n	80032aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329a:	4b3f      	ldr	r3, [pc, #252]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e06f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e067      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b37      	ldr	r3, [pc, #220]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4934      	ldr	r1, [pc, #208]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032cc:	f7fe faa0 	bl	8001810 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e00a      	b.n	80032ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fe fa9c 	bl	8001810 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e04f      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 020c 	and.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d1eb      	bne.n	80032d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032fc:	4b25      	ldr	r3, [pc, #148]	@ (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d20c      	bcs.n	8003324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b22      	ldr	r3, [pc, #136]	@ (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b20      	ldr	r3, [pc, #128]	@ (8003394 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e032      	b.n	800338a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003330:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4916      	ldr	r1, [pc, #88]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d009      	beq.n	8003362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800334e:	4b12      	ldr	r3, [pc, #72]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	490e      	ldr	r1, [pc, #56]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003362:	f000 f821 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003366:	4602      	mov	r2, r0
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	490a      	ldr	r1, [pc, #40]	@ (800339c <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	5ccb      	ldrb	r3, [r1, r3]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	4a09      	ldr	r2, [pc, #36]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800337e:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fe fa00 	bl	8001788 <HAL_InitTick>

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023c00 	.word	0x40023c00
 8003398:	40023800 	.word	0x40023800
 800339c:	08004fb4 	.word	0x08004fb4
 80033a0:	20000004 	.word	0x20000004
 80033a4:	20000008 	.word	0x20000008

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	b090      	sub	sp, #64	@ 0x40
 80033ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b4:	2300      	movs	r3, #0
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033b8:	2300      	movs	r3, #0
 80033ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c0:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 030c 	and.w	r3, r3, #12
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x40>
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	f200 80a1 	bhi.w	8003514 <HAL_RCC_GetSysClockFreq+0x16c>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x34>
 80033d6:	2b04      	cmp	r3, #4
 80033d8:	d003      	beq.n	80033e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80033da:	e09b      	b.n	8003514 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033dc:	4b53      	ldr	r3, [pc, #332]	@ (800352c <HAL_RCC_GetSysClockFreq+0x184>)
 80033de:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80033e0:	e09b      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e2:	4b53      	ldr	r3, [pc, #332]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033e6:	e098      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f2:	4b4d      	ldr	r3, [pc, #308]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d028      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	099b      	lsrs	r3, r3, #6
 8003404:	2200      	movs	r2, #0
 8003406:	623b      	str	r3, [r7, #32]
 8003408:	627a      	str	r2, [r7, #36]	@ 0x24
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003410:	2100      	movs	r1, #0
 8003412:	4b47      	ldr	r3, [pc, #284]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x188>)
 8003414:	fb03 f201 	mul.w	r2, r3, r1
 8003418:	2300      	movs	r3, #0
 800341a:	fb00 f303 	mul.w	r3, r0, r3
 800341e:	4413      	add	r3, r2
 8003420:	4a43      	ldr	r2, [pc, #268]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x188>)
 8003422:	fba0 1202 	umull	r1, r2, r0, r2
 8003426:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003428:	460a      	mov	r2, r1
 800342a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800342c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800342e:	4413      	add	r3, r2
 8003430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003434:	2200      	movs	r2, #0
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	61fa      	str	r2, [r7, #28]
 800343a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800343e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003442:	f7fc ff25 	bl	8000290 <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4613      	mov	r3, r2
 800344c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800344e:	e053      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003450:	4b35      	ldr	r3, [pc, #212]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	2200      	movs	r2, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	617a      	str	r2, [r7, #20]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003462:	f04f 0b00 	mov.w	fp, #0
 8003466:	4652      	mov	r2, sl
 8003468:	465b      	mov	r3, fp
 800346a:	f04f 0000 	mov.w	r0, #0
 800346e:	f04f 0100 	mov.w	r1, #0
 8003472:	0159      	lsls	r1, r3, #5
 8003474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003478:	0150      	lsls	r0, r2, #5
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	ebb2 080a 	subs.w	r8, r2, sl
 8003482:	eb63 090b 	sbc.w	r9, r3, fp
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003492:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003496:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800349a:	ebb2 0408 	subs.w	r4, r2, r8
 800349e:	eb63 0509 	sbc.w	r5, r3, r9
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	00eb      	lsls	r3, r5, #3
 80034ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034b0:	00e2      	lsls	r2, r4, #3
 80034b2:	4614      	mov	r4, r2
 80034b4:	461d      	mov	r5, r3
 80034b6:	eb14 030a 	adds.w	r3, r4, sl
 80034ba:	603b      	str	r3, [r7, #0]
 80034bc:	eb45 030b 	adc.w	r3, r5, fp
 80034c0:	607b      	str	r3, [r7, #4]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ce:	4629      	mov	r1, r5
 80034d0:	028b      	lsls	r3, r1, #10
 80034d2:	4621      	mov	r1, r4
 80034d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d8:	4621      	mov	r1, r4
 80034da:	028a      	lsls	r2, r1, #10
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e2:	2200      	movs	r2, #0
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	60fa      	str	r2, [r7, #12]
 80034e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ec:	f7fc fed0 	bl	8000290 <__aeabi_uldivmod>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4613      	mov	r3, r2
 80034f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	3301      	adds	r3, #1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003508:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800350a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003510:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003512:	e002      	b.n	800351a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b05      	ldr	r3, [pc, #20]	@ (800352c <HAL_RCC_GetSysClockFreq+0x184>)
 8003516:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800351c:	4618      	mov	r0, r3
 800351e:	3740      	adds	r7, #64	@ 0x40
 8003520:	46bd      	mov	sp, r7
 8003522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003526:	bf00      	nop
 8003528:	40023800 	.word	0x40023800
 800352c:	00f42400 	.word	0x00f42400
 8003530:	00b71b00 	.word	0x00b71b00

08003534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003538:	4b03      	ldr	r3, [pc, #12]	@ (8003548 <HAL_RCC_GetHCLKFreq+0x14>)
 800353a:	681b      	ldr	r3, [r3, #0]
}
 800353c:	4618      	mov	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000004 	.word	0x20000004

0800354c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003550:	f7ff fff0 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 8003554:	4602      	mov	r2, r0
 8003556:	4b05      	ldr	r3, [pc, #20]	@ (800356c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	0a9b      	lsrs	r3, r3, #10
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	4903      	ldr	r1, [pc, #12]	@ (8003570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003562:	5ccb      	ldrb	r3, [r1, r3]
 8003564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003568:	4618      	mov	r0, r3
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40023800 	.word	0x40023800
 8003570:	08004fc4 	.word	0x08004fc4

08003574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003578:	f7ff ffdc 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 800357c:	4602      	mov	r2, r0
 800357e:	4b05      	ldr	r3, [pc, #20]	@ (8003594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	0b5b      	lsrs	r3, r3, #13
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	4903      	ldr	r1, [pc, #12]	@ (8003598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800358a:	5ccb      	ldrb	r3, [r1, r3]
 800358c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003590:	4618      	mov	r0, r3
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40023800 	.word	0x40023800
 8003598:	08004fc4 	.word	0x08004fc4

0800359c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e042      	b.n	8003634 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7fd ffa4 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2224      	movs	r2, #36	@ 0x24
 80035cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 fdbd 	bl	8004160 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	@ 0x28
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	4613      	mov	r3, r2
 800364a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b20      	cmp	r3, #32
 800365a:	d175      	bne.n	8003748 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <HAL_UART_Transmit+0x2c>
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e06e      	b.n	800374a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2221      	movs	r2, #33	@ 0x21
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800367a:	f7fe f8c9 	bl	8001810 <HAL_GetTick>
 800367e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	88fa      	ldrh	r2, [r7, #6]
 8003684:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003694:	d108      	bne.n	80036a8 <HAL_UART_Transmit+0x6c>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d104      	bne.n	80036a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	61bb      	str	r3, [r7, #24]
 80036a6:	e003      	b.n	80036b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036b0:	e02e      	b.n	8003710 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	2180      	movs	r1, #128	@ 0x80
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fb1f 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e03a      	b.n	800374a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	3302      	adds	r3, #2
 80036ee:	61bb      	str	r3, [r7, #24]
 80036f0:	e007      	b.n	8003702 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	3301      	adds	r3, #1
 8003700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1cb      	bne.n	80036b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2200      	movs	r2, #0
 8003722:	2140      	movs	r1, #64	@ 0x40
 8003724:	68f8      	ldr	r0, [r7, #12]
 8003726:	f000 faeb 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e006      	b.n	800374a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	4613      	mov	r3, r2
 800375e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b20      	cmp	r3, #32
 800376a:	d112      	bne.n	8003792 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_UART_Receive_IT+0x26>
 8003772:	88fb      	ldrh	r3, [r7, #6]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e00b      	b.n	8003794 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003782:	88fb      	ldrh	r3, [r7, #6]
 8003784:	461a      	mov	r2, r3
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 fb12 	bl	8003db2 <UART_Start_Receive_IT>
 800378e:	4603      	mov	r3, r0
 8003790:	e000      	b.n	8003794 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003792:	2302      	movs	r3, #2
  }
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b0ba      	sub	sp, #232	@ 0xe8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d009      	beq.n	8003802 <HAL_UART_IRQHandler+0x66>
 80037ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fbf2 	bl	8003fe4 <UART_Receive_IT>
      return;
 8003800:	e25b      	b.n	8003cba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003802:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80de 	beq.w	80039c8 <HAL_UART_IRQHandler+0x22c>
 800380c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800381c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 80d1 	beq.w	80039c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00b      	beq.n	800384a <HAL_UART_IRQHandler+0xae>
 8003832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800384a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_UART_IRQHandler+0xd2>
 8003856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	f043 0202 	orr.w	r2, r3, #2
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_UART_IRQHandler+0xf6>
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f043 0204 	orr.w	r2, r3, #4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003896:	f003 0308 	and.w	r3, r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	d011      	beq.n	80038c2 <HAL_UART_IRQHandler+0x126>
 800389e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d105      	bne.n	80038b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f043 0208 	orr.w	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 81f2 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d0:	f003 0320 	and.w	r3, r3, #32
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d008      	beq.n	80038ea <HAL_UART_IRQHandler+0x14e>
 80038d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d002      	beq.n	80038ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fb7d 	bl	8003fe4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f4:	2b40      	cmp	r3, #64	@ 0x40
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <HAL_UART_IRQHandler+0x17a>
 800390e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003912:	2b00      	cmp	r3, #0
 8003914:	d04f      	beq.n	80039b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fa85 	bl	8003e26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003926:	2b40      	cmp	r3, #64	@ 0x40
 8003928:	d141      	bne.n	80039ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3314      	adds	r3, #20
 8003930:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003938:	e853 3f00 	ldrex	r3, [r3]
 800393c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003940:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003944:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003956:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800395a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003962:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003966:	e841 2300 	strex	r3, r2, [r1]
 800396a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800396e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1d9      	bne.n	800392a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d013      	beq.n	80039a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003982:	4a7e      	ldr	r2, [pc, #504]	@ (8003b7c <HAL_UART_IRQHandler+0x3e0>)
 8003984:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe ff75 	bl	800287a <HAL_DMA_Abort_IT>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d016      	beq.n	80039c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039a0:	4610      	mov	r0, r2
 80039a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a4:	e00e      	b.n	80039c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f994 	bl	8003cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ac:	e00a      	b.n	80039c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f990 	bl	8003cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b4:	e006      	b.n	80039c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f98c 	bl	8003cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80039c2:	e175      	b.n	8003cb0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c4:	bf00      	nop
    return;
 80039c6:	e173      	b.n	8003cb0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 814f 	bne.w	8003c70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8148 	beq.w	8003c70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8141 	beq.w	8003c70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0e:	2b40      	cmp	r3, #64	@ 0x40
 8003a10:	f040 80b6 	bne.w	8003b80 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8145 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a32:	429a      	cmp	r2, r3
 8003a34:	f080 813e 	bcs.w	8003cb4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a4a:	f000 8088 	beq.w	8003b5e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	330c      	adds	r3, #12
 8003a76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a8a:	e841 2300 	strex	r3, r2, [r1]
 8003a8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1d9      	bne.n	8003a4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3314      	adds	r3, #20
 8003aa0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003aaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3314      	adds	r3, #20
 8003aba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003abe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ac2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ac6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ad0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e1      	bne.n	8003a9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3314      	adds	r3, #20
 8003adc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3314      	adds	r3, #20
 8003af6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003afa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003afc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e3      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b2e:	f023 0310 	bic.w	r3, r3, #16
 8003b32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b40:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b42:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e3      	bne.n	8003b1c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe fe1e 	bl	800279a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8b7 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b7a:	e09b      	b.n	8003cb4 <HAL_UART_IRQHandler+0x518>
 8003b7c:	08003eed 	.word	0x08003eed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 808e 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8089 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003bca:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e3      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	623b      	str	r3, [r7, #32]
   return(result);
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c02:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e3      	bne.n	8003bde <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0310 	bic.w	r3, r3, #16
 8003c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c48:	61fa      	str	r2, [r7, #28]
 8003c4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	69b9      	ldr	r1, [r7, #24]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	617b      	str	r3, [r7, #20]
   return(result);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e3      	bne.n	8003c24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f83d 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c6e:	e023      	b.n	8003cb8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d009      	beq.n	8003c90 <HAL_UART_IRQHandler+0x4f4>
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f943 	bl	8003f14 <UART_Transmit_IT>
    return;
 8003c8e:	e014      	b.n	8003cba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <HAL_UART_IRQHandler+0x51e>
 8003c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f983 	bl	8003fb4 <UART_EndTransmit_IT>
    return;
 8003cae:	e004      	b.n	8003cba <HAL_UART_IRQHandler+0x51e>
    return;
 8003cb0:	bf00      	nop
 8003cb2:	e002      	b.n	8003cba <HAL_UART_IRQHandler+0x51e>
      return;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HAL_UART_IRQHandler+0x51e>
      return;
 8003cb8:	bf00      	nop
  }
}
 8003cba:	37e8      	adds	r7, #232	@ 0xe8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d10:	e03b      	b.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d18:	d037      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1a:	f7fd fd79 	bl	8001810 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e03a      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d023      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b80      	cmp	r3, #128	@ 0x80
 8003d46:	d020      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d01d      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d116      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f857 	bl	8003e26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00f      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	bf0c      	ite	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	2300      	movne	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d0b4      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2222      	movs	r2, #34	@ 0x22
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003df6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0220 	orr.w	r2, r2, #32
 8003e16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b095      	sub	sp, #84	@ 0x54
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3314      	adds	r3, #20
 8003e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3314      	adds	r3, #20
 8003e80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d119      	bne.n	8003ed2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f023 0310 	bic.w	r3, r3, #16
 8003eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	330c      	adds	r3, #12
 8003ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ebe:	61ba      	str	r2, [r7, #24]
 8003ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6979      	ldr	r1, [r7, #20]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	613b      	str	r3, [r7, #16]
   return(result);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e5      	bne.n	8003e9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ee0:	bf00      	nop
 8003ee2:	3754      	adds	r7, #84	@ 0x54
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff fee4 	bl	8003cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f0c:	bf00      	nop
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b21      	cmp	r3, #33	@ 0x21
 8003f26:	d13e      	bne.n	8003fa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f30:	d114      	bne.n	8003f5c <UART_Transmit_IT+0x48>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d110      	bne.n	8003f5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	881b      	ldrh	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	1c9a      	adds	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	621a      	str	r2, [r3, #32]
 8003f5a:	e008      	b.n	8003f6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	1c59      	adds	r1, r3, #1
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6211      	str	r1, [r2, #32]
 8003f66:	781a      	ldrb	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10f      	bne.n	8003fa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e000      	b.n	8003fa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
  }
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff fe73 	bl	8003cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08c      	sub	sp, #48	@ 0x30
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b22      	cmp	r3, #34	@ 0x22
 8003ff6:	f040 80ae 	bne.w	8004156 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004002:	d117      	bne.n	8004034 <UART_Receive_IT+0x50>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d113      	bne.n	8004034 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800400c:	2300      	movs	r3, #0
 800400e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	b29a      	uxth	r2, r3
 8004024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004026:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402c:	1c9a      	adds	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	629a      	str	r2, [r3, #40]	@ 0x28
 8004032:	e026      	b.n	8004082 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004046:	d007      	beq.n	8004058 <UART_Receive_IT+0x74>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <UART_Receive_IT+0x82>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d106      	bne.n	8004066 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	b2da      	uxtb	r2, r3
 8004060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004062:	701a      	strb	r2, [r3, #0]
 8004064:	e008      	b.n	8004078 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004072:	b2da      	uxtb	r2, r3
 8004074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004076:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29b      	uxth	r3, r3
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4619      	mov	r1, r3
 8004090:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004092:	2b00      	cmp	r3, #0
 8004094:	d15d      	bne.n	8004152 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0220 	bic.w	r2, r2, #32
 80040a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0201 	bic.w	r2, r2, #1
 80040c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d135      	bne.n	8004148 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	330c      	adds	r3, #12
 80040e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	613b      	str	r3, [r7, #16]
   return(result);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f023 0310 	bic.w	r3, r3, #16
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004102:	623a      	str	r2, [r7, #32]
 8004104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	69f9      	ldr	r1, [r7, #28]
 8004108:	6a3a      	ldr	r2, [r7, #32]
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e5      	bne.n	80040e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0310 	and.w	r3, r3, #16
 8004120:	2b10      	cmp	r3, #16
 8004122:	d10a      	bne.n	800413a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	60fb      	str	r3, [r7, #12]
 8004138:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fdd1 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
 8004146:	e002      	b.n	800414e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f7fc fcb9 	bl	8000ac0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e002      	b.n	8004158 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e000      	b.n	8004158 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004156:	2302      	movs	r3, #2
  }
}
 8004158:	4618      	mov	r0, r3
 800415a:	3730      	adds	r7, #48	@ 0x30
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b0c0      	sub	sp, #256	@ 0x100
 8004166:	af00      	add	r7, sp, #0
 8004168:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	68d9      	ldr	r1, [r3, #12]
 800417e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	ea40 0301 	orr.w	r3, r0, r1
 8004188:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	431a      	orrs	r2, r3
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	431a      	orrs	r2, r3
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041b8:	f021 010c 	bic.w	r1, r1, #12
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041c6:	430b      	orrs	r3, r1
 80041c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	6999      	ldr	r1, [r3, #24]
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	ea40 0301 	orr.w	r3, r0, r1
 80041e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b8f      	ldr	r3, [pc, #572]	@ (800442c <UART_SetConfig+0x2cc>)
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d005      	beq.n	8004200 <UART_SetConfig+0xa0>
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004430 <UART_SetConfig+0x2d0>)
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d104      	bne.n	800420a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004200:	f7ff f9b8 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8004204:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004208:	e003      	b.n	8004212 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800420a:	f7ff f99f 	bl	800354c <HAL_RCC_GetPCLK1Freq>
 800420e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	69db      	ldr	r3, [r3, #28]
 8004218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800421c:	f040 810c 	bne.w	8004438 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004224:	2200      	movs	r2, #0
 8004226:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800422a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800422e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004232:	4622      	mov	r2, r4
 8004234:	462b      	mov	r3, r5
 8004236:	1891      	adds	r1, r2, r2
 8004238:	65b9      	str	r1, [r7, #88]	@ 0x58
 800423a:	415b      	adcs	r3, r3
 800423c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800423e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004242:	4621      	mov	r1, r4
 8004244:	eb12 0801 	adds.w	r8, r2, r1
 8004248:	4629      	mov	r1, r5
 800424a:	eb43 0901 	adc.w	r9, r3, r1
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800425a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800425e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004262:	4690      	mov	r8, r2
 8004264:	4699      	mov	r9, r3
 8004266:	4623      	mov	r3, r4
 8004268:	eb18 0303 	adds.w	r3, r8, r3
 800426c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004270:	462b      	mov	r3, r5
 8004272:	eb49 0303 	adc.w	r3, r9, r3
 8004276:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004286:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800428a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800428e:	460b      	mov	r3, r1
 8004290:	18db      	adds	r3, r3, r3
 8004292:	653b      	str	r3, [r7, #80]	@ 0x50
 8004294:	4613      	mov	r3, r2
 8004296:	eb42 0303 	adc.w	r3, r2, r3
 800429a:	657b      	str	r3, [r7, #84]	@ 0x54
 800429c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042a4:	f7fb fff4 	bl	8000290 <__aeabi_uldivmod>
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4b61      	ldr	r3, [pc, #388]	@ (8004434 <UART_SetConfig+0x2d4>)
 80042ae:	fba3 2302 	umull	r2, r3, r3, r2
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	011c      	lsls	r4, r3, #4
 80042b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042ba:	2200      	movs	r2, #0
 80042bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042c8:	4642      	mov	r2, r8
 80042ca:	464b      	mov	r3, r9
 80042cc:	1891      	adds	r1, r2, r2
 80042ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042d0:	415b      	adcs	r3, r3
 80042d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042d8:	4641      	mov	r1, r8
 80042da:	eb12 0a01 	adds.w	sl, r2, r1
 80042de:	4649      	mov	r1, r9
 80042e0:	eb43 0b01 	adc.w	fp, r3, r1
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f8:	4692      	mov	sl, r2
 80042fa:	469b      	mov	fp, r3
 80042fc:	4643      	mov	r3, r8
 80042fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004306:	464b      	mov	r3, r9
 8004308:	eb4b 0303 	adc.w	r3, fp, r3
 800430c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800431c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004320:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004324:	460b      	mov	r3, r1
 8004326:	18db      	adds	r3, r3, r3
 8004328:	643b      	str	r3, [r7, #64]	@ 0x40
 800432a:	4613      	mov	r3, r2
 800432c:	eb42 0303 	adc.w	r3, r2, r3
 8004330:	647b      	str	r3, [r7, #68]	@ 0x44
 8004332:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004336:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800433a:	f7fb ffa9 	bl	8000290 <__aeabi_uldivmod>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4611      	mov	r1, r2
 8004344:	4b3b      	ldr	r3, [pc, #236]	@ (8004434 <UART_SetConfig+0x2d4>)
 8004346:	fba3 2301 	umull	r2, r3, r3, r1
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2264      	movs	r2, #100	@ 0x64
 800434e:	fb02 f303 	mul.w	r3, r2, r3
 8004352:	1acb      	subs	r3, r1, r3
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800435a:	4b36      	ldr	r3, [pc, #216]	@ (8004434 <UART_SetConfig+0x2d4>)
 800435c:	fba3 2302 	umull	r2, r3, r3, r2
 8004360:	095b      	lsrs	r3, r3, #5
 8004362:	005b      	lsls	r3, r3, #1
 8004364:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004368:	441c      	add	r4, r3
 800436a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800436e:	2200      	movs	r2, #0
 8004370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004374:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004378:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800437c:	4642      	mov	r2, r8
 800437e:	464b      	mov	r3, r9
 8004380:	1891      	adds	r1, r2, r2
 8004382:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004384:	415b      	adcs	r3, r3
 8004386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800438c:	4641      	mov	r1, r8
 800438e:	1851      	adds	r1, r2, r1
 8004390:	6339      	str	r1, [r7, #48]	@ 0x30
 8004392:	4649      	mov	r1, r9
 8004394:	414b      	adcs	r3, r1
 8004396:	637b      	str	r3, [r7, #52]	@ 0x34
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043a4:	4659      	mov	r1, fp
 80043a6:	00cb      	lsls	r3, r1, #3
 80043a8:	4651      	mov	r1, sl
 80043aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ae:	4651      	mov	r1, sl
 80043b0:	00ca      	lsls	r2, r1, #3
 80043b2:	4610      	mov	r0, r2
 80043b4:	4619      	mov	r1, r3
 80043b6:	4603      	mov	r3, r0
 80043b8:	4642      	mov	r2, r8
 80043ba:	189b      	adds	r3, r3, r2
 80043bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043c0:	464b      	mov	r3, r9
 80043c2:	460a      	mov	r2, r1
 80043c4:	eb42 0303 	adc.w	r3, r2, r3
 80043c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043e0:	460b      	mov	r3, r1
 80043e2:	18db      	adds	r3, r3, r3
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043e6:	4613      	mov	r3, r2
 80043e8:	eb42 0303 	adc.w	r3, r2, r3
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043f6:	f7fb ff4b 	bl	8000290 <__aeabi_uldivmod>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <UART_SetConfig+0x2d4>)
 8004400:	fba3 1302 	umull	r1, r3, r3, r2
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	2164      	movs	r1, #100	@ 0x64
 8004408:	fb01 f303 	mul.w	r3, r1, r3
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	3332      	adds	r3, #50	@ 0x32
 8004412:	4a08      	ldr	r2, [pc, #32]	@ (8004434 <UART_SetConfig+0x2d4>)
 8004414:	fba2 2303 	umull	r2, r3, r2, r3
 8004418:	095b      	lsrs	r3, r3, #5
 800441a:	f003 0207 	and.w	r2, r3, #7
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4422      	add	r2, r4
 8004426:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004428:	e106      	b.n	8004638 <UART_SetConfig+0x4d8>
 800442a:	bf00      	nop
 800442c:	40011000 	.word	0x40011000
 8004430:	40011400 	.word	0x40011400
 8004434:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004438:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800443c:	2200      	movs	r2, #0
 800443e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004442:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004446:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800444a:	4642      	mov	r2, r8
 800444c:	464b      	mov	r3, r9
 800444e:	1891      	adds	r1, r2, r2
 8004450:	6239      	str	r1, [r7, #32]
 8004452:	415b      	adcs	r3, r3
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
 8004456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800445a:	4641      	mov	r1, r8
 800445c:	1854      	adds	r4, r2, r1
 800445e:	4649      	mov	r1, r9
 8004460:	eb43 0501 	adc.w	r5, r3, r1
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	00eb      	lsls	r3, r5, #3
 800446e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004472:	00e2      	lsls	r2, r4, #3
 8004474:	4614      	mov	r4, r2
 8004476:	461d      	mov	r5, r3
 8004478:	4643      	mov	r3, r8
 800447a:	18e3      	adds	r3, r4, r3
 800447c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004480:	464b      	mov	r3, r9
 8004482:	eb45 0303 	adc.w	r3, r5, r3
 8004486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004496:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044a6:	4629      	mov	r1, r5
 80044a8:	008b      	lsls	r3, r1, #2
 80044aa:	4621      	mov	r1, r4
 80044ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044b0:	4621      	mov	r1, r4
 80044b2:	008a      	lsls	r2, r1, #2
 80044b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044b8:	f7fb feea 	bl	8000290 <__aeabi_uldivmod>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4b60      	ldr	r3, [pc, #384]	@ (8004644 <UART_SetConfig+0x4e4>)
 80044c2:	fba3 2302 	umull	r2, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	011c      	lsls	r4, r3, #4
 80044ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044dc:	4642      	mov	r2, r8
 80044de:	464b      	mov	r3, r9
 80044e0:	1891      	adds	r1, r2, r2
 80044e2:	61b9      	str	r1, [r7, #24]
 80044e4:	415b      	adcs	r3, r3
 80044e6:	61fb      	str	r3, [r7, #28]
 80044e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ec:	4641      	mov	r1, r8
 80044ee:	1851      	adds	r1, r2, r1
 80044f0:	6139      	str	r1, [r7, #16]
 80044f2:	4649      	mov	r1, r9
 80044f4:	414b      	adcs	r3, r1
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004504:	4659      	mov	r1, fp
 8004506:	00cb      	lsls	r3, r1, #3
 8004508:	4651      	mov	r1, sl
 800450a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450e:	4651      	mov	r1, sl
 8004510:	00ca      	lsls	r2, r1, #3
 8004512:	4610      	mov	r0, r2
 8004514:	4619      	mov	r1, r3
 8004516:	4603      	mov	r3, r0
 8004518:	4642      	mov	r2, r8
 800451a:	189b      	adds	r3, r3, r2
 800451c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004520:	464b      	mov	r3, r9
 8004522:	460a      	mov	r2, r1
 8004524:	eb42 0303 	adc.w	r3, r2, r3
 8004528:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004536:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004544:	4649      	mov	r1, r9
 8004546:	008b      	lsls	r3, r1, #2
 8004548:	4641      	mov	r1, r8
 800454a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800454e:	4641      	mov	r1, r8
 8004550:	008a      	lsls	r2, r1, #2
 8004552:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004556:	f7fb fe9b 	bl	8000290 <__aeabi_uldivmod>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4611      	mov	r1, r2
 8004560:	4b38      	ldr	r3, [pc, #224]	@ (8004644 <UART_SetConfig+0x4e4>)
 8004562:	fba3 2301 	umull	r2, r3, r3, r1
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	2264      	movs	r2, #100	@ 0x64
 800456a:	fb02 f303 	mul.w	r3, r2, r3
 800456e:	1acb      	subs	r3, r1, r3
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	3332      	adds	r3, #50	@ 0x32
 8004574:	4a33      	ldr	r2, [pc, #204]	@ (8004644 <UART_SetConfig+0x4e4>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	095b      	lsrs	r3, r3, #5
 800457c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004580:	441c      	add	r4, r3
 8004582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004586:	2200      	movs	r2, #0
 8004588:	673b      	str	r3, [r7, #112]	@ 0x70
 800458a:	677a      	str	r2, [r7, #116]	@ 0x74
 800458c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004590:	4642      	mov	r2, r8
 8004592:	464b      	mov	r3, r9
 8004594:	1891      	adds	r1, r2, r2
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	415b      	adcs	r3, r3
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a0:	4641      	mov	r1, r8
 80045a2:	1851      	adds	r1, r2, r1
 80045a4:	6039      	str	r1, [r7, #0]
 80045a6:	4649      	mov	r1, r9
 80045a8:	414b      	adcs	r3, r1
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045b8:	4659      	mov	r1, fp
 80045ba:	00cb      	lsls	r3, r1, #3
 80045bc:	4651      	mov	r1, sl
 80045be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045c2:	4651      	mov	r1, sl
 80045c4:	00ca      	lsls	r2, r1, #3
 80045c6:	4610      	mov	r0, r2
 80045c8:	4619      	mov	r1, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	4642      	mov	r2, r8
 80045ce:	189b      	adds	r3, r3, r2
 80045d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045d2:	464b      	mov	r3, r9
 80045d4:	460a      	mov	r2, r1
 80045d6:	eb42 0303 	adc.w	r3, r2, r3
 80045da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80045e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045f4:	4649      	mov	r1, r9
 80045f6:	008b      	lsls	r3, r1, #2
 80045f8:	4641      	mov	r1, r8
 80045fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fe:	4641      	mov	r1, r8
 8004600:	008a      	lsls	r2, r1, #2
 8004602:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004606:	f7fb fe43 	bl	8000290 <__aeabi_uldivmod>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4b0d      	ldr	r3, [pc, #52]	@ (8004644 <UART_SetConfig+0x4e4>)
 8004610:	fba3 1302 	umull	r1, r3, r3, r2
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	2164      	movs	r1, #100	@ 0x64
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	3332      	adds	r3, #50	@ 0x32
 8004622:	4a08      	ldr	r2, [pc, #32]	@ (8004644 <UART_SetConfig+0x4e4>)
 8004624:	fba2 2303 	umull	r2, r3, r2, r3
 8004628:	095b      	lsrs	r3, r3, #5
 800462a:	f003 020f 	and.w	r2, r3, #15
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4422      	add	r2, r4
 8004636:	609a      	str	r2, [r3, #8]
}
 8004638:	bf00      	nop
 800463a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800463e:	46bd      	mov	sp, r7
 8004640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004644:	51eb851f 	.word	0x51eb851f

08004648 <siprintf>:
 8004648:	b40e      	push	{r1, r2, r3}
 800464a:	b500      	push	{lr}
 800464c:	b09c      	sub	sp, #112	@ 0x70
 800464e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004650:	9002      	str	r0, [sp, #8]
 8004652:	9006      	str	r0, [sp, #24]
 8004654:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004658:	4809      	ldr	r0, [pc, #36]	@ (8004680 <siprintf+0x38>)
 800465a:	9107      	str	r1, [sp, #28]
 800465c:	9104      	str	r1, [sp, #16]
 800465e:	4909      	ldr	r1, [pc, #36]	@ (8004684 <siprintf+0x3c>)
 8004660:	f853 2b04 	ldr.w	r2, [r3], #4
 8004664:	9105      	str	r1, [sp, #20]
 8004666:	6800      	ldr	r0, [r0, #0]
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	a902      	add	r1, sp, #8
 800466c:	f000 f994 	bl	8004998 <_svfiprintf_r>
 8004670:	9b02      	ldr	r3, [sp, #8]
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
 8004676:	b01c      	add	sp, #112	@ 0x70
 8004678:	f85d eb04 	ldr.w	lr, [sp], #4
 800467c:	b003      	add	sp, #12
 800467e:	4770      	bx	lr
 8004680:	20000010 	.word	0x20000010
 8004684:	ffff0208 	.word	0xffff0208

08004688 <memset>:
 8004688:	4402      	add	r2, r0
 800468a:	4603      	mov	r3, r0
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	f803 1b01 	strb.w	r1, [r3], #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <__errno>:
 8004698:	4b01      	ldr	r3, [pc, #4]	@ (80046a0 <__errno+0x8>)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	20000010 	.word	0x20000010

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	4d0d      	ldr	r5, [pc, #52]	@ (80046dc <__libc_init_array+0x38>)
 80046a8:	4c0d      	ldr	r4, [pc, #52]	@ (80046e0 <__libc_init_array+0x3c>)
 80046aa:	1b64      	subs	r4, r4, r5
 80046ac:	10a4      	asrs	r4, r4, #2
 80046ae:	2600      	movs	r6, #0
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	4d0b      	ldr	r5, [pc, #44]	@ (80046e4 <__libc_init_array+0x40>)
 80046b6:	4c0c      	ldr	r4, [pc, #48]	@ (80046e8 <__libc_init_array+0x44>)
 80046b8:	f000 fc66 	bl	8004f88 <_init>
 80046bc:	1b64      	subs	r4, r4, r5
 80046be:	10a4      	asrs	r4, r4, #2
 80046c0:	2600      	movs	r6, #0
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	08005008 	.word	0x08005008
 80046e0:	08005008 	.word	0x08005008
 80046e4:	08005008 	.word	0x08005008
 80046e8:	0800500c 	.word	0x0800500c

080046ec <__retarget_lock_acquire_recursive>:
 80046ec:	4770      	bx	lr

080046ee <__retarget_lock_release_recursive>:
 80046ee:	4770      	bx	lr

080046f0 <_free_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4605      	mov	r5, r0
 80046f4:	2900      	cmp	r1, #0
 80046f6:	d041      	beq.n	800477c <_free_r+0x8c>
 80046f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046fc:	1f0c      	subs	r4, r1, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bfb8      	it	lt
 8004702:	18e4      	addlt	r4, r4, r3
 8004704:	f000 f8e0 	bl	80048c8 <__malloc_lock>
 8004708:	4a1d      	ldr	r2, [pc, #116]	@ (8004780 <_free_r+0x90>)
 800470a:	6813      	ldr	r3, [r2, #0]
 800470c:	b933      	cbnz	r3, 800471c <_free_r+0x2c>
 800470e:	6063      	str	r3, [r4, #4]
 8004710:	6014      	str	r4, [r2, #0]
 8004712:	4628      	mov	r0, r5
 8004714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004718:	f000 b8dc 	b.w	80048d4 <__malloc_unlock>
 800471c:	42a3      	cmp	r3, r4
 800471e:	d908      	bls.n	8004732 <_free_r+0x42>
 8004720:	6820      	ldr	r0, [r4, #0]
 8004722:	1821      	adds	r1, r4, r0
 8004724:	428b      	cmp	r3, r1
 8004726:	bf01      	itttt	eq
 8004728:	6819      	ldreq	r1, [r3, #0]
 800472a:	685b      	ldreq	r3, [r3, #4]
 800472c:	1809      	addeq	r1, r1, r0
 800472e:	6021      	streq	r1, [r4, #0]
 8004730:	e7ed      	b.n	800470e <_free_r+0x1e>
 8004732:	461a      	mov	r2, r3
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	b10b      	cbz	r3, 800473c <_free_r+0x4c>
 8004738:	42a3      	cmp	r3, r4
 800473a:	d9fa      	bls.n	8004732 <_free_r+0x42>
 800473c:	6811      	ldr	r1, [r2, #0]
 800473e:	1850      	adds	r0, r2, r1
 8004740:	42a0      	cmp	r0, r4
 8004742:	d10b      	bne.n	800475c <_free_r+0x6c>
 8004744:	6820      	ldr	r0, [r4, #0]
 8004746:	4401      	add	r1, r0
 8004748:	1850      	adds	r0, r2, r1
 800474a:	4283      	cmp	r3, r0
 800474c:	6011      	str	r1, [r2, #0]
 800474e:	d1e0      	bne.n	8004712 <_free_r+0x22>
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	6053      	str	r3, [r2, #4]
 8004756:	4408      	add	r0, r1
 8004758:	6010      	str	r0, [r2, #0]
 800475a:	e7da      	b.n	8004712 <_free_r+0x22>
 800475c:	d902      	bls.n	8004764 <_free_r+0x74>
 800475e:	230c      	movs	r3, #12
 8004760:	602b      	str	r3, [r5, #0]
 8004762:	e7d6      	b.n	8004712 <_free_r+0x22>
 8004764:	6820      	ldr	r0, [r4, #0]
 8004766:	1821      	adds	r1, r4, r0
 8004768:	428b      	cmp	r3, r1
 800476a:	bf04      	itt	eq
 800476c:	6819      	ldreq	r1, [r3, #0]
 800476e:	685b      	ldreq	r3, [r3, #4]
 8004770:	6063      	str	r3, [r4, #4]
 8004772:	bf04      	itt	eq
 8004774:	1809      	addeq	r1, r1, r0
 8004776:	6021      	streq	r1, [r4, #0]
 8004778:	6054      	str	r4, [r2, #4]
 800477a:	e7ca      	b.n	8004712 <_free_r+0x22>
 800477c:	bd38      	pop	{r3, r4, r5, pc}
 800477e:	bf00      	nop
 8004780:	200003d4 	.word	0x200003d4

08004784 <sbrk_aligned>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4e0f      	ldr	r6, [pc, #60]	@ (80047c4 <sbrk_aligned+0x40>)
 8004788:	460c      	mov	r4, r1
 800478a:	6831      	ldr	r1, [r6, #0]
 800478c:	4605      	mov	r5, r0
 800478e:	b911      	cbnz	r1, 8004796 <sbrk_aligned+0x12>
 8004790:	f000 fba6 	bl	8004ee0 <_sbrk_r>
 8004794:	6030      	str	r0, [r6, #0]
 8004796:	4621      	mov	r1, r4
 8004798:	4628      	mov	r0, r5
 800479a:	f000 fba1 	bl	8004ee0 <_sbrk_r>
 800479e:	1c43      	adds	r3, r0, #1
 80047a0:	d103      	bne.n	80047aa <sbrk_aligned+0x26>
 80047a2:	f04f 34ff 	mov.w	r4, #4294967295
 80047a6:	4620      	mov	r0, r4
 80047a8:	bd70      	pop	{r4, r5, r6, pc}
 80047aa:	1cc4      	adds	r4, r0, #3
 80047ac:	f024 0403 	bic.w	r4, r4, #3
 80047b0:	42a0      	cmp	r0, r4
 80047b2:	d0f8      	beq.n	80047a6 <sbrk_aligned+0x22>
 80047b4:	1a21      	subs	r1, r4, r0
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 fb92 	bl	8004ee0 <_sbrk_r>
 80047bc:	3001      	adds	r0, #1
 80047be:	d1f2      	bne.n	80047a6 <sbrk_aligned+0x22>
 80047c0:	e7ef      	b.n	80047a2 <sbrk_aligned+0x1e>
 80047c2:	bf00      	nop
 80047c4:	200003d0 	.word	0x200003d0

080047c8 <_malloc_r>:
 80047c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047cc:	1ccd      	adds	r5, r1, #3
 80047ce:	f025 0503 	bic.w	r5, r5, #3
 80047d2:	3508      	adds	r5, #8
 80047d4:	2d0c      	cmp	r5, #12
 80047d6:	bf38      	it	cc
 80047d8:	250c      	movcc	r5, #12
 80047da:	2d00      	cmp	r5, #0
 80047dc:	4606      	mov	r6, r0
 80047de:	db01      	blt.n	80047e4 <_malloc_r+0x1c>
 80047e0:	42a9      	cmp	r1, r5
 80047e2:	d904      	bls.n	80047ee <_malloc_r+0x26>
 80047e4:	230c      	movs	r3, #12
 80047e6:	6033      	str	r3, [r6, #0]
 80047e8:	2000      	movs	r0, #0
 80047ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048c4 <_malloc_r+0xfc>
 80047f2:	f000 f869 	bl	80048c8 <__malloc_lock>
 80047f6:	f8d8 3000 	ldr.w	r3, [r8]
 80047fa:	461c      	mov	r4, r3
 80047fc:	bb44      	cbnz	r4, 8004850 <_malloc_r+0x88>
 80047fe:	4629      	mov	r1, r5
 8004800:	4630      	mov	r0, r6
 8004802:	f7ff ffbf 	bl	8004784 <sbrk_aligned>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	4604      	mov	r4, r0
 800480a:	d158      	bne.n	80048be <_malloc_r+0xf6>
 800480c:	f8d8 4000 	ldr.w	r4, [r8]
 8004810:	4627      	mov	r7, r4
 8004812:	2f00      	cmp	r7, #0
 8004814:	d143      	bne.n	800489e <_malloc_r+0xd6>
 8004816:	2c00      	cmp	r4, #0
 8004818:	d04b      	beq.n	80048b2 <_malloc_r+0xea>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	4639      	mov	r1, r7
 800481e:	4630      	mov	r0, r6
 8004820:	eb04 0903 	add.w	r9, r4, r3
 8004824:	f000 fb5c 	bl	8004ee0 <_sbrk_r>
 8004828:	4581      	cmp	r9, r0
 800482a:	d142      	bne.n	80048b2 <_malloc_r+0xea>
 800482c:	6821      	ldr	r1, [r4, #0]
 800482e:	1a6d      	subs	r5, r5, r1
 8004830:	4629      	mov	r1, r5
 8004832:	4630      	mov	r0, r6
 8004834:	f7ff ffa6 	bl	8004784 <sbrk_aligned>
 8004838:	3001      	adds	r0, #1
 800483a:	d03a      	beq.n	80048b2 <_malloc_r+0xea>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	442b      	add	r3, r5
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	f8d8 3000 	ldr.w	r3, [r8]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	bb62      	cbnz	r2, 80048a4 <_malloc_r+0xdc>
 800484a:	f8c8 7000 	str.w	r7, [r8]
 800484e:	e00f      	b.n	8004870 <_malloc_r+0xa8>
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	1b52      	subs	r2, r2, r5
 8004854:	d420      	bmi.n	8004898 <_malloc_r+0xd0>
 8004856:	2a0b      	cmp	r2, #11
 8004858:	d917      	bls.n	800488a <_malloc_r+0xc2>
 800485a:	1961      	adds	r1, r4, r5
 800485c:	42a3      	cmp	r3, r4
 800485e:	6025      	str	r5, [r4, #0]
 8004860:	bf18      	it	ne
 8004862:	6059      	strne	r1, [r3, #4]
 8004864:	6863      	ldr	r3, [r4, #4]
 8004866:	bf08      	it	eq
 8004868:	f8c8 1000 	streq.w	r1, [r8]
 800486c:	5162      	str	r2, [r4, r5]
 800486e:	604b      	str	r3, [r1, #4]
 8004870:	4630      	mov	r0, r6
 8004872:	f000 f82f 	bl	80048d4 <__malloc_unlock>
 8004876:	f104 000b 	add.w	r0, r4, #11
 800487a:	1d23      	adds	r3, r4, #4
 800487c:	f020 0007 	bic.w	r0, r0, #7
 8004880:	1ac2      	subs	r2, r0, r3
 8004882:	bf1c      	itt	ne
 8004884:	1a1b      	subne	r3, r3, r0
 8004886:	50a3      	strne	r3, [r4, r2]
 8004888:	e7af      	b.n	80047ea <_malloc_r+0x22>
 800488a:	6862      	ldr	r2, [r4, #4]
 800488c:	42a3      	cmp	r3, r4
 800488e:	bf0c      	ite	eq
 8004890:	f8c8 2000 	streq.w	r2, [r8]
 8004894:	605a      	strne	r2, [r3, #4]
 8004896:	e7eb      	b.n	8004870 <_malloc_r+0xa8>
 8004898:	4623      	mov	r3, r4
 800489a:	6864      	ldr	r4, [r4, #4]
 800489c:	e7ae      	b.n	80047fc <_malloc_r+0x34>
 800489e:	463c      	mov	r4, r7
 80048a0:	687f      	ldr	r7, [r7, #4]
 80048a2:	e7b6      	b.n	8004812 <_malloc_r+0x4a>
 80048a4:	461a      	mov	r2, r3
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d1fb      	bne.n	80048a4 <_malloc_r+0xdc>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6053      	str	r3, [r2, #4]
 80048b0:	e7de      	b.n	8004870 <_malloc_r+0xa8>
 80048b2:	230c      	movs	r3, #12
 80048b4:	6033      	str	r3, [r6, #0]
 80048b6:	4630      	mov	r0, r6
 80048b8:	f000 f80c 	bl	80048d4 <__malloc_unlock>
 80048bc:	e794      	b.n	80047e8 <_malloc_r+0x20>
 80048be:	6005      	str	r5, [r0, #0]
 80048c0:	e7d6      	b.n	8004870 <_malloc_r+0xa8>
 80048c2:	bf00      	nop
 80048c4:	200003d4 	.word	0x200003d4

080048c8 <__malloc_lock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	@ (80048d0 <__malloc_lock+0x8>)
 80048ca:	f7ff bf0f 	b.w	80046ec <__retarget_lock_acquire_recursive>
 80048ce:	bf00      	nop
 80048d0:	200003cc 	.word	0x200003cc

080048d4 <__malloc_unlock>:
 80048d4:	4801      	ldr	r0, [pc, #4]	@ (80048dc <__malloc_unlock+0x8>)
 80048d6:	f7ff bf0a 	b.w	80046ee <__retarget_lock_release_recursive>
 80048da:	bf00      	nop
 80048dc:	200003cc 	.word	0x200003cc

080048e0 <__ssputs_r>:
 80048e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	688e      	ldr	r6, [r1, #8]
 80048e6:	461f      	mov	r7, r3
 80048e8:	42be      	cmp	r6, r7
 80048ea:	680b      	ldr	r3, [r1, #0]
 80048ec:	4682      	mov	sl, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	4690      	mov	r8, r2
 80048f2:	d82d      	bhi.n	8004950 <__ssputs_r+0x70>
 80048f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048fc:	d026      	beq.n	800494c <__ssputs_r+0x6c>
 80048fe:	6965      	ldr	r5, [r4, #20]
 8004900:	6909      	ldr	r1, [r1, #16]
 8004902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004906:	eba3 0901 	sub.w	r9, r3, r1
 800490a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800490e:	1c7b      	adds	r3, r7, #1
 8004910:	444b      	add	r3, r9
 8004912:	106d      	asrs	r5, r5, #1
 8004914:	429d      	cmp	r5, r3
 8004916:	bf38      	it	cc
 8004918:	461d      	movcc	r5, r3
 800491a:	0553      	lsls	r3, r2, #21
 800491c:	d527      	bpl.n	800496e <__ssputs_r+0x8e>
 800491e:	4629      	mov	r1, r5
 8004920:	f7ff ff52 	bl	80047c8 <_malloc_r>
 8004924:	4606      	mov	r6, r0
 8004926:	b360      	cbz	r0, 8004982 <__ssputs_r+0xa2>
 8004928:	6921      	ldr	r1, [r4, #16]
 800492a:	464a      	mov	r2, r9
 800492c:	f000 fae8 	bl	8004f00 <memcpy>
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800493a:	81a3      	strh	r3, [r4, #12]
 800493c:	6126      	str	r6, [r4, #16]
 800493e:	6165      	str	r5, [r4, #20]
 8004940:	444e      	add	r6, r9
 8004942:	eba5 0509 	sub.w	r5, r5, r9
 8004946:	6026      	str	r6, [r4, #0]
 8004948:	60a5      	str	r5, [r4, #8]
 800494a:	463e      	mov	r6, r7
 800494c:	42be      	cmp	r6, r7
 800494e:	d900      	bls.n	8004952 <__ssputs_r+0x72>
 8004950:	463e      	mov	r6, r7
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	4632      	mov	r2, r6
 8004956:	4641      	mov	r1, r8
 8004958:	f000 faa8 	bl	8004eac <memmove>
 800495c:	68a3      	ldr	r3, [r4, #8]
 800495e:	1b9b      	subs	r3, r3, r6
 8004960:	60a3      	str	r3, [r4, #8]
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	4433      	add	r3, r6
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	2000      	movs	r0, #0
 800496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496e:	462a      	mov	r2, r5
 8004970:	f000 fad4 	bl	8004f1c <_realloc_r>
 8004974:	4606      	mov	r6, r0
 8004976:	2800      	cmp	r0, #0
 8004978:	d1e0      	bne.n	800493c <__ssputs_r+0x5c>
 800497a:	6921      	ldr	r1, [r4, #16]
 800497c:	4650      	mov	r0, sl
 800497e:	f7ff feb7 	bl	80046f0 <_free_r>
 8004982:	230c      	movs	r3, #12
 8004984:	f8ca 3000 	str.w	r3, [sl]
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800498e:	81a3      	strh	r3, [r4, #12]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	e7e9      	b.n	800496a <__ssputs_r+0x8a>
	...

08004998 <_svfiprintf_r>:
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	4698      	mov	r8, r3
 800499e:	898b      	ldrh	r3, [r1, #12]
 80049a0:	061b      	lsls	r3, r3, #24
 80049a2:	b09d      	sub	sp, #116	@ 0x74
 80049a4:	4607      	mov	r7, r0
 80049a6:	460d      	mov	r5, r1
 80049a8:	4614      	mov	r4, r2
 80049aa:	d510      	bpl.n	80049ce <_svfiprintf_r+0x36>
 80049ac:	690b      	ldr	r3, [r1, #16]
 80049ae:	b973      	cbnz	r3, 80049ce <_svfiprintf_r+0x36>
 80049b0:	2140      	movs	r1, #64	@ 0x40
 80049b2:	f7ff ff09 	bl	80047c8 <_malloc_r>
 80049b6:	6028      	str	r0, [r5, #0]
 80049b8:	6128      	str	r0, [r5, #16]
 80049ba:	b930      	cbnz	r0, 80049ca <_svfiprintf_r+0x32>
 80049bc:	230c      	movs	r3, #12
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	b01d      	add	sp, #116	@ 0x74
 80049c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ca:	2340      	movs	r3, #64	@ 0x40
 80049cc:	616b      	str	r3, [r5, #20]
 80049ce:	2300      	movs	r3, #0
 80049d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d2:	2320      	movs	r3, #32
 80049d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80049dc:	2330      	movs	r3, #48	@ 0x30
 80049de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004b7c <_svfiprintf_r+0x1e4>
 80049e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049e6:	f04f 0901 	mov.w	r9, #1
 80049ea:	4623      	mov	r3, r4
 80049ec:	469a      	mov	sl, r3
 80049ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f2:	b10a      	cbz	r2, 80049f8 <_svfiprintf_r+0x60>
 80049f4:	2a25      	cmp	r2, #37	@ 0x25
 80049f6:	d1f9      	bne.n	80049ec <_svfiprintf_r+0x54>
 80049f8:	ebba 0b04 	subs.w	fp, sl, r4
 80049fc:	d00b      	beq.n	8004a16 <_svfiprintf_r+0x7e>
 80049fe:	465b      	mov	r3, fp
 8004a00:	4622      	mov	r2, r4
 8004a02:	4629      	mov	r1, r5
 8004a04:	4638      	mov	r0, r7
 8004a06:	f7ff ff6b 	bl	80048e0 <__ssputs_r>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	f000 80a7 	beq.w	8004b5e <_svfiprintf_r+0x1c6>
 8004a10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a12:	445a      	add	r2, fp
 8004a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a16:	f89a 3000 	ldrb.w	r3, [sl]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 809f 	beq.w	8004b5e <_svfiprintf_r+0x1c6>
 8004a20:	2300      	movs	r3, #0
 8004a22:	f04f 32ff 	mov.w	r2, #4294967295
 8004a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a2a:	f10a 0a01 	add.w	sl, sl, #1
 8004a2e:	9304      	str	r3, [sp, #16]
 8004a30:	9307      	str	r3, [sp, #28]
 8004a32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a36:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a38:	4654      	mov	r4, sl
 8004a3a:	2205      	movs	r2, #5
 8004a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a40:	484e      	ldr	r0, [pc, #312]	@ (8004b7c <_svfiprintf_r+0x1e4>)
 8004a42:	f7fb fbd5 	bl	80001f0 <memchr>
 8004a46:	9a04      	ldr	r2, [sp, #16]
 8004a48:	b9d8      	cbnz	r0, 8004a82 <_svfiprintf_r+0xea>
 8004a4a:	06d0      	lsls	r0, r2, #27
 8004a4c:	bf44      	itt	mi
 8004a4e:	2320      	movmi	r3, #32
 8004a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a54:	0711      	lsls	r1, r2, #28
 8004a56:	bf44      	itt	mi
 8004a58:	232b      	movmi	r3, #43	@ 0x2b
 8004a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a64:	d015      	beq.n	8004a92 <_svfiprintf_r+0xfa>
 8004a66:	9a07      	ldr	r2, [sp, #28]
 8004a68:	4654      	mov	r4, sl
 8004a6a:	2000      	movs	r0, #0
 8004a6c:	f04f 0c0a 	mov.w	ip, #10
 8004a70:	4621      	mov	r1, r4
 8004a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a76:	3b30      	subs	r3, #48	@ 0x30
 8004a78:	2b09      	cmp	r3, #9
 8004a7a:	d94b      	bls.n	8004b14 <_svfiprintf_r+0x17c>
 8004a7c:	b1b0      	cbz	r0, 8004aac <_svfiprintf_r+0x114>
 8004a7e:	9207      	str	r2, [sp, #28]
 8004a80:	e014      	b.n	8004aac <_svfiprintf_r+0x114>
 8004a82:	eba0 0308 	sub.w	r3, r0, r8
 8004a86:	fa09 f303 	lsl.w	r3, r9, r3
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	9304      	str	r3, [sp, #16]
 8004a8e:	46a2      	mov	sl, r4
 8004a90:	e7d2      	b.n	8004a38 <_svfiprintf_r+0xa0>
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	1d19      	adds	r1, r3, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	9103      	str	r1, [sp, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfbb      	ittet	lt
 8004a9e:	425b      	neglt	r3, r3
 8004aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8004aa4:	9307      	strge	r3, [sp, #28]
 8004aa6:	9307      	strlt	r3, [sp, #28]
 8004aa8:	bfb8      	it	lt
 8004aaa:	9204      	strlt	r2, [sp, #16]
 8004aac:	7823      	ldrb	r3, [r4, #0]
 8004aae:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ab0:	d10a      	bne.n	8004ac8 <_svfiprintf_r+0x130>
 8004ab2:	7863      	ldrb	r3, [r4, #1]
 8004ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ab6:	d132      	bne.n	8004b1e <_svfiprintf_r+0x186>
 8004ab8:	9b03      	ldr	r3, [sp, #12]
 8004aba:	1d1a      	adds	r2, r3, #4
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	9203      	str	r2, [sp, #12]
 8004ac0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ac4:	3402      	adds	r4, #2
 8004ac6:	9305      	str	r3, [sp, #20]
 8004ac8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004b8c <_svfiprintf_r+0x1f4>
 8004acc:	7821      	ldrb	r1, [r4, #0]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	f7fb fb8d 	bl	80001f0 <memchr>
 8004ad6:	b138      	cbz	r0, 8004ae8 <_svfiprintf_r+0x150>
 8004ad8:	9b04      	ldr	r3, [sp, #16]
 8004ada:	eba0 000a 	sub.w	r0, r0, sl
 8004ade:	2240      	movs	r2, #64	@ 0x40
 8004ae0:	4082      	lsls	r2, r0
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	3401      	adds	r4, #1
 8004ae6:	9304      	str	r3, [sp, #16]
 8004ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aec:	4824      	ldr	r0, [pc, #144]	@ (8004b80 <_svfiprintf_r+0x1e8>)
 8004aee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004af2:	2206      	movs	r2, #6
 8004af4:	f7fb fb7c 	bl	80001f0 <memchr>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d036      	beq.n	8004b6a <_svfiprintf_r+0x1d2>
 8004afc:	4b21      	ldr	r3, [pc, #132]	@ (8004b84 <_svfiprintf_r+0x1ec>)
 8004afe:	bb1b      	cbnz	r3, 8004b48 <_svfiprintf_r+0x1b0>
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	3307      	adds	r3, #7
 8004b04:	f023 0307 	bic.w	r3, r3, #7
 8004b08:	3308      	adds	r3, #8
 8004b0a:	9303      	str	r3, [sp, #12]
 8004b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b0e:	4433      	add	r3, r6
 8004b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b12:	e76a      	b.n	80049ea <_svfiprintf_r+0x52>
 8004b14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b18:	460c      	mov	r4, r1
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	e7a8      	b.n	8004a70 <_svfiprintf_r+0xd8>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	3401      	adds	r4, #1
 8004b22:	9305      	str	r3, [sp, #20]
 8004b24:	4619      	mov	r1, r3
 8004b26:	f04f 0c0a 	mov.w	ip, #10
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b30:	3a30      	subs	r2, #48	@ 0x30
 8004b32:	2a09      	cmp	r2, #9
 8004b34:	d903      	bls.n	8004b3e <_svfiprintf_r+0x1a6>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0c6      	beq.n	8004ac8 <_svfiprintf_r+0x130>
 8004b3a:	9105      	str	r1, [sp, #20]
 8004b3c:	e7c4      	b.n	8004ac8 <_svfiprintf_r+0x130>
 8004b3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b42:	4604      	mov	r4, r0
 8004b44:	2301      	movs	r3, #1
 8004b46:	e7f0      	b.n	8004b2a <_svfiprintf_r+0x192>
 8004b48:	ab03      	add	r3, sp, #12
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b88 <_svfiprintf_r+0x1f0>)
 8004b50:	a904      	add	r1, sp, #16
 8004b52:	4638      	mov	r0, r7
 8004b54:	f3af 8000 	nop.w
 8004b58:	1c42      	adds	r2, r0, #1
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	d1d6      	bne.n	8004b0c <_svfiprintf_r+0x174>
 8004b5e:	89ab      	ldrh	r3, [r5, #12]
 8004b60:	065b      	lsls	r3, r3, #25
 8004b62:	f53f af2d 	bmi.w	80049c0 <_svfiprintf_r+0x28>
 8004b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b68:	e72c      	b.n	80049c4 <_svfiprintf_r+0x2c>
 8004b6a:	ab03      	add	r3, sp, #12
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	462a      	mov	r2, r5
 8004b70:	4b05      	ldr	r3, [pc, #20]	@ (8004b88 <_svfiprintf_r+0x1f0>)
 8004b72:	a904      	add	r1, sp, #16
 8004b74:	4638      	mov	r0, r7
 8004b76:	f000 f879 	bl	8004c6c <_printf_i>
 8004b7a:	e7ed      	b.n	8004b58 <_svfiprintf_r+0x1c0>
 8004b7c:	08004fcc 	.word	0x08004fcc
 8004b80:	08004fd6 	.word	0x08004fd6
 8004b84:	00000000 	.word	0x00000000
 8004b88:	080048e1 	.word	0x080048e1
 8004b8c:	08004fd2 	.word	0x08004fd2

08004b90 <_printf_common>:
 8004b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	4616      	mov	r6, r2
 8004b96:	4698      	mov	r8, r3
 8004b98:	688a      	ldr	r2, [r1, #8]
 8004b9a:	690b      	ldr	r3, [r1, #16]
 8004b9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	bfb8      	it	lt
 8004ba4:	4613      	movlt	r3, r2
 8004ba6:	6033      	str	r3, [r6, #0]
 8004ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bac:	4607      	mov	r7, r0
 8004bae:	460c      	mov	r4, r1
 8004bb0:	b10a      	cbz	r2, 8004bb6 <_printf_common+0x26>
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	0699      	lsls	r1, r3, #26
 8004bba:	bf42      	ittt	mi
 8004bbc:	6833      	ldrmi	r3, [r6, #0]
 8004bbe:	3302      	addmi	r3, #2
 8004bc0:	6033      	strmi	r3, [r6, #0]
 8004bc2:	6825      	ldr	r5, [r4, #0]
 8004bc4:	f015 0506 	ands.w	r5, r5, #6
 8004bc8:	d106      	bne.n	8004bd8 <_printf_common+0x48>
 8004bca:	f104 0a19 	add.w	sl, r4, #25
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	6832      	ldr	r2, [r6, #0]
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dc26      	bgt.n	8004c26 <_printf_common+0x96>
 8004bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	3b00      	subs	r3, #0
 8004be0:	bf18      	it	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	0692      	lsls	r2, r2, #26
 8004be6:	d42b      	bmi.n	8004c40 <_printf_common+0xb0>
 8004be8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bec:	4641      	mov	r1, r8
 8004bee:	4638      	mov	r0, r7
 8004bf0:	47c8      	blx	r9
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d01e      	beq.n	8004c34 <_printf_common+0xa4>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	6922      	ldr	r2, [r4, #16]
 8004bfa:	f003 0306 	and.w	r3, r3, #6
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	bf02      	ittt	eq
 8004c02:	68e5      	ldreq	r5, [r4, #12]
 8004c04:	6833      	ldreq	r3, [r6, #0]
 8004c06:	1aed      	subeq	r5, r5, r3
 8004c08:	68a3      	ldr	r3, [r4, #8]
 8004c0a:	bf0c      	ite	eq
 8004c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c10:	2500      	movne	r5, #0
 8004c12:	4293      	cmp	r3, r2
 8004c14:	bfc4      	itt	gt
 8004c16:	1a9b      	subgt	r3, r3, r2
 8004c18:	18ed      	addgt	r5, r5, r3
 8004c1a:	2600      	movs	r6, #0
 8004c1c:	341a      	adds	r4, #26
 8004c1e:	42b5      	cmp	r5, r6
 8004c20:	d11a      	bne.n	8004c58 <_printf_common+0xc8>
 8004c22:	2000      	movs	r0, #0
 8004c24:	e008      	b.n	8004c38 <_printf_common+0xa8>
 8004c26:	2301      	movs	r3, #1
 8004c28:	4652      	mov	r2, sl
 8004c2a:	4641      	mov	r1, r8
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	47c8      	blx	r9
 8004c30:	3001      	adds	r0, #1
 8004c32:	d103      	bne.n	8004c3c <_printf_common+0xac>
 8004c34:	f04f 30ff 	mov.w	r0, #4294967295
 8004c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	e7c6      	b.n	8004bce <_printf_common+0x3e>
 8004c40:	18e1      	adds	r1, r4, r3
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	2030      	movs	r0, #48	@ 0x30
 8004c46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c4a:	4422      	add	r2, r4
 8004c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c54:	3302      	adds	r3, #2
 8004c56:	e7c7      	b.n	8004be8 <_printf_common+0x58>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	4638      	mov	r0, r7
 8004c60:	47c8      	blx	r9
 8004c62:	3001      	adds	r0, #1
 8004c64:	d0e6      	beq.n	8004c34 <_printf_common+0xa4>
 8004c66:	3601      	adds	r6, #1
 8004c68:	e7d9      	b.n	8004c1e <_printf_common+0x8e>
	...

08004c6c <_printf_i>:
 8004c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c70:	7e0f      	ldrb	r7, [r1, #24]
 8004c72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c74:	2f78      	cmp	r7, #120	@ 0x78
 8004c76:	4691      	mov	r9, r2
 8004c78:	4680      	mov	r8, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	469a      	mov	sl, r3
 8004c7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c82:	d807      	bhi.n	8004c94 <_printf_i+0x28>
 8004c84:	2f62      	cmp	r7, #98	@ 0x62
 8004c86:	d80a      	bhi.n	8004c9e <_printf_i+0x32>
 8004c88:	2f00      	cmp	r7, #0
 8004c8a:	f000 80d2 	beq.w	8004e32 <_printf_i+0x1c6>
 8004c8e:	2f58      	cmp	r7, #88	@ 0x58
 8004c90:	f000 80b9 	beq.w	8004e06 <_printf_i+0x19a>
 8004c94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c9c:	e03a      	b.n	8004d14 <_printf_i+0xa8>
 8004c9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ca2:	2b15      	cmp	r3, #21
 8004ca4:	d8f6      	bhi.n	8004c94 <_printf_i+0x28>
 8004ca6:	a101      	add	r1, pc, #4	@ (adr r1, 8004cac <_printf_i+0x40>)
 8004ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cac:	08004d05 	.word	0x08004d05
 8004cb0:	08004d19 	.word	0x08004d19
 8004cb4:	08004c95 	.word	0x08004c95
 8004cb8:	08004c95 	.word	0x08004c95
 8004cbc:	08004c95 	.word	0x08004c95
 8004cc0:	08004c95 	.word	0x08004c95
 8004cc4:	08004d19 	.word	0x08004d19
 8004cc8:	08004c95 	.word	0x08004c95
 8004ccc:	08004c95 	.word	0x08004c95
 8004cd0:	08004c95 	.word	0x08004c95
 8004cd4:	08004c95 	.word	0x08004c95
 8004cd8:	08004e19 	.word	0x08004e19
 8004cdc:	08004d43 	.word	0x08004d43
 8004ce0:	08004dd3 	.word	0x08004dd3
 8004ce4:	08004c95 	.word	0x08004c95
 8004ce8:	08004c95 	.word	0x08004c95
 8004cec:	08004e3b 	.word	0x08004e3b
 8004cf0:	08004c95 	.word	0x08004c95
 8004cf4:	08004d43 	.word	0x08004d43
 8004cf8:	08004c95 	.word	0x08004c95
 8004cfc:	08004c95 	.word	0x08004c95
 8004d00:	08004ddb 	.word	0x08004ddb
 8004d04:	6833      	ldr	r3, [r6, #0]
 8004d06:	1d1a      	adds	r2, r3, #4
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6032      	str	r2, [r6, #0]
 8004d0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d14:	2301      	movs	r3, #1
 8004d16:	e09d      	b.n	8004e54 <_printf_i+0x1e8>
 8004d18:	6833      	ldr	r3, [r6, #0]
 8004d1a:	6820      	ldr	r0, [r4, #0]
 8004d1c:	1d19      	adds	r1, r3, #4
 8004d1e:	6031      	str	r1, [r6, #0]
 8004d20:	0606      	lsls	r6, r0, #24
 8004d22:	d501      	bpl.n	8004d28 <_printf_i+0xbc>
 8004d24:	681d      	ldr	r5, [r3, #0]
 8004d26:	e003      	b.n	8004d30 <_printf_i+0xc4>
 8004d28:	0645      	lsls	r5, r0, #25
 8004d2a:	d5fb      	bpl.n	8004d24 <_printf_i+0xb8>
 8004d2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d30:	2d00      	cmp	r5, #0
 8004d32:	da03      	bge.n	8004d3c <_printf_i+0xd0>
 8004d34:	232d      	movs	r3, #45	@ 0x2d
 8004d36:	426d      	negs	r5, r5
 8004d38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d3c:	4859      	ldr	r0, [pc, #356]	@ (8004ea4 <_printf_i+0x238>)
 8004d3e:	230a      	movs	r3, #10
 8004d40:	e011      	b.n	8004d66 <_printf_i+0xfa>
 8004d42:	6821      	ldr	r1, [r4, #0]
 8004d44:	6833      	ldr	r3, [r6, #0]
 8004d46:	0608      	lsls	r0, r1, #24
 8004d48:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d4c:	d402      	bmi.n	8004d54 <_printf_i+0xe8>
 8004d4e:	0649      	lsls	r1, r1, #25
 8004d50:	bf48      	it	mi
 8004d52:	b2ad      	uxthmi	r5, r5
 8004d54:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d56:	4853      	ldr	r0, [pc, #332]	@ (8004ea4 <_printf_i+0x238>)
 8004d58:	6033      	str	r3, [r6, #0]
 8004d5a:	bf14      	ite	ne
 8004d5c:	230a      	movne	r3, #10
 8004d5e:	2308      	moveq	r3, #8
 8004d60:	2100      	movs	r1, #0
 8004d62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d66:	6866      	ldr	r6, [r4, #4]
 8004d68:	60a6      	str	r6, [r4, #8]
 8004d6a:	2e00      	cmp	r6, #0
 8004d6c:	bfa2      	ittt	ge
 8004d6e:	6821      	ldrge	r1, [r4, #0]
 8004d70:	f021 0104 	bicge.w	r1, r1, #4
 8004d74:	6021      	strge	r1, [r4, #0]
 8004d76:	b90d      	cbnz	r5, 8004d7c <_printf_i+0x110>
 8004d78:	2e00      	cmp	r6, #0
 8004d7a:	d04b      	beq.n	8004e14 <_printf_i+0x1a8>
 8004d7c:	4616      	mov	r6, r2
 8004d7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d82:	fb03 5711 	mls	r7, r3, r1, r5
 8004d86:	5dc7      	ldrb	r7, [r0, r7]
 8004d88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d8c:	462f      	mov	r7, r5
 8004d8e:	42bb      	cmp	r3, r7
 8004d90:	460d      	mov	r5, r1
 8004d92:	d9f4      	bls.n	8004d7e <_printf_i+0x112>
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d10b      	bne.n	8004db0 <_printf_i+0x144>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	07df      	lsls	r7, r3, #31
 8004d9c:	d508      	bpl.n	8004db0 <_printf_i+0x144>
 8004d9e:	6923      	ldr	r3, [r4, #16]
 8004da0:	6861      	ldr	r1, [r4, #4]
 8004da2:	4299      	cmp	r1, r3
 8004da4:	bfde      	ittt	le
 8004da6:	2330      	movle	r3, #48	@ 0x30
 8004da8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004db0:	1b92      	subs	r2, r2, r6
 8004db2:	6122      	str	r2, [r4, #16]
 8004db4:	f8cd a000 	str.w	sl, [sp]
 8004db8:	464b      	mov	r3, r9
 8004dba:	aa03      	add	r2, sp, #12
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	f7ff fee6 	bl	8004b90 <_printf_common>
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d14a      	bne.n	8004e5e <_printf_i+0x1f2>
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dcc:	b004      	add	sp, #16
 8004dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd2:	6823      	ldr	r3, [r4, #0]
 8004dd4:	f043 0320 	orr.w	r3, r3, #32
 8004dd8:	6023      	str	r3, [r4, #0]
 8004dda:	4833      	ldr	r0, [pc, #204]	@ (8004ea8 <_printf_i+0x23c>)
 8004ddc:	2778      	movs	r7, #120	@ 0x78
 8004dde:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	6831      	ldr	r1, [r6, #0]
 8004de6:	061f      	lsls	r7, r3, #24
 8004de8:	f851 5b04 	ldr.w	r5, [r1], #4
 8004dec:	d402      	bmi.n	8004df4 <_printf_i+0x188>
 8004dee:	065f      	lsls	r7, r3, #25
 8004df0:	bf48      	it	mi
 8004df2:	b2ad      	uxthmi	r5, r5
 8004df4:	6031      	str	r1, [r6, #0]
 8004df6:	07d9      	lsls	r1, r3, #31
 8004df8:	bf44      	itt	mi
 8004dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8004dfe:	6023      	strmi	r3, [r4, #0]
 8004e00:	b11d      	cbz	r5, 8004e0a <_printf_i+0x19e>
 8004e02:	2310      	movs	r3, #16
 8004e04:	e7ac      	b.n	8004d60 <_printf_i+0xf4>
 8004e06:	4827      	ldr	r0, [pc, #156]	@ (8004ea4 <_printf_i+0x238>)
 8004e08:	e7e9      	b.n	8004dde <_printf_i+0x172>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	f023 0320 	bic.w	r3, r3, #32
 8004e10:	6023      	str	r3, [r4, #0]
 8004e12:	e7f6      	b.n	8004e02 <_printf_i+0x196>
 8004e14:	4616      	mov	r6, r2
 8004e16:	e7bd      	b.n	8004d94 <_printf_i+0x128>
 8004e18:	6833      	ldr	r3, [r6, #0]
 8004e1a:	6825      	ldr	r5, [r4, #0]
 8004e1c:	6961      	ldr	r1, [r4, #20]
 8004e1e:	1d18      	adds	r0, r3, #4
 8004e20:	6030      	str	r0, [r6, #0]
 8004e22:	062e      	lsls	r6, r5, #24
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	d501      	bpl.n	8004e2c <_printf_i+0x1c0>
 8004e28:	6019      	str	r1, [r3, #0]
 8004e2a:	e002      	b.n	8004e32 <_printf_i+0x1c6>
 8004e2c:	0668      	lsls	r0, r5, #25
 8004e2e:	d5fb      	bpl.n	8004e28 <_printf_i+0x1bc>
 8004e30:	8019      	strh	r1, [r3, #0]
 8004e32:	2300      	movs	r3, #0
 8004e34:	6123      	str	r3, [r4, #16]
 8004e36:	4616      	mov	r6, r2
 8004e38:	e7bc      	b.n	8004db4 <_printf_i+0x148>
 8004e3a:	6833      	ldr	r3, [r6, #0]
 8004e3c:	1d1a      	adds	r2, r3, #4
 8004e3e:	6032      	str	r2, [r6, #0]
 8004e40:	681e      	ldr	r6, [r3, #0]
 8004e42:	6862      	ldr	r2, [r4, #4]
 8004e44:	2100      	movs	r1, #0
 8004e46:	4630      	mov	r0, r6
 8004e48:	f7fb f9d2 	bl	80001f0 <memchr>
 8004e4c:	b108      	cbz	r0, 8004e52 <_printf_i+0x1e6>
 8004e4e:	1b80      	subs	r0, r0, r6
 8004e50:	6060      	str	r0, [r4, #4]
 8004e52:	6863      	ldr	r3, [r4, #4]
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	2300      	movs	r3, #0
 8004e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e5c:	e7aa      	b.n	8004db4 <_printf_i+0x148>
 8004e5e:	6923      	ldr	r3, [r4, #16]
 8004e60:	4632      	mov	r2, r6
 8004e62:	4649      	mov	r1, r9
 8004e64:	4640      	mov	r0, r8
 8004e66:	47d0      	blx	sl
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d0ad      	beq.n	8004dc8 <_printf_i+0x15c>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	079b      	lsls	r3, r3, #30
 8004e70:	d413      	bmi.n	8004e9a <_printf_i+0x22e>
 8004e72:	68e0      	ldr	r0, [r4, #12]
 8004e74:	9b03      	ldr	r3, [sp, #12]
 8004e76:	4298      	cmp	r0, r3
 8004e78:	bfb8      	it	lt
 8004e7a:	4618      	movlt	r0, r3
 8004e7c:	e7a6      	b.n	8004dcc <_printf_i+0x160>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	4632      	mov	r2, r6
 8004e82:	4649      	mov	r1, r9
 8004e84:	4640      	mov	r0, r8
 8004e86:	47d0      	blx	sl
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d09d      	beq.n	8004dc8 <_printf_i+0x15c>
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	68e3      	ldr	r3, [r4, #12]
 8004e90:	9903      	ldr	r1, [sp, #12]
 8004e92:	1a5b      	subs	r3, r3, r1
 8004e94:	42ab      	cmp	r3, r5
 8004e96:	dcf2      	bgt.n	8004e7e <_printf_i+0x212>
 8004e98:	e7eb      	b.n	8004e72 <_printf_i+0x206>
 8004e9a:	2500      	movs	r5, #0
 8004e9c:	f104 0619 	add.w	r6, r4, #25
 8004ea0:	e7f5      	b.n	8004e8e <_printf_i+0x222>
 8004ea2:	bf00      	nop
 8004ea4:	08004fdd 	.word	0x08004fdd
 8004ea8:	08004fee 	.word	0x08004fee

08004eac <memmove>:
 8004eac:	4288      	cmp	r0, r1
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	eb01 0402 	add.w	r4, r1, r2
 8004eb4:	d902      	bls.n	8004ebc <memmove+0x10>
 8004eb6:	4284      	cmp	r4, r0
 8004eb8:	4623      	mov	r3, r4
 8004eba:	d807      	bhi.n	8004ecc <memmove+0x20>
 8004ebc:	1e43      	subs	r3, r0, #1
 8004ebe:	42a1      	cmp	r1, r4
 8004ec0:	d008      	beq.n	8004ed4 <memmove+0x28>
 8004ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004eca:	e7f8      	b.n	8004ebe <memmove+0x12>
 8004ecc:	4402      	add	r2, r0
 8004ece:	4601      	mov	r1, r0
 8004ed0:	428a      	cmp	r2, r1
 8004ed2:	d100      	bne.n	8004ed6 <memmove+0x2a>
 8004ed4:	bd10      	pop	{r4, pc}
 8004ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ede:	e7f7      	b.n	8004ed0 <memmove+0x24>

08004ee0 <_sbrk_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d06      	ldr	r5, [pc, #24]	@ (8004efc <_sbrk_r+0x1c>)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	4608      	mov	r0, r1
 8004eea:	602b      	str	r3, [r5, #0]
 8004eec:	f7fc fbb8 	bl	8001660 <_sbrk>
 8004ef0:	1c43      	adds	r3, r0, #1
 8004ef2:	d102      	bne.n	8004efa <_sbrk_r+0x1a>
 8004ef4:	682b      	ldr	r3, [r5, #0]
 8004ef6:	b103      	cbz	r3, 8004efa <_sbrk_r+0x1a>
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	bd38      	pop	{r3, r4, r5, pc}
 8004efc:	200003c8 	.word	0x200003c8

08004f00 <memcpy>:
 8004f00:	440a      	add	r2, r1
 8004f02:	4291      	cmp	r1, r2
 8004f04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f08:	d100      	bne.n	8004f0c <memcpy+0xc>
 8004f0a:	4770      	bx	lr
 8004f0c:	b510      	push	{r4, lr}
 8004f0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f16:	4291      	cmp	r1, r2
 8004f18:	d1f9      	bne.n	8004f0e <memcpy+0xe>
 8004f1a:	bd10      	pop	{r4, pc}

08004f1c <_realloc_r>:
 8004f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f20:	4680      	mov	r8, r0
 8004f22:	4615      	mov	r5, r2
 8004f24:	460c      	mov	r4, r1
 8004f26:	b921      	cbnz	r1, 8004f32 <_realloc_r+0x16>
 8004f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f2c:	4611      	mov	r1, r2
 8004f2e:	f7ff bc4b 	b.w	80047c8 <_malloc_r>
 8004f32:	b92a      	cbnz	r2, 8004f40 <_realloc_r+0x24>
 8004f34:	f7ff fbdc 	bl	80046f0 <_free_r>
 8004f38:	2400      	movs	r4, #0
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f40:	f000 f81a 	bl	8004f78 <_malloc_usable_size_r>
 8004f44:	4285      	cmp	r5, r0
 8004f46:	4606      	mov	r6, r0
 8004f48:	d802      	bhi.n	8004f50 <_realloc_r+0x34>
 8004f4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f4e:	d8f4      	bhi.n	8004f3a <_realloc_r+0x1e>
 8004f50:	4629      	mov	r1, r5
 8004f52:	4640      	mov	r0, r8
 8004f54:	f7ff fc38 	bl	80047c8 <_malloc_r>
 8004f58:	4607      	mov	r7, r0
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d0ec      	beq.n	8004f38 <_realloc_r+0x1c>
 8004f5e:	42b5      	cmp	r5, r6
 8004f60:	462a      	mov	r2, r5
 8004f62:	4621      	mov	r1, r4
 8004f64:	bf28      	it	cs
 8004f66:	4632      	movcs	r2, r6
 8004f68:	f7ff ffca 	bl	8004f00 <memcpy>
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4640      	mov	r0, r8
 8004f70:	f7ff fbbe 	bl	80046f0 <_free_r>
 8004f74:	463c      	mov	r4, r7
 8004f76:	e7e0      	b.n	8004f3a <_realloc_r+0x1e>

08004f78 <_malloc_usable_size_r>:
 8004f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f7c:	1f18      	subs	r0, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bfbc      	itt	lt
 8004f82:	580b      	ldrlt	r3, [r1, r0]
 8004f84:	18c0      	addlt	r0, r0, r3
 8004f86:	4770      	bx	lr

08004f88 <_init>:
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	bf00      	nop
 8004f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8e:	bc08      	pop	{r3}
 8004f90:	469e      	mov	lr, r3
 8004f92:	4770      	bx	lr

08004f94 <_fini>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr
