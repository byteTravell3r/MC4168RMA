
MC4128RMA_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044dc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004688  08004688  00005688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a0  080046a0  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  080046a0  080046a0  000056a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046a8  080046a8  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a8  080046a8  000056a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046ac  080046ac  000056ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080046b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          000002c0  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002d0  200002d0  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c687  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002313  00000000  00000000  000126c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  000149e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074d  00000000  00000000  00015388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023755  00000000  00000000  00015ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d008  00000000  00000000  0003922a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3238  00000000  00000000  00046232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011946a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002608  00000000  00000000  001194b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0011bab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004670 	.word	0x08004670

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08004670 	.word	0x08004670

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <CAN1_START_IRQ>:

static uint32_t TxMailbox = CAN_TX_MAILBOX0;
static CAN_TxHeaderTypeDef TxHeader;
static uint8_t TxData[8];

void CAN1_START_IRQ() {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80004e0:	480f      	ldr	r0, [pc, #60]	@ (8000520 <CAN1_START_IRQ+0x44>)
 80004e2:	f001 fb7d 	bl	8001be0 <HAL_CAN_Start>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <CAN1_START_IRQ+0x14>
		Error_Handler();
 80004ec:	f000 ff6c 	bl	80013c8 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 80004f0:	2104      	movs	r1, #4
 80004f2:	480b      	ldr	r0, [pc, #44]	@ (8000520 <CAN1_START_IRQ+0x44>)
 80004f4:	f001 fdaa 	bl	800204c <HAL_CAN_ActivateNotification>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <CAN1_START_IRQ+0x26>
		Error_Handler();
 80004fe:	f000 ff63 	bl	80013c8 <Error_Handler>
	}

	TxHeader.StdId = ADDR_3508_SET_ID0;
 8000502:	4b08      	ldr	r3, [pc, #32]	@ (8000524 <CAN1_START_IRQ+0x48>)
 8000504:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000508:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <CAN1_START_IRQ+0x48>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000510:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <CAN1_START_IRQ+0x48>)
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 0x08;
 8000516:	4b03      	ldr	r3, [pc, #12]	@ (8000524 <CAN1_START_IRQ+0x48>)
 8000518:	2208      	movs	r2, #8
 800051a:	611a      	str	r2, [r3, #16]
}
 800051c:	bf00      	nop
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000244 	.word	0x20000244
 8000524:	20000064 	.word	0x20000064

08000528 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000536:	4825      	ldr	r0, [pc, #148]	@ (80005cc <HAL_CAN_RxFifo0FullCallback+0xa4>)
 8000538:	f002 fb4a 	bl	8002bd0 <HAL_GPIO_WritePin>
	static uint8_t RxData[8];
	static CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800053c:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 800053e:	4a25      	ldr	r2, [pc, #148]	@ (80005d4 <HAL_CAN_RxFifo0FullCallback+0xac>)
 8000540:	2100      	movs	r1, #0
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f001 fc60 	bl	8001e08 <HAL_CAN_GetRxMessage>
	uint32_t ID_NUM;
	ID_NUM = RxHeader.StdId - ADDR_3508_GET_ID1;
 8000548:	4b22      	ldr	r3, [pc, #136]	@ (80005d4 <HAL_CAN_RxFifo0FullCallback+0xac>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000550:	60fb      	str	r3, [r7, #12]
	if (ID_NUM == MotorX || ID_NUM == MotorY) {
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <HAL_CAN_RxFifo0FullCallback+0x36>
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d12b      	bne.n	80005b6 <HAL_CAN_RxFifo0FullCallback+0x8e>
		if (Motor[ID_NUM].MSG_COUNT++ <= 50) {
 800055e:	491e      	ldr	r1, [pc, #120]	@ (80005d8 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000560:	68fa      	ldr	r2, [r7, #12]
 8000562:	4613      	mov	r3, r2
 8000564:	00db      	lsls	r3, r3, #3
 8000566:	1a9b      	subs	r3, r3, r2
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	440b      	add	r3, r1
 800056c:	3318      	adds	r3, #24
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	1c50      	adds	r0, r2, #1
 8000572:	4c19      	ldr	r4, [pc, #100]	@ (80005d8 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000574:	68f9      	ldr	r1, [r7, #12]
 8000576:	460b      	mov	r3, r1
 8000578:	00db      	lsls	r3, r3, #3
 800057a:	1a5b      	subs	r3, r3, r1
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	4423      	add	r3, r4
 8000580:	3318      	adds	r3, #24
 8000582:	6018      	str	r0, [r3, #0]
 8000584:	2a32      	cmp	r2, #50	@ 0x32
 8000586:	d80b      	bhi.n	80005a0 <HAL_CAN_RxFifo0FullCallback+0x78>
			Motor_GetInitPosition(&Motor[ID_NUM], RxData);
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	4613      	mov	r3, r2
 800058c:	00db      	lsls	r3, r3, #3
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4a11      	ldr	r2, [pc, #68]	@ (80005d8 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000594:	4413      	add	r3, r2
 8000596:	490e      	ldr	r1, [pc, #56]	@ (80005d0 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 8000598:	4618      	mov	r0, r3
 800059a:	f000 f88b 	bl	80006b4 <Motor_GetInitPosition>
 800059e:	e00a      	b.n	80005b6 <HAL_CAN_RxFifo0FullCallback+0x8e>
		} else
			Motor_ResolveFeedbackData(&Motor[ID_NUM], RxData);
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	4613      	mov	r3, r2
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 80005ac:	4413      	add	r3, r2
 80005ae:	4908      	ldr	r1, [pc, #32]	@ (80005d0 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f813 	bl	80005dc <Motor_ResolveFeedbackData>
	}
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <HAL_CAN_RxFifo0FullCallback+0xa4>)
 80005be:	f002 fb07 	bl	8002bd0 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd90      	pop	{r4, r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40021800 	.word	0x40021800
 80005d0:	200000a0 	.word	0x200000a0
 80005d4:	20000084 	.word	0x20000084
 80005d8:	2000002c 	.word	0x2000002c

080005dc <Motor_ResolveFeedbackData>:

void Motor_ResolveFeedbackData(MotorDataTypeDef *MOTOR_STR, uint8_t DATA[]) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	MOTOR_STR->LAST_ANGLE = MOTOR_STR->CURR_ANGLE;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	88da      	ldrh	r2, [r3, #6]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	811a      	strh	r2, [r3, #8]
	MOTOR_STR->CURR_ANGLE = (uint16_t) (DATA[0] << 8 | DATA[1]);
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	021b      	lsls	r3, r3, #8
 80005f4:	b21a      	sxth	r2, r3
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b21b      	sxth	r3, r3
 80005fe:	4313      	orrs	r3, r2
 8000600:	b21b      	sxth	r3, r3
 8000602:	b29a      	uxth	r2, r3
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	80da      	strh	r2, [r3, #6]
	MOTOR_STR->RPM = (int16_t) (DATA[2] << 8 | DATA[3]);
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	3302      	adds	r3, #2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	021b      	lsls	r3, r3, #8
 8000610:	b21a      	sxth	r2, r3
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	3303      	adds	r3, #3
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b21b      	sxth	r3, r3
 800061a:	4313      	orrs	r3, r2
 800061c:	b21a      	sxth	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	801a      	strh	r2, [r3, #0]
	MOTOR_STR->I_REAL = (int16_t) (DATA[4] << 8 | DATA[5]) / -5;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	3304      	adds	r3, #4
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	021b      	lsls	r3, r3, #8
 800062a:	b21a      	sxth	r2, r3
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	3305      	adds	r3, #5
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b21b      	sxth	r3, r3
 8000634:	4313      	orrs	r3, r2
 8000636:	b21b      	sxth	r3, r3
 8000638:	4a1d      	ldr	r2, [pc, #116]	@ (80006b0 <Motor_ResolveFeedbackData+0xd4>)
 800063a:	fb82 1203 	smull	r1, r2, r2, r3
 800063e:	1052      	asrs	r2, r2, #1
 8000640:	17db      	asrs	r3, r3, #31
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	b21a      	sxth	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	805a      	strh	r2, [r3, #2]
	MOTOR_STR->TEMPERATURE = DATA[6];
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	799a      	ldrb	r2, [r3, #6]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	731a      	strb	r2, [r3, #12]

	if (MOTOR_STR->CURR_ANGLE - MOTOR_STR->LAST_ANGLE > 4096)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	88db      	ldrh	r3, [r3, #6]
 8000656:	461a      	mov	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	891b      	ldrh	r3, [r3, #8]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000662:	dd05      	ble.n	8000670 <Motor_ResolveFeedbackData+0x94>
		MOTOR_STR->ROUNDS--;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	1e5a      	subs	r2, r3, #1
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	e00d      	b.n	800068c <Motor_ResolveFeedbackData+0xb0>
	else if (MOTOR_STR->CURR_ANGLE - MOTOR_STR->LAST_ANGLE < -4096)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	88db      	ldrh	r3, [r3, #6]
 8000674:	461a      	mov	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	891b      	ldrh	r3, [r3, #8]
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 8000680:	da04      	bge.n	800068c <Motor_ResolveFeedbackData+0xb0>
		MOTOR_STR->ROUNDS++;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	611a      	str	r2, [r3, #16]

	MOTOR_STR->TOTAL_ANGLE = MOTOR_STR->ROUNDS * 8192 + MOTOR_STR->CURR_ANGLE
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	691b      	ldr	r3, [r3, #16]
 8000690:	035b      	lsls	r3, r3, #13
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	88d2      	ldrh	r2, [r2, #6]
 8000696:	4413      	add	r3, r2
			- MOTOR_STR->OFFSET_ANGLE;
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	8952      	ldrh	r2, [r2, #10]
 800069c:	1a9a      	subs	r2, r3, r2
	MOTOR_STR->TOTAL_ANGLE = MOTOR_STR->ROUNDS * 8192 + MOTOR_STR->CURR_ANGLE
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	615a      	str	r2, [r3, #20]
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	66666667 	.word	0x66666667

080006b4 <Motor_GetInitPosition>:

void Motor_GetInitPosition(MotorDataTypeDef *MOTOR_STR, uint8_t DATA[]) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	MOTOR_STR->CURR_ANGLE = (uint16_t) (DATA[0] << 8 | DATA[1]);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	b21a      	sxth	r2, r3
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b21b      	sxth	r3, r3
 80006ce:	4313      	orrs	r3, r2
 80006d0:	b21b      	sxth	r3, r3
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	80da      	strh	r2, [r3, #6]
	MOTOR_STR->OFFSET_ANGLE = MOTOR_STR->CURR_ANGLE;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	88da      	ldrh	r2, [r3, #6]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	815a      	strh	r2, [r3, #10]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <Motor_SendCmd>:

void Motor_SendCmd(int16_t I1, int16_t I2) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	80fb      	strh	r3, [r7, #6]
 80006f8:	4613      	mov	r3, r2
 80006fa:	80bb      	strh	r3, [r7, #4]
	TxData[0] = I1 >> 8;
 80006fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000700:	121b      	asrs	r3, r3, #8
 8000702:	b21b      	sxth	r3, r3
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b10      	ldr	r3, [pc, #64]	@ (8000748 <Motor_SendCmd+0x5c>)
 8000708:	701a      	strb	r2, [r3, #0]
	TxData[1] = I1;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <Motor_SendCmd+0x5c>)
 8000710:	705a      	strb	r2, [r3, #1]
	TxData[2] = I2 >> 8;
 8000712:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000716:	121b      	asrs	r3, r3, #8
 8000718:	b21b      	sxth	r3, r3
 800071a:	b2da      	uxtb	r2, r3
 800071c:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <Motor_SendCmd+0x5c>)
 800071e:	709a      	strb	r2, [r3, #2]
	TxData[3] = I2;
 8000720:	88bb      	ldrh	r3, [r7, #4]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <Motor_SendCmd+0x5c>)
 8000726:	70da      	strb	r2, [r3, #3]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <Motor_SendCmd+0x60>)
 800072a:	4a07      	ldr	r2, [pc, #28]	@ (8000748 <Motor_SendCmd+0x5c>)
 800072c:	4908      	ldr	r1, [pc, #32]	@ (8000750 <Motor_SendCmd+0x64>)
 800072e:	4809      	ldr	r0, [pc, #36]	@ (8000754 <Motor_SendCmd+0x68>)
 8000730:	f001 fa9a 	bl	8001c68 <HAL_CAN_AddTxMessage>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <Motor_SendCmd+0x52>
		Error_Handler();
 800073a:	f000 fe45 	bl	80013c8 <Error_Handler>
	}
//	HAL_UART_Receive_IT(IBUS_UART, rx_buffer, 32);
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000007c 	.word	0x2000007c
 800074c:	20000000 	.word	0x20000000
 8000750:	20000064 	.word	0x20000064
 8000754:	20000244 	.word	0x20000244

08000758 <abs_limit>:
#include "USR_PID.h"
#include <math.h>

#define ABS(x) ( (x>0) ? (x) : (-x) )

void abs_limit(float *a, float ABS_MAX) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	ed87 0a00 	vstr	s0, [r7]
	if (*a > ABS_MAX)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	edd3 7a00 	vldr	s15, [r3]
 800076a:	ed97 7a00 	vldr	s14, [r7]
 800076e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000776:	d502      	bpl.n	800077e <abs_limit+0x26>
		*a = ABS_MAX;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	683a      	ldr	r2, [r7, #0]
 800077c:	601a      	str	r2, [r3, #0]
	if (*a < -ABS_MAX)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	ed93 7a00 	vldr	s14, [r3]
 8000784:	edd7 7a00 	vldr	s15, [r7]
 8000788:	eef1 7a67 	vneg.f32	s15, s15
 800078c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000794:	d400      	bmi.n	8000798 <abs_limit+0x40>
		*a = -ABS_MAX;
}
 8000796:	e006      	b.n	80007a6 <abs_limit+0x4e>
		*a = -ABS_MAX;
 8000798:	edd7 7a00 	vldr	s15, [r7]
 800079c:	eef1 7a67 	vneg.f32	s15, s15
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	edc3 7a00 	vstr	s15, [r3]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <pid_param_init>:

static void pid_param_init(PID_TypeDef *pid, uint32_t maxout,
		uint32_t intergral_limit, float kp, float ki, float kd) {
 80007b2:	b480      	push	{r7}
 80007b4:	b087      	sub	sp, #28
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6178      	str	r0, [r7, #20]
 80007ba:	6139      	str	r1, [r7, #16]
 80007bc:	60fa      	str	r2, [r7, #12]
 80007be:	ed87 0a02 	vstr	s0, [r7, #8]
 80007c2:	edc7 0a01 	vstr	s1, [r7, #4]
 80007c6:	ed87 1a00 	vstr	s2, [r7]

	pid->IntegralLimit = intergral_limit;
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	651a      	str	r2, [r3, #80]	@ 0x50
	pid->MaxOutput = maxout;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	64da      	str	r2, [r3, #76]	@ 0x4c
	pid->p = kp;
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	68ba      	ldr	r2, [r7, #8]
 80007da:	601a      	str	r2, [r3, #0]
	pid->i = ki;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	605a      	str	r2, [r3, #4]
	pid->d = kd;
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	609a      	str	r2, [r3, #8]
}
 80007e8:	bf00      	nop
 80007ea:	371c      	adds	r7, #28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <pid_reset>:

static void pid_reset(PID_TypeDef *pid, float kp, float ki, float kd) {
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000800:	edc7 0a01 	vstr	s1, [r7, #4]
 8000804:	ed87 1a00 	vstr	s2, [r7]
	pid->p = kp;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	601a      	str	r2, [r3, #0]
	pid->i = ki;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	605a      	str	r2, [r3, #4]
	pid->d = kd;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	609a      	str	r2, [r3, #8]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <PID_Calculate>:

float PID_Calculate(PID_TypeDef *pid, float get, float set) {
 8000826:	b580      	push	{r7, lr}
 8000828:	b084      	sub	sp, #16
 800082a:	af00      	add	r7, sp, #0
 800082c:	60f8      	str	r0, [r7, #12]
 800082e:	ed87 0a02 	vstr	s0, [r7, #8]
 8000832:	edc7 0a01 	vstr	s1, [r7, #4]
	pid->get[CURR] = get;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->set[CURR] = set;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	621a      	str	r2, [r3, #32]
	pid->err[CURR] = set - get;	//set - measure
 8000842:	ed97 7a01 	vldr	s14, [r7, #4]
 8000846:	edd7 7a02 	vldr	s15, [r7, #8]
 800084a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
	if (pid->MaxErr != 0 && ABS(pid->err[CURR]) > pid->MaxErr)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800085a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800085e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000862:	d01b      	beq.n	800089c <PID_Calculate+0x76>
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800086a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000872:	dd03      	ble.n	800087c <PID_Calculate+0x56>
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800087a:	e004      	b.n	8000886 <PID_Calculate+0x60>
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8000882:	eef1 7a67 	vneg.f32	s15, s15
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800088c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000894:	dd02      	ble.n	800089c <PID_Calculate+0x76>
		return 0;
 8000896:	f04f 0300 	mov.w	r3, #0
 800089a:	e098      	b.n	80009ce <PID_Calculate+0x1a8>
	if (pid->DeadBand != 0 && ABS(pid->err[CURR]) < pid->DeadBand)
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80008a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80008a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008aa:	d01b      	beq.n	80008e4 <PID_Calculate+0xbe>
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80008b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd03      	ble.n	80008c4 <PID_Calculate+0x9e>
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80008c2:	e004      	b.n	80008ce <PID_Calculate+0xa8>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80008ca:	eef1 7a67 	vneg.f32	s15, s15
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80008d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008dc:	d502      	bpl.n	80008e4 <PID_Calculate+0xbe>
		return 0;
 80008de:	f04f 0300 	mov.w	r3, #0
 80008e2:	e074      	b.n	80009ce <PID_Calculate+0x1a8>

	pid->pout = pid->p * pid->err[CURR];
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	ed93 7a00 	vldr	s14, [r3]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80008f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->iout += pid->i * pid->err[CURR];
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	ed93 7a04 	vldr	s14, [r3, #16]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	edd3 6a01 	vldr	s13, [r3, #4]
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800090c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->dout = pid->d * (pid->err[CURR] - pid->err[PREV1]);
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800092c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	edc3 7a05 	vstr	s15, [r3, #20]
	abs_limit(&(pid->iout), pid->IntegralLimit);
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f103 0210 	add.w	r2, r3, #16
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000944:	ee07 3a90 	vmov	s15, r3
 8000948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800094c:	eeb0 0a67 	vmov.f32	s0, s15
 8000950:	4610      	mov	r0, r2
 8000952:	f7ff ff01 	bl	8000758 <abs_limit>
	pid->Output = pid->pout + pid->iout + pid->dout;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	ed93 7a03 	vldr	s14, [r3, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000962:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	edd3 7a05 	vldr	s15, [r3, #20]
 800096c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	abs_limit(&(pid->Output), pid->MaxOutput);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000980:	ee07 3a90 	vmov	s15, r3
 8000984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000988:	eeb0 0a67 	vmov.f32	s0, s15
 800098c:	4610      	mov	r0, r2
 800098e:	f7ff fee3 	bl	8000758 <abs_limit>
	pid->Output_Prev = pid->Output;	//update last time
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	641a      	str	r2, [r3, #64]	@ 0x40

	pid->err[PREV2] = pid->err[PREV1];
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	631a      	str	r2, [r3, #48]	@ 0x30
	pid->err[PREV1] = pid->err[CURR];
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	635a      	str	r2, [r3, #52]	@ 0x34
	pid->get[PREV2] = pid->get[PREV1];
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->get[PREV1] = pid->get[CURR];
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	629a      	str	r2, [r3, #40]	@ 0x28
	pid->set[PREV2] = pid->set[PREV1];
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	69da      	ldr	r2, [r3, #28]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	619a      	str	r2, [r3, #24]
	pid->set[PREV1] = pid->set[CURR];
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6a1a      	ldr	r2, [r3, #32]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	61da      	str	r2, [r3, #28]
	return pid->Output;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80009ce:	ee07 3a90 	vmov	s15, r3
 80009d2:	eeb0 0a67 	vmov.f32	s0, s15
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <PID_StructInit>:

void PID_StructInit(PID_TypeDef *pid, uint32_t maxout,
		uint32_t I_Limit, float kp, float ki, float kd, float deadband) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	61f8      	str	r0, [r7, #28]
 80009e4:	61b9      	str	r1, [r7, #24]
 80009e6:	617a      	str	r2, [r7, #20]
 80009e8:	ed87 0a04 	vstr	s0, [r7, #16]
 80009ec:	edc7 0a03 	vstr	s1, [r7, #12]
 80009f0:	ed87 1a02 	vstr	s2, [r7, #8]
 80009f4:	edc7 1a01 	vstr	s3, [r7, #4]

	pid->f_param_init = pid_param_init;
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	4a0c      	ldr	r2, [pc, #48]	@ (8000a2c <PID_StructInit+0x50>)
 80009fc:	655a      	str	r2, [r3, #84]	@ 0x54
	pid->f_pid_reset = pid_reset;
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	4a0b      	ldr	r2, [pc, #44]	@ (8000a30 <PID_StructInit+0x54>)
 8000a02:	659a      	str	r2, [r3, #88]	@ 0x58
	pid->f_param_init(pid, maxout, I_Limit, kp, ki, kd);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a08:	ed97 1a02 	vldr	s2, [r7, #8]
 8000a0c:	edd7 0a03 	vldr	s1, [r7, #12]
 8000a10:	ed97 0a04 	vldr	s0, [r7, #16]
 8000a14:	697a      	ldr	r2, [r7, #20]
 8000a16:	69b9      	ldr	r1, [r7, #24]
 8000a18:	69f8      	ldr	r0, [r7, #28]
 8000a1a:	4798      	blx	r3
	pid->DeadBand = deadband;
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	080007b3 	.word	0x080007b3
 8000a30:	080007f5 	.word	0x080007f5

08000a34 <iBUS_Start_RxIT>:
#include <stdio.h>

uint8_t iBUS_UART_RxBuffer[30], iBUS_UART_RxHead_A, iBUS_UART_RxHead_B;
uint16_t iBUS_Channel[6] = { 0 };

void iBUS_Start_RxIT() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(iBUS_UART, &iBUS_UART_RxHead_A, 1);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	4903      	ldr	r1, [pc, #12]	@ (8000a48 <iBUS_Start_RxIT+0x14>)
 8000a3c:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <iBUS_Start_RxIT+0x18>)
 8000a3e:	f002 fe70 	bl	8003722 <HAL_UART_Receive_IT>
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000236 	.word	0x20000236
 8000a4c:	20000274 	.word	0x20000274

08000a50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if (huart->Instance == IBUS_UART_INSTANCE) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000a9c <HAL_UART_RxCpltCallback+0x4c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d118      	bne.n	8000a94 <HAL_UART_RxCpltCallback+0x44>
		if (iBUS_UART_RxHead_A == 0x20) {
 8000a62:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa0 <HAL_UART_RxCpltCallback+0x50>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b20      	cmp	r3, #32
 8000a68:	d112      	bne.n	8000a90 <HAL_UART_RxCpltCallback+0x40>
			HAL_UART_Receive(iBUS_UART, &iBUS_UART_RxHead_B, 1, 10);
 8000a6a:	230a      	movs	r3, #10
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	490d      	ldr	r1, [pc, #52]	@ (8000aa4 <HAL_UART_RxCpltCallback+0x54>)
 8000a70:	480d      	ldr	r0, [pc, #52]	@ (8000aa8 <HAL_UART_RxCpltCallback+0x58>)
 8000a72:	f002 fdbf 	bl	80035f4 <HAL_UART_Receive>
			if (iBUS_UART_RxHead_B == 0x40) {
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <HAL_UART_RxCpltCallback+0x54>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b40      	cmp	r3, #64	@ 0x40
 8000a7c:	d108      	bne.n	8000a90 <HAL_UART_RxCpltCallback+0x40>
				HAL_UART_Receive(iBUS_UART, iBUS_UART_RxBuffer, 30, 10);
 8000a7e:	230a      	movs	r3, #10
 8000a80:	221e      	movs	r2, #30
 8000a82:	490a      	ldr	r1, [pc, #40]	@ (8000aac <HAL_UART_RxCpltCallback+0x5c>)
 8000a84:	4808      	ldr	r0, [pc, #32]	@ (8000aa8 <HAL_UART_RxCpltCallback+0x58>)
 8000a86:	f002 fdb5 	bl	80035f4 <HAL_UART_Receive>
				IBUS_ResolveData(6);
 8000a8a:	2006      	movs	r0, #6
 8000a8c:	f000 f810 	bl	8000ab0 <IBUS_ResolveData>
			}
		}
		iBUS_Start_RxIT();
 8000a90:	f7ff ffd0 	bl	8000a34 <iBUS_Start_RxIT>
	}
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40007800 	.word	0x40007800
 8000aa0:	20000236 	.word	0x20000236
 8000aa4:	20000237 	.word	0x20000237
 8000aa8:	20000274 	.word	0x20000274
 8000aac:	20000218 	.word	0x20000218

08000ab0 <IBUS_ResolveData>:

void IBUS_ResolveData(uint8_t user_channels) {
 8000ab0:	b480      	push	{r7}
 8000ab2:	b08d      	sub	sp, #52	@ 0x34
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	uint16_t iBUS_Channel_Temp[14], CheckSum_Calc, iBus_RxCheckSum;

	CheckSum_Calc = 0xFF9F;
 8000aba:	f64f 739f 	movw	r3, #65439	@ 0xff9f
 8000abe:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	for (uint8_t i = 0; i < 14; i++) {
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000ac6:	e02d      	b.n	8000b24 <IBUS_ResolveData+0x74>
		iBUS_Channel_Temp[i] = (uint16_t) (iBUS_UART_RxBuffer[i * 2 + 1] << 8
 8000ac8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b88 <IBUS_ResolveData+0xd8>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	021b      	lsls	r3, r3, #8
				| iBUS_UART_RxBuffer[i * 2]);
 8000ad6:	b21a      	sxth	r2, r3
 8000ad8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	492a      	ldr	r1, [pc, #168]	@ (8000b88 <IBUS_ResolveData+0xd8>)
 8000ae0:	5ccb      	ldrb	r3, [r1, r3]
 8000ae2:	b21b      	sxth	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b21a      	sxth	r2, r3
		iBUS_Channel_Temp[i] = (uint16_t) (iBUS_UART_RxBuffer[i * 2 + 1] << 8
 8000ae8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000aec:	b292      	uxth	r2, r2
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	3330      	adds	r3, #48	@ 0x30
 8000af2:	443b      	add	r3, r7
 8000af4:	f823 2c24 	strh.w	r2, [r3, #-36]
		CheckSum_Calc = CheckSum_Calc - iBUS_UART_RxBuffer[i * 2 + 1]
 8000af8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	3301      	adds	r3, #1
 8000b00:	4a21      	ldr	r2, [pc, #132]	@ (8000b88 <IBUS_ResolveData+0xd8>)
 8000b02:	5cd3      	ldrb	r3, [r2, r3]
 8000b04:	461a      	mov	r2, r3
 8000b06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000b08:	1a9b      	subs	r3, r3, r2
 8000b0a:	b29b      	uxth	r3, r3
				- iBUS_UART_RxBuffer[i * 2];
 8000b0c:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8000b10:	0052      	lsls	r2, r2, #1
 8000b12:	491d      	ldr	r1, [pc, #116]	@ (8000b88 <IBUS_ResolveData+0xd8>)
 8000b14:	5c8a      	ldrb	r2, [r1, r2]
		CheckSum_Calc = CheckSum_Calc - iBUS_UART_RxBuffer[i * 2 + 1]
 8000b16:	1a9b      	subs	r3, r3, r2
 8000b18:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (uint8_t i = 0; i < 14; i++) {
 8000b1a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000b24:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000b28:	2b0d      	cmp	r3, #13
 8000b2a:	d9cd      	bls.n	8000ac8 <IBUS_ResolveData+0x18>
	}

	iBus_RxCheckSum = iBUS_UART_RxBuffer[29] << 8 | iBUS_UART_RxBuffer[28];
 8000b2c:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <IBUS_ResolveData+0xd8>)
 8000b2e:	7f5b      	ldrb	r3, [r3, #29]
 8000b30:	021b      	lsls	r3, r3, #8
 8000b32:	b21a      	sxth	r2, r3
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <IBUS_ResolveData+0xd8>)
 8000b36:	7f1b      	ldrb	r3, [r3, #28]
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b21b      	sxth	r3, r3
 8000b3e:	857b      	strh	r3, [r7, #42]	@ 0x2a

	if (CheckSum_Calc == iBus_RxCheckSum) {
 8000b40:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000b42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d119      	bne.n	8000b7c <IBUS_ResolveData+0xcc>
		for (uint8_t j = 0; j < user_channels; j++) {
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000b4e:	e010      	b.n	8000b72 <IBUS_ResolveData+0xc2>
			iBUS_Channel[j] = iBUS_Channel_Temp[j];
 8000b50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b54:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	3330      	adds	r3, #48	@ 0x30
 8000b5c:	443b      	add	r3, r7
 8000b5e:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8000b62:	4b0a      	ldr	r3, [pc, #40]	@ (8000b8c <IBUS_ResolveData+0xdc>)
 8000b64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (uint8_t j = 0; j < user_channels; j++) {
 8000b68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000b72:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d3e9      	bcc.n	8000b50 <IBUS_ResolveData+0xa0>
		}
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	3734      	adds	r7, #52	@ 0x34
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	20000218 	.word	0x20000218
 8000b8c:	20000238 	.word	0x20000238

08000b90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b94:	f000 fdb2 	bl	80016fc <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b98:	f000 f90e 	bl	8000db8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b9c:	f000 fa2e 	bl	8000ffc <MX_GPIO_Init>
	MX_CAN1_Init();
 8000ba0:	f000 f998 	bl	8000ed4 <MX_CAN1_Init>
	MX_UART7_Init();
 8000ba4:	f000 fa00 	bl	8000fa8 <MX_UART7_Init>
	MX_CRC_Init();
 8000ba8:	f000 f9ea 	bl	8000f80 <MX_CRC_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 8000bac:	f000 f976 	bl	8000e9c <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(POWER1_CTRL_GPIO_Port, POWER1_CTRL_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	486f      	ldr	r0, [pc, #444]	@ (8000d74 <main+0x1e4>)
 8000bb6:	f002 f80b 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(POWER3_CTRL_GPIO_Port, POWER3_CTRL_Pin, GPIO_PIN_SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2110      	movs	r1, #16
 8000bbe:	486d      	ldr	r0, [pc, #436]	@ (8000d74 <main+0x1e4>)
 8000bc0:	f002 f806 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bca:	486b      	ldr	r0, [pc, #428]	@ (8000d78 <main+0x1e8>)
 8000bcc:	f002 f800 	bl	8002bd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GND_OF_5VO_GPIO_Port, GND_OF_5VO_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bd6:	4869      	ldr	r0, [pc, #420]	@ (8000d7c <main+0x1ec>)
 8000bd8:	f001 fffa 	bl	8002bd0 <HAL_GPIO_WritePin>

	PID_StructInit(&PID_MotorSpeed[MotorX], 2000.f, 10000.f, 5.0f, 0, 5.1f, 0);
 8000bdc:	eddf 1a68 	vldr	s3, [pc, #416]	@ 8000d80 <main+0x1f0>
 8000be0:	ed9f 1a68 	vldr	s2, [pc, #416]	@ 8000d84 <main+0x1f4>
 8000be4:	eddf 0a66 	vldr	s1, [pc, #408]	@ 8000d80 <main+0x1f0>
 8000be8:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000bec:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000bf0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000bf4:	4864      	ldr	r0, [pc, #400]	@ (8000d88 <main+0x1f8>)
 8000bf6:	f7ff fef1 	bl	80009dc <PID_StructInit>
	PID_StructInit(&PID_MotorSpeed[MotorY], 3000.f, 10000.f, 5.0f, 0, 5.0f, 0);
 8000bfa:	eddf 1a61 	vldr	s3, [pc, #388]	@ 8000d80 <main+0x1f0>
 8000bfe:	eeb1 1a04 	vmov.f32	s2, #20	@ 0x40a00000  5.0
 8000c02:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8000d80 <main+0x1f0>
 8000c06:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000c0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c0e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000c12:	485e      	ldr	r0, [pc, #376]	@ (8000d8c <main+0x1fc>)
 8000c14:	f7ff fee2 	bl	80009dc <PID_StructInit>
	PID_StructInit(&PID_MotorPosition[MotorX], 100000.f, 10000.f, 0.08f, 0, 0.84f, 0);
 8000c18:	eddf 1a59 	vldr	s3, [pc, #356]	@ 8000d80 <main+0x1f0>
 8000c1c:	ed9f 1a5c 	vldr	s2, [pc, #368]	@ 8000d90 <main+0x200>
 8000c20:	eddf 0a57 	vldr	s1, [pc, #348]	@ 8000d80 <main+0x1f0>
 8000c24:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8000d94 <main+0x204>
 8000c28:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c2c:	495a      	ldr	r1, [pc, #360]	@ (8000d98 <main+0x208>)
 8000c2e:	485b      	ldr	r0, [pc, #364]	@ (8000d9c <main+0x20c>)
 8000c30:	f7ff fed4 	bl	80009dc <PID_StructInit>
	PID_StructInit(&PID_MotorPosition[MotorY], 100000.f, 10000.f, 0.08f, 0, 0.84f, 0);
 8000c34:	eddf 1a52 	vldr	s3, [pc, #328]	@ 8000d80 <main+0x1f0>
 8000c38:	ed9f 1a55 	vldr	s2, [pc, #340]	@ 8000d90 <main+0x200>
 8000c3c:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8000d80 <main+0x1f0>
 8000c40:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8000d94 <main+0x204>
 8000c44:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000c48:	4953      	ldr	r1, [pc, #332]	@ (8000d98 <main+0x208>)
 8000c4a:	4855      	ldr	r0, [pc, #340]	@ (8000da0 <main+0x210>)
 8000c4c:	f7ff fec6 	bl	80009dc <PID_StructInit>

	static float targetSpeed[2], targetPosition[2];
	targetSpeed[0] = 192;
 8000c50:	4b54      	ldr	r3, [pc, #336]	@ (8000da4 <main+0x214>)
 8000c52:	4a55      	ldr	r2, [pc, #340]	@ (8000da8 <main+0x218>)
 8000c54:	601a      	str	r2, [r3, #0]
	targetSpeed[1] = 192;
 8000c56:	4b53      	ldr	r3, [pc, #332]	@ (8000da4 <main+0x214>)
 8000c58:	4a53      	ldr	r2, [pc, #332]	@ (8000da8 <main+0x218>)
 8000c5a:	605a      	str	r2, [r3, #4]

	iBUS_Start_RxIT();
 8000c5c:	f7ff feea 	bl	8000a34 <iBUS_Start_RxIT>
	CAN1_START_IRQ();
 8000c60:	f7ff fc3c 	bl	80004dc <CAN1_START_IRQ>

	HAL_Delay(100);
 8000c64:	2064      	movs	r0, #100	@ 0x64
 8000c66:	f000 fdbb 	bl	80017e0 <HAL_Delay>
	/* USER CODE END 2 */
	iBUS_Channel[0] = 1500;
 8000c6a:	4b50      	ldr	r3, [pc, #320]	@ (8000dac <main+0x21c>)
 8000c6c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000c70:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		targetPosition[MotorX] = (iBUS_Channel[0] - 1500) * 100;
 8000c72:	4b4e      	ldr	r3, [pc, #312]	@ (8000dac <main+0x21c>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000c7a:	2264      	movs	r2, #100	@ 0x64
 8000c7c:	fb02 f303 	mul.w	r3, r2, r3
 8000c80:	ee07 3a90 	vmov	s15, r3
 8000c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c88:	4b49      	ldr	r3, [pc, #292]	@ (8000db0 <main+0x220>)
 8000c8a:	edc3 7a00 	vstr	s15, [r3]
		targetSpeed[MotorX] = PID_Calculate(&PID_MotorPosition[MotorX], Motor[MotorX].TOTAL_ANGLE, targetPosition[MotorX]);
 8000c8e:	4b49      	ldr	r3, [pc, #292]	@ (8000db4 <main+0x224>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9a:	4b45      	ldr	r3, [pc, #276]	@ (8000db0 <main+0x220>)
 8000c9c:	ed93 7a00 	vldr	s14, [r3]
 8000ca0:	eef0 0a47 	vmov.f32	s1, s14
 8000ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca8:	483c      	ldr	r0, [pc, #240]	@ (8000d9c <main+0x20c>)
 8000caa:	f7ff fdbc 	bl	8000826 <PID_Calculate>
 8000cae:	eef0 7a40 	vmov.f32	s15, s0
 8000cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8000da4 <main+0x214>)
 8000cb4:	edc3 7a00 	vstr	s15, [r3]
		PID_Calculate(&PID_MotorSpeed[MotorX], Motor[MotorX].RPM, targetSpeed[MotorX]);
 8000cb8:	4b3e      	ldr	r3, [pc, #248]	@ (8000db4 <main+0x224>)
 8000cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	4b37      	ldr	r3, [pc, #220]	@ (8000da4 <main+0x214>)
 8000cc8:	ed93 7a00 	vldr	s14, [r3]
 8000ccc:	eef0 0a47 	vmov.f32	s1, s14
 8000cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd4:	482c      	ldr	r0, [pc, #176]	@ (8000d88 <main+0x1f8>)
 8000cd6:	f7ff fda6 	bl	8000826 <PID_Calculate>

		targetPosition[MotorY] = (iBUS_Channel[3] - 1500) * 100;
 8000cda:	4b34      	ldr	r3, [pc, #208]	@ (8000dac <main+0x21c>)
 8000cdc:	88db      	ldrh	r3, [r3, #6]
 8000cde:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8000ce2:	2264      	movs	r2, #100	@ 0x64
 8000ce4:	fb02 f303 	mul.w	r3, r2, r3
 8000ce8:	ee07 3a90 	vmov	s15, r3
 8000cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8000db0 <main+0x220>)
 8000cf2:	edc3 7a01 	vstr	s15, [r3, #4]
		targetSpeed[MotorY] = PID_Calculate(&PID_MotorPosition[MotorY], Motor[MotorY].TOTAL_ANGLE, targetPosition[MotorY]);
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8000db4 <main+0x224>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d02:	4b2b      	ldr	r3, [pc, #172]	@ (8000db0 <main+0x220>)
 8000d04:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d08:	eef0 0a47 	vmov.f32	s1, s14
 8000d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d10:	4823      	ldr	r0, [pc, #140]	@ (8000da0 <main+0x210>)
 8000d12:	f7ff fd88 	bl	8000826 <PID_Calculate>
 8000d16:	eef0 7a40 	vmov.f32	s15, s0
 8000d1a:	4b22      	ldr	r3, [pc, #136]	@ (8000da4 <main+0x214>)
 8000d1c:	edc3 7a01 	vstr	s15, [r3, #4]
		PID_Calculate(&PID_MotorSpeed[MotorY], Motor[MotorY].RPM, targetSpeed[MotorY]);
 8000d20:	4b24      	ldr	r3, [pc, #144]	@ (8000db4 <main+0x224>)
 8000d22:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8000d26:	ee07 3a90 	vmov	s15, r3
 8000d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <main+0x214>)
 8000d30:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d34:	eef0 0a47 	vmov.f32	s1, s14
 8000d38:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3c:	4813      	ldr	r0, [pc, #76]	@ (8000d8c <main+0x1fc>)
 8000d3e:	f7ff fd72 	bl	8000826 <PID_Calculate>

		Motor_SendCmd(PID_MotorSpeed[MotorX].Output, PID_MotorSpeed[MotorY].Output);
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <main+0x1f8>)
 8000d44:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4c:	ee17 3a90 	vmov	r3, s15
 8000d50:	b21b      	sxth	r3, r3
 8000d52:	4a0d      	ldr	r2, [pc, #52]	@ (8000d88 <main+0x1f8>)
 8000d54:	edd2 7a26 	vldr	s15, [r2, #152]	@ 0x98
 8000d58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d5c:	ee17 2a90 	vmov	r2, s15
 8000d60:	b212      	sxth	r2, r2
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fcc1 	bl	80006ec <Motor_SendCmd>
		HAL_Delay(3);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f000 fd38 	bl	80017e0 <HAL_Delay>
		targetPosition[MotorX] = (iBUS_Channel[0] - 1500) * 100;
 8000d70:	bf00      	nop
 8000d72:	e77e      	b.n	8000c72 <main+0xe2>
 8000d74:	40021c00 	.word	0x40021c00
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40021800 	.word	0x40021800
 8000d80:	00000000 	.word	0x00000000
 8000d84:	40a33333 	.word	0x40a33333
 8000d88:	200000a8 	.word	0x200000a8
 8000d8c:	20000104 	.word	0x20000104
 8000d90:	3f570a3d 	.word	0x3f570a3d
 8000d94:	3da3d70a 	.word	0x3da3d70a
 8000d98:	000186a0 	.word	0x000186a0
 8000d9c:	20000160 	.word	0x20000160
 8000da0:	200001bc 	.word	0x200001bc
 8000da4:	200002bc 	.word	0x200002bc
 8000da8:	43400000 	.word	0x43400000
 8000dac:	20000238 	.word	0x20000238
 8000db0:	200002c4 	.word	0x200002c4
 8000db4:	2000002c 	.word	0x2000002c

08000db8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	@ 0x50
 8000dbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2230      	movs	r2, #48	@ 0x30
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fc26 	bl	8004618 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e94 <SystemClock_Config+0xdc>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	4a2b      	ldr	r2, [pc, #172]	@ (8000e94 <SystemClock_Config+0xdc>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dec:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <SystemClock_Config+0xdc>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <SystemClock_Config+0xe0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e04:	4a24      	ldr	r2, [pc, #144]	@ (8000e98 <SystemClock_Config+0xe0>)
 8000e06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b22      	ldr	r3, [pc, #136]	@ (8000e98 <SystemClock_Config+0xe0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e20:	2310      	movs	r3, #16
 8000e22:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e24:	2302      	movs	r3, #2
 8000e26:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000e2c:	2308      	movs	r3, #8
 8000e2e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 90;
 8000e30:	235a      	movs	r3, #90	@ 0x5a
 8000e32:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 ff2f 	bl	8002ca4 <HAL_RCC_OscConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x98>
		Error_Handler();
 8000e4c:	f000 fabc 	bl	80013c8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000e50:	f001 fed8 	bl	8002c04 <HAL_PWREx_EnableOverDrive>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xa6>
		Error_Handler();
 8000e5a:	f000 fab5 	bl	80013c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e5e:	230f      	movs	r3, #15
 8000e60:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e62:	2302      	movs	r3, #2
 8000e64:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e6e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2102      	movs	r1, #2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f002 f98a 	bl	8003194 <HAL_RCC_ClockConfig>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <SystemClock_Config+0xd2>
		Error_Handler();
 8000e86:	f000 fa9f 	bl	80013c8 <Error_Handler>
	}
}
 8000e8a:	bf00      	nop
 8000e8c:	3750      	adds	r7, #80	@ 0x50
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40007000 	.word	0x40007000

08000e9c <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	/* CAN1_RX0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2014      	movs	r0, #20
 8000ea6:	f001 fc02 	bl	80026ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000eaa:	2014      	movs	r0, #20
 8000eac:	f001 fc1b 	bl	80026e6 <HAL_NVIC_EnableIRQ>
	/* CAN1_RX1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	2015      	movs	r0, #21
 8000eb6:	f001 fbfa 	bl	80026ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000eba:	2015      	movs	r0, #21
 8000ebc:	f001 fc13 	bl	80026e6 <HAL_NVIC_EnableIRQ>
	/* CAN1_TX_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2013      	movs	r0, #19
 8000ec6:	f001 fbf2 	bl	80026ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000eca:	2013      	movs	r0, #19
 8000ecc:	f001 fc0b 	bl	80026e6 <HAL_NVIC_EnableIRQ>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000eda:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000edc:	4a27      	ldr	r2, [pc, #156]	@ (8000f7c <MX_CAN1_Init+0xa8>)
 8000ede:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 5;
 8000ee0:	4b25      	ldr	r3, [pc, #148]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000ee2:	2205      	movs	r2, #5
 8000ee4:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ee6:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000eec:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000ef4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ef8:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000efa:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000efc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000f00:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000f02:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f20:	4b15      	ldr	r3, [pc, #84]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000f26:	4814      	ldr	r0, [pc, #80]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000f28:	f000 fc7e 	bl	8001828 <HAL_CAN_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_CAN1_Init+0x62>
		Error_Handler();
 8000f32:	f000 fa49 	bl	80013c8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef CAN_FilterConfigStructure;
	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8000f36:	2300      	movs	r3, #0
 8000f38:	603b      	str	r3, [r7, #0]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FilterFIFO0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterBank = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f52:	2301      	movs	r3, #1
 8000f54:	61fb      	str	r3, [r7, #28]
	CAN_FilterConfigStructure.FilterActivation = CAN_FILTER_ENABLE;
 8000f56:	2301      	movs	r3, #1
 8000f58:	623b      	str	r3, [r7, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &CAN_FilterConfigStructure) != HAL_OK) {
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <MX_CAN1_Init+0xa4>)
 8000f60:	f000 fd5e 	bl	8001a20 <HAL_CAN_ConfigFilter>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_CAN1_Init+0x9a>
		Error_Handler();
 8000f6a:	f000 fa2d 	bl	80013c8 <Error_Handler>
	}
	/* USER CODE END CAN1_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3728      	adds	r7, #40	@ 0x28
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000244 	.word	0x20000244
 8000f7c:	40006400 	.word	0x40006400

08000f80 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_CRC_Init+0x20>)
 8000f86:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <MX_CRC_Init+0x24>)
 8000f88:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_CRC_Init+0x20>)
 8000f8c:	f001 fbc5 	bl	800271a <HAL_CRC_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_CRC_Init+0x1a>
		Error_Handler();
 8000f96:	f000 fa17 	bl	80013c8 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000026c 	.word	0x2000026c
 8000fa4:	40023000 	.word	0x40023000

08000fa8 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_UART7_Init+0x4c>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <MX_UART7_Init+0x50>)
 8000fb0:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <MX_UART7_Init+0x4c>)
 8000fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb8:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_UART7_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_UART7_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_UART7_Init+0x4c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_UART7_Init+0x4c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_UART7_Init+0x4c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_UART7_Init+0x4c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_UART7_Init+0x4c>)
 8000fe0:	f002 fab8 	bl	8003554 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_UART7_Init+0x46>
		Error_Handler();
 8000fea:	f000 f9ed 	bl	80013c8 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000274 	.word	0x20000274
 8000ff8:	40007800 	.word	0x40007800

08000ffc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08e      	sub	sp, #56	@ 0x38
 8001000:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001002:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
 8001016:	4bb2      	ldr	r3, [pc, #712]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	4ab1      	ldr	r2, [pc, #708]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	@ 0x30
 8001022:	4baf      	ldr	r3, [pc, #700]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	623b      	str	r3, [r7, #32]
 800102c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	4bab      	ldr	r3, [pc, #684]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4aaa      	ldr	r2, [pc, #680]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001038:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4ba8      	ldr	r3, [pc, #672]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	4ba4      	ldr	r3, [pc, #656]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	4aa3      	ldr	r2, [pc, #652]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	@ 0x30
 800105a:	4ba1      	ldr	r3, [pc, #644]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	61bb      	str	r3, [r7, #24]
 8001064:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	4b9d      	ldr	r3, [pc, #628]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a9c      	ldr	r2, [pc, #624]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b9a      	ldr	r3, [pc, #616]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b96      	ldr	r3, [pc, #600]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a95      	ldr	r2, [pc, #596]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b93      	ldr	r3, [pc, #588]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b8f      	ldr	r3, [pc, #572]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a8e      	ldr	r2, [pc, #568]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b8c      	ldr	r3, [pc, #560]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	4b88      	ldr	r3, [pc, #544]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a87      	ldr	r2, [pc, #540]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80010c4:	f043 0310 	orr.w	r3, r3, #16
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b85      	ldr	r3, [pc, #532]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b81      	ldr	r3, [pc, #516]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a80      	ldr	r2, [pc, #512]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80010e0:	f043 0320 	orr.w	r3, r3, #32
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b7e      	ldr	r3, [pc, #504]	@ (80012e0 <MX_GPIO_Init+0x2e4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0320 	and.w	r3, r3, #32
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GND_OF_5VO_GPIO_Port, GND_OF_5VO_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010f8:	487a      	ldr	r0, [pc, #488]	@ (80012e4 <MX_GPIO_Init+0x2e8>)
 80010fa:	f001 fd69 	bl	8002bd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, OLED_B9__Pin | OLED_B0__Pin | SYNC_IN_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f248 2101 	movw	r1, #33281	@ 0x8201
 8001104:	4878      	ldr	r0, [pc, #480]	@ (80012e8 <MX_GPIO_Init+0x2ec>)
 8001106:	f001 fd63 	bl	8002bd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH,
 800110a:	2201      	movs	r2, #1
 800110c:	213c      	movs	r1, #60	@ 0x3c
 800110e:	4877      	ldr	r0, [pc, #476]	@ (80012ec <MX_GPIO_Init+0x2f0>)
 8001110:	f001 fd5e 	bl	8002bd0 <HAL_GPIO_WritePin>
	POWER1_CTRL_Pin | POWER2_CTRL_Pin | POWER3_CTRL_Pin | POWER4_CTRL_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 800111a:	4872      	ldr	r0, [pc, #456]	@ (80012e4 <MX_GPIO_Init+0x2e8>)
 800111c:	f001 fd58 	bl	8002bd0 <HAL_GPIO_WritePin>
	LED_A_Pin | LED_B_Pin | LED_C_Pin | LED_D_Pin | LED_E_Pin | LED_F_Pin | LED_G_Pin | LED_H_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001126:	4872      	ldr	r0, [pc, #456]	@ (80012f0 <MX_GPIO_Init+0x2f4>)
 8001128:	f001 fd52 	bl	8002bd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001132:	4870      	ldr	r0, [pc, #448]	@ (80012f4 <MX_GPIO_Init+0x2f8>)
 8001134:	f001 fd4c 	bl	8002bd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : HEAT_IMU_Pin */
	GPIO_InitStruct.Pin = HEAT_IMU_Pin;
 8001138:	2320      	movs	r3, #32
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001148:	2302      	movs	r3, #2
 800114a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(HEAT_IMU_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4865      	ldr	r0, [pc, #404]	@ (80012e8 <MX_GPIO_Init+0x2ec>)
 8001154:	f001 fb90 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : GND_OF_5VO_Pin LED_A_Pin LED_B_Pin LED_C_Pin
	 LED_D_Pin LED_E_Pin LED_F_Pin LED_G_Pin
	 LED_H_Pin */
	GPIO_InitStruct.Pin = GND_OF_5VO_Pin | LED_A_Pin | LED_B_Pin | LED_C_Pin | LED_D_Pin | LED_E_Pin | LED_F_Pin | LED_G_Pin | LED_H_Pin;
 8001158:	f242 13fe 	movw	r3, #8702	@ 0x21fe
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	485c      	ldr	r0, [pc, #368]	@ (80012e4 <MX_GPIO_Init+0x2e8>)
 8001172:	f001 fb81 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : OLED_B9__Pin OLED_B0__Pin SYNC_IN_Pin */
	GPIO_InitStruct.Pin = OLED_B9__Pin | OLED_B0__Pin | SYNC_IN_Pin;
 8001176:	f248 2301 	movw	r3, #33281	@ 0x8201
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118c:	4619      	mov	r1, r3
 800118e:	4856      	ldr	r0, [pc, #344]	@ (80012e8 <MX_GPIO_Init+0x2ec>)
 8001190:	f001 fb72 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : DBUS_RX_Pin */
	GPIO_InitStruct.Pin = DBUS_RX_Pin;
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a4:	2307      	movs	r3, #7
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(DBUS_RX_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	484e      	ldr	r0, [pc, #312]	@ (80012e8 <MX_GPIO_Init+0x2ec>)
 80011b0:	f001 fb62 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : SERVO_PWM_Y_Pin SERVO_PWM_X_Pin SERVO_PWM_W_Pin SERVO_PWM_Z_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_Y_Pin | SERVO_PWM_X_Pin | SERVO_PWM_W_Pin | SERVO_PWM_Z_Pin;
 80011b4:	23e4      	movs	r3, #228	@ 0xe4
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80011c4:	2303      	movs	r3, #3
 80011c6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011cc:	4619      	mov	r1, r3
 80011ce:	484a      	ldr	r0, [pc, #296]	@ (80012f8 <MX_GPIO_Init+0x2fc>)
 80011d0:	f001 fb52 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : SERVO_PWM_A_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_A_Pin;
 80011d4:	2301      	movs	r3, #1
 80011d6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80011e4:	2302      	movs	r3, #2
 80011e6:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(SERVO_PWM_A_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ec:	4619      	mov	r1, r3
 80011ee:	4842      	ldr	r0, [pc, #264]	@ (80012f8 <MX_GPIO_Init+0x2fc>)
 80011f0:	f001 fb42 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : SERVO_PWM_A9_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_A9_Pin;
 80011f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001206:	2301      	movs	r3, #1
 8001208:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(SERVO_PWM_A9_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	483a      	ldr	r0, [pc, #232]	@ (80012fc <MX_GPIO_Init+0x300>)
 8001212:	f001 fb31 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : POWER1_CTRL_Pin POWER2_CTRL_Pin POWER3_CTRL_Pin POWER4_CTRL_Pin */
	GPIO_InitStruct.Pin = POWER1_CTRL_Pin | POWER2_CTRL_Pin | POWER3_CTRL_Pin | POWER4_CTRL_Pin;
 8001216:	233c      	movs	r3, #60	@ 0x3c
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	482f      	ldr	r0, [pc, #188]	@ (80012ec <MX_GPIO_Init+0x2f0>)
 800122e:	f001 fb23 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : SERVO_PWM_B_Pin SERVO_PWM_C_Pin SERVO_PWM_D_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_B_Pin | SERVO_PWM_C_Pin | SERVO_PWM_D_Pin;
 8001232:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	2302      	movs	r3, #2
 800123a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001244:	2302      	movs	r3, #2
 8001246:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	4827      	ldr	r0, [pc, #156]	@ (80012ec <MX_GPIO_Init+0x2f0>)
 8001250:	f001 fb12 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : SERVO_PWM_E_Pin SERVO_PWM_F_Pin SERVO_PWM_G_Pin SERVO_PWM_H_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_E_Pin | SERVO_PWM_F_Pin | SERVO_PWM_G_Pin | SERVO_PWM_H_Pin;
 8001254:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001266:	2302      	movs	r3, #2
 8001268:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	4823      	ldr	r0, [pc, #140]	@ (8001300 <MX_GPIO_Init+0x304>)
 8001272:	f001 fb01 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 8001276:	2304      	movs	r3, #4
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	2300      	movs	r3, #0
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	4817      	ldr	r0, [pc, #92]	@ (80012e8 <MX_GPIO_Init+0x2ec>)
 800128a:	f001 faf5 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pins : SERVO_PWM_T_Pin SERVO_PWM_S_Pin SERVO_PWM_U_Pin SERVO_PWM_V_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_T_Pin | SERVO_PWM_S_Pin | SERVO_PWM_U_Pin | SERVO_PWM_V_Pin;
 800128e:	230f      	movs	r3, #15
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800129e:	2301      	movs	r3, #1
 80012a0:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012a6:	4619      	mov	r1, r3
 80012a8:	4814      	ldr	r0, [pc, #80]	@ (80012fc <MX_GPIO_Init+0x300>)
 80012aa:	f001 fae5 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : SERVO_PWM_E13_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_E13_Pin;
 80012ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(SERVO_PWM_E13_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <MX_GPIO_Init+0x2f4>)
 80012cc:	f001 fad4 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : OLED_MI_Pin */
	GPIO_InitStruct.Pin = OLED_MI_Pin;
 80012d0:	2340      	movs	r3, #64	@ 0x40
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012dc:	e012      	b.n	8001304 <MX_GPIO_Init+0x308>
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40021c00 	.word	0x40021c00
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020c00 	.word	0x40020c00
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001308:	2305      	movs	r3, #5
 800130a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OLED_MI_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001310:	4619      	mov	r1, r3
 8001312:	4829      	ldr	r0, [pc, #164]	@ (80013b8 <MX_GPIO_Init+0x3bc>)
 8001314:	f001 fab0 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_RED_Pin;
 8001318:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800131c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132e:	4619      	mov	r1, r3
 8001330:	4822      	ldr	r0, [pc, #136]	@ (80013bc <MX_GPIO_Init+0x3c0>)
 8001332:	f001 faa1 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001336:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001348:	2309      	movs	r3, #9
 800134a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	481b      	ldr	r0, [pc, #108]	@ (80013c0 <MX_GPIO_Init+0x3c4>)
 8001354:	f001 fa90 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001358:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135e:	2301      	movs	r3, #1
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	4814      	ldr	r0, [pc, #80]	@ (80013c4 <MX_GPIO_Init+0x3c8>)
 8001372:	f001 fa81 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_EXTI__Pin */
	GPIO_InitStruct.Pin = SD_EXTI__Pin;
 8001376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800137c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(SD_EXTI__GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138a:	4619      	mov	r1, r3
 800138c:	480b      	ldr	r0, [pc, #44]	@ (80013bc <MX_GPIO_Init+0x3c0>)
 800138e:	f001 fa73 	bl	8002878 <HAL_GPIO_Init>

	/*Configure GPIO pin : SYNC_OUT_Pin */
	GPIO_InitStruct.Pin = SYNC_OUT_Pin;
 8001392:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001398:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(SYNC_OUT_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_GPIO_Init+0x3c4>)
 80013aa:	f001 fa65 	bl	8002878 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80013ae:	bf00      	nop
 80013b0:	3738      	adds	r7, #56	@ 0x38
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40021400 	.word	0x40021400

080013c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013d6:	480c      	ldr	r0, [pc, #48]	@ (8001408 <Error_Handler+0x40>)
 80013d8:	f001 fbfa 	bl	8002bd0 <HAL_GPIO_WritePin>
	while (1) {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013e2:	480a      	ldr	r0, [pc, #40]	@ (800140c <Error_Handler+0x44>)
 80013e4:	f001 fbf4 	bl	8002bd0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80013e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ec:	f000 f9f8 	bl	80017e0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <Error_Handler+0x44>)
 80013f8:	f001 fbea 	bl	8002bd0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80013fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001400:	f000 f9ee 	bl	80017e0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001404:	bf00      	nop
 8001406:	e7e9      	b.n	80013dc <Error_Handler+0x14>
 8001408:	40021400 	.word	0x40021400
 800140c:	40021000 	.word	0x40021000

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141e:	4a0f      	ldr	r2, [pc, #60]	@ (800145c <HAL_MspInit+0x4c>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001424:	6453      	str	r3, [r2, #68]	@ 0x44
 8001426:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	@ (800145c <HAL_MspInit+0x4c>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	@ 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	@ (80014e4 <HAL_CAN_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12b      	bne.n	80014da <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_CAN_MspInit+0x88>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <HAL_CAN_MspInit+0x88>)
 800148c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <HAL_CAN_MspInit+0x88>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_CAN_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	@ (80014e8 <HAL_CAN_MspInit+0x88>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <HAL_CAN_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014ba:	2303      	movs	r3, #3
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80014ca:	2309      	movs	r3, #9
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <HAL_CAN_MspInit+0x8c>)
 80014d6:	f001 f9cf 	bl	8002878 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	@ 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40006400 	.word	0x40006400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020c00 	.word	0x40020c00

080014f0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0b      	ldr	r2, [pc, #44]	@ (800152c <HAL_CRC_MspInit+0x3c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10d      	bne.n	800151e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_CRC_MspInit+0x40>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a09      	ldr	r2, [pc, #36]	@ (8001530 <HAL_CRC_MspInit+0x40>)
 800150c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <HAL_CRC_MspInit+0x40>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800151e:	bf00      	nop
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023000 	.word	0x40023000
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <HAL_UART_MspInit+0x94>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d134      	bne.n	80015c0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <HAL_UART_MspInit+0x98>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	4a1b      	ldr	r2, [pc, #108]	@ (80015cc <HAL_UART_MspInit+0x98>)
 8001560:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001564:	6413      	str	r3, [r2, #64]	@ 0x40
 8001566:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <HAL_UART_MspInit+0x98>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_UART_MspInit+0x98>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <HAL_UART_MspInit+0x98>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_UART_MspInit+0x98>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 800158e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80015a0:	2308      	movs	r3, #8
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4809      	ldr	r0, [pc, #36]	@ (80015d0 <HAL_UART_MspInit+0x9c>)
 80015ac:	f001 f964 	bl	8002878 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 1, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2101      	movs	r1, #1
 80015b4:	2052      	movs	r0, #82	@ 0x52
 80015b6:	f001 f87a 	bl	80026ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80015ba:	2052      	movs	r0, #82	@ 0x52
 80015bc:	f001 f893 	bl	80026e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	@ 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40007800 	.word	0x40007800
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40021000 	.word	0x40021000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <NMI_Handler+0x4>

080015dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <MemManage_Handler+0x4>

080015ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f000 f8b9 	bl	80017a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <CAN1_TX_IRQHandler+0x10>)
 800163a:	f000 fd2d 	bl	8002098 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000244 	.word	0x20000244

08001648 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800164c:	4802      	ldr	r0, [pc, #8]	@ (8001658 <CAN1_RX0_IRQHandler+0x10>)
 800164e:	f000 fd23 	bl	8002098 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000244 	.word	0x20000244

0800165c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001660:	4802      	ldr	r0, [pc, #8]	@ (800166c <CAN1_RX1_IRQHandler+0x10>)
 8001662:	f000 fd19 	bl	8002098 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000244 	.word	0x20000244

08001670 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <UART7_IRQHandler+0x10>)
 8001676:	f002 f879 	bl	800376c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000274 	.word	0x20000274

08001684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <SystemInit+0x20>)
 800168a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <SystemInit+0x20>)
 8001690:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001694:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ac:	f7ff ffea 	bl	8001684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	@ (80016e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	@ (80016e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	@ (80016ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	@ (80016f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016d6:	f002 ffa7 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7ff fa59 	bl	8000b90 <main>
  bx  lr    
 80016de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80016ec:	080046b0 	.word	0x080046b0
  ldr r2, =_sbss
 80016f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80016f4:	200002d0 	.word	0x200002d0

080016f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001700:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <HAL_Init+0x40>)
 8001706:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800170a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800170c:	4b0b      	ldr	r3, [pc, #44]	@ (800173c <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	@ (800173c <HAL_Init+0x40>)
 8001712:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001716:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <HAL_Init+0x40>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a07      	ldr	r2, [pc, #28]	@ (800173c <HAL_Init+0x40>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001722:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001724:	2003      	movs	r0, #3
 8001726:	f000 ffb7 	bl	8002698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800172a:	200f      	movs	r0, #15
 800172c:	f000 f808 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001730:	f7ff fe6e 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40023c00 	.word	0x40023c00

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_InitTick+0x54>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_InitTick+0x58>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001756:	fbb3 f3f1 	udiv	r3, r3, r1
 800175a:	fbb2 f3f3 	udiv	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f000 ffcf 	bl	8002702 <HAL_SYSTICK_Config>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e00e      	b.n	800178c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b0f      	cmp	r3, #15
 8001772:	d80a      	bhi.n	800178a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001774:	2200      	movs	r2, #0
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f000 ff97 	bl	80026ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001780:	4a06      	ldr	r2, [pc, #24]	@ (800179c <HAL_InitTick+0x5c>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	e000      	b.n	800178c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000004 	.word	0x20000004
 8001798:	2000000c 	.word	0x2000000c
 800179c:	20000008 	.word	0x20000008

080017a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <HAL_IncTick+0x20>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_IncTick+0x24>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	4a04      	ldr	r2, [pc, #16]	@ (80017c4 <HAL_IncTick+0x24>)
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	2000000c 	.word	0x2000000c
 80017c4:	200002cc 	.word	0x200002cc

080017c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return uwTick;
 80017cc:	4b03      	ldr	r3, [pc, #12]	@ (80017dc <HAL_GetTick+0x14>)
 80017ce:	681b      	ldr	r3, [r3, #0]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200002cc 	.word	0x200002cc

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff ffee 	bl	80017c8 <HAL_GetTick>
 80017ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001824 <HAL_Delay+0x44>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001806:	bf00      	nop
 8001808:	f7ff ffde 	bl	80017c8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000000c 	.word	0x2000000c

08001828 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e0ed      	b.n	8001a16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fe0a 	bl	8001460 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800185c:	f7ff ffb4 	bl	80017c8 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001862:	e012      	b.n	800188a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001864:	f7ff ffb0 	bl	80017c8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b0a      	cmp	r3, #10
 8001870:	d90b      	bls.n	800188a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001876:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2205      	movs	r2, #5
 8001882:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e0c5      	b.n	8001a16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0e5      	beq.n	8001864 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0202 	bic.w	r2, r2, #2
 80018a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a8:	f7ff ff8e 	bl	80017c8 <HAL_GetTick>
 80018ac:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ae:	e012      	b.n	80018d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018b0:	f7ff ff8a 	bl	80017c8 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b0a      	cmp	r3, #10
 80018bc:	d90b      	bls.n	80018d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2205      	movs	r2, #5
 80018ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e09f      	b.n	8001a16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1e5      	bne.n	80018b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7e1b      	ldrb	r3, [r3, #24]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e007      	b.n	800190e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7e5b      	ldrb	r3, [r3, #25]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e007      	b.n	8001938 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001936:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	7e9b      	ldrb	r3, [r3, #26]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d108      	bne.n	8001952 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0220 	orr.w	r2, r2, #32
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	e007      	b.n	8001962 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0220 	bic.w	r2, r2, #32
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	7edb      	ldrb	r3, [r3, #27]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d108      	bne.n	800197c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0210 	bic.w	r2, r2, #16
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e007      	b.n	800198c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f042 0210 	orr.w	r2, r2, #16
 800198a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7f1b      	ldrb	r3, [r3, #28]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d108      	bne.n	80019a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0208 	orr.w	r2, r2, #8
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e007      	b.n	80019b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0208 	bic.w	r2, r2, #8
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7f5b      	ldrb	r3, [r3, #29]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d108      	bne.n	80019d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f042 0204 	orr.w	r2, r2, #4
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	e007      	b.n	80019e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0204 	bic.w	r2, r2, #4
 80019de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	ea42 0103 	orr.w	r1, r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a36:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a38:	7cfb      	ldrb	r3, [r7, #19]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d003      	beq.n	8001a46 <HAL_CAN_ConfigFilter+0x26>
 8001a3e:	7cfb      	ldrb	r3, [r7, #19]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	f040 80be 	bne.w	8001bc2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a46:	4b65      	ldr	r3, [pc, #404]	@ (8001bdc <HAL_CAN_ConfigFilter+0x1bc>)
 8001a48:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a50:	f043 0201 	orr.w	r2, r3, #1
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a60:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	431a      	orrs	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	2201      	movs	r2, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	401a      	ands	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d123      	bne.n	8001af0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001aca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3248      	adds	r2, #72	@ 0x48
 8001ad0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ae4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	3348      	adds	r3, #72	@ 0x48
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	440b      	add	r3, r1
 8001aee:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d122      	bne.n	8001b3e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	431a      	orrs	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b18:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3248      	adds	r2, #72	@ 0x48
 8001b1e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b32:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b34:	6979      	ldr	r1, [r7, #20]
 8001b36:	3348      	adds	r3, #72	@ 0x48
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	401a      	ands	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001b58:	e007      	b.n	8001b6a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	401a      	ands	r2, r3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001b84:	e007      	b.n	8001b96 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d107      	bne.n	8001bae <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bb4:	f023 0201 	bic.w	r2, r3, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e006      	b.n	8001bd0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
  }
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40006400 	.word	0x40006400

08001be0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d12e      	bne.n	8001c52 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c0c:	f7ff fddc 	bl	80017c8 <HAL_GetTick>
 8001c10:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c12:	e012      	b.n	8001c3a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c14:	f7ff fdd8 	bl	80017c8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b0a      	cmp	r3, #10
 8001c20:	d90b      	bls.n	8001c3a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2205      	movs	r2, #5
 8001c32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e012      	b.n	8001c60 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e5      	bne.n	8001c14 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e006      	b.n	8001c60 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c86:	7ffb      	ldrb	r3, [r7, #31]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d003      	beq.n	8001c94 <HAL_CAN_AddTxMessage+0x2c>
 8001c8c:	7ffb      	ldrb	r3, [r7, #31]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	f040 80ad 	bne.w	8001dee <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10a      	bne.n	8001cb4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d105      	bne.n	8001cb4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	f000 8095 	beq.w	8001dde <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	0e1b      	lsrs	r3, r3, #24
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10d      	bne.n	8001cec <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001cda:	68f9      	ldr	r1, [r7, #12]
 8001cdc:	6809      	ldr	r1, [r1, #0]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	3318      	adds	r3, #24
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	440b      	add	r3, r1
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	e00f      	b.n	8001d0c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cf6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d00:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3318      	adds	r3, #24
 8001d06:	011b      	lsls	r3, r3, #4
 8001d08:	440b      	add	r3, r1
 8001d0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6819      	ldr	r1, [r3, #0]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3318      	adds	r3, #24
 8001d18:	011b      	lsls	r3, r3, #4
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	7d1b      	ldrb	r3, [r3, #20]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d111      	bne.n	8001d4c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3318      	adds	r3, #24
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	3304      	adds	r3, #4
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	6811      	ldr	r1, [r2, #0]
 8001d3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3318      	adds	r3, #24
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	440b      	add	r3, r1
 8001d48:	3304      	adds	r3, #4
 8001d4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3307      	adds	r3, #7
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	061a      	lsls	r2, r3, #24
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3306      	adds	r3, #6
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3305      	adds	r3, #5
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	021b      	lsls	r3, r3, #8
 8001d66:	4313      	orrs	r3, r2
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	3204      	adds	r2, #4
 8001d6c:	7812      	ldrb	r2, [r2, #0]
 8001d6e:	4610      	mov	r0, r2
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	6811      	ldr	r1, [r2, #0]
 8001d74:	ea43 0200 	orr.w	r2, r3, r0
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	440b      	add	r3, r1
 8001d7e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001d82:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3303      	adds	r3, #3
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	061a      	lsls	r2, r3, #24
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3302      	adds	r3, #2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	041b      	lsls	r3, r3, #16
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	4610      	mov	r0, r2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	6811      	ldr	r1, [r2, #0]
 8001daa:	ea43 0200 	orr.w	r2, r3, r0
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	440b      	add	r3, r1
 8001db4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001db8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	3318      	adds	r3, #24
 8001dc2:	011b      	lsls	r3, r3, #4
 8001dc4:	4413      	add	r3, r2
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	6811      	ldr	r1, [r2, #0]
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3318      	adds	r3, #24
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	440b      	add	r3, r1
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e00e      	b.n	8001dfc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e006      	b.n	8001dfc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
  }
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3724      	adds	r7, #36	@ 0x24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d003      	beq.n	8001e2c <HAL_CAN_GetRxMessage+0x24>
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	f040 8103 	bne.w	8002032 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10e      	bne.n	8001e50 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d116      	bne.n	8001e6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0f7      	b.n	8002040 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d107      	bne.n	8001e6e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e62:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0e8      	b.n	8002040 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	331b      	adds	r3, #27
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	4413      	add	r3, r2
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0204 	and.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	331b      	adds	r3, #27
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4413      	add	r3, r2
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	0d5b      	lsrs	r3, r3, #21
 8001e9c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	e00b      	b.n	8001ebe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	331b      	adds	r3, #27
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	4413      	add	r3, r2
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	331b      	adds	r3, #27
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	4413      	add	r3, r2
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0202 	and.w	r2, r3, #2
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	331b      	adds	r3, #27
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4413      	add	r3, r2
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2208      	movs	r2, #8
 8001ef0:	611a      	str	r2, [r3, #16]
 8001ef2:	e00b      	b.n	8001f0c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	331b      	adds	r3, #27
 8001efc:	011b      	lsls	r3, r3, #4
 8001efe:	4413      	add	r3, r2
 8001f00:	3304      	adds	r3, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 020f 	and.w	r2, r3, #15
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	331b      	adds	r3, #27
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	4413      	add	r3, r2
 8001f18:	3304      	adds	r3, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	331b      	adds	r3, #27
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	4413      	add	r3, r2
 8001f30:	3304      	adds	r3, #4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0a1a      	lsrs	r2, r3, #8
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	4413      	add	r3, r2
 8001f76:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0c1a      	lsrs	r2, r3, #16
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	3302      	adds	r3, #2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	0e1a      	lsrs	r2, r3, #24
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	3303      	adds	r3, #3
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	011b      	lsls	r3, r3, #4
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	0a1a      	lsrs	r2, r3, #8
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	3305      	adds	r3, #5
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	4413      	add	r3, r2
 8001fdc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0c1a      	lsrs	r2, r3, #16
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	3306      	adds	r3, #6
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	0e1a      	lsrs	r2, r3, #24
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3307      	adds	r3, #7
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d108      	bne.n	800201e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0220 	orr.w	r2, r2, #32
 800201a:	60da      	str	r2, [r3, #12]
 800201c:	e007      	b.n	800202e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0220 	orr.w	r2, r2, #32
 800202c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e006      	b.n	8002040 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002036:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
  }
}
 8002040:	4618      	mov	r0, r3
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 3020 	ldrb.w	r3, [r3, #32]
 800205c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d002      	beq.n	800206a <HAL_CAN_ActivateNotification+0x1e>
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d109      	bne.n	800207e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6959      	ldr	r1, [r3, #20]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e006      	b.n	800208c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
  }
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08a      	sub	sp, #40	@ 0x28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d07c      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d023      	beq.n	8002130 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2201      	movs	r2, #1
 80020ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f983 	bl	8002406 <HAL_CAN_TxMailbox0CompleteCallback>
 8002100:	e016      	b.n	8002130 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d004      	beq.n	8002116 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
 8002114:	e00c      	b.n	8002130 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002122:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
 8002128:	e002      	b.n	8002130 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f989 	bl	8002442 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d024      	beq.n	8002184 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002142:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f963 	bl	800241a <HAL_CAN_TxMailbox1CompleteCallback>
 8002154:	e016      	b.n	8002184 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
 8002168:	e00c      	b.n	8002184 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002170:	2b00      	cmp	r3, #0
 8002172:	d004      	beq.n	800217e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
 800217c:	e002      	b.n	8002184 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f969 	bl	8002456 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d024      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002196:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 f943 	bl	800242e <HAL_CAN_TxMailbox2CompleteCallback>
 80021a8:	e016      	b.n	80021d8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d004      	beq.n	80021be <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80021bc:	e00c      	b.n	80021d8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d004      	beq.n	80021d2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80021d0:	e002      	b.n	80021d8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f949 	bl	800246a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2210      	movs	r2, #16
 80021fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80021fc:	6a3b      	ldr	r3, [r7, #32]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d006      	beq.n	800221e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2208      	movs	r2, #8
 8002216:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe f985 	bl	8000528 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d009      	beq.n	800223c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f921 	bl	800247e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800223c:	6a3b      	ldr	r3, [r7, #32]
 800223e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d00c      	beq.n	8002260 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002252:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2210      	movs	r2, #16
 800225e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	f003 0320 	and.w	r3, r3, #32
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00b      	beq.n	8002282 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d006      	beq.n	8002282 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2208      	movs	r2, #8
 800227a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f912 	bl	80024a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f8f9 	bl	8002492 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00b      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d006      	beq.n	80022c2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2210      	movs	r2, #16
 80022ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f8fc 	bl	80024ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00b      	beq.n	80022e4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d006      	beq.n	80022e4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2208      	movs	r2, #8
 80022dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f8f5 	bl	80024ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d07b      	beq.n	80023e6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d072      	beq.n	80023de <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d008      	beq.n	8002314 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800231a:	2b00      	cmp	r3, #0
 800231c:	d008      	beq.n	8002330 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232a:	f043 0302 	orr.w	r3, r3, #2
 800232e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002336:	2b00      	cmp	r3, #0
 8002338:	d008      	beq.n	800234c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002352:	2b00      	cmp	r3, #0
 8002354:	d043      	beq.n	80023de <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03e      	beq.n	80023de <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002366:	2b60      	cmp	r3, #96	@ 0x60
 8002368:	d02b      	beq.n	80023c2 <HAL_CAN_IRQHandler+0x32a>
 800236a:	2b60      	cmp	r3, #96	@ 0x60
 800236c:	d82e      	bhi.n	80023cc <HAL_CAN_IRQHandler+0x334>
 800236e:	2b50      	cmp	r3, #80	@ 0x50
 8002370:	d022      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x320>
 8002372:	2b50      	cmp	r3, #80	@ 0x50
 8002374:	d82a      	bhi.n	80023cc <HAL_CAN_IRQHandler+0x334>
 8002376:	2b40      	cmp	r3, #64	@ 0x40
 8002378:	d019      	beq.n	80023ae <HAL_CAN_IRQHandler+0x316>
 800237a:	2b40      	cmp	r3, #64	@ 0x40
 800237c:	d826      	bhi.n	80023cc <HAL_CAN_IRQHandler+0x334>
 800237e:	2b30      	cmp	r3, #48	@ 0x30
 8002380:	d010      	beq.n	80023a4 <HAL_CAN_IRQHandler+0x30c>
 8002382:	2b30      	cmp	r3, #48	@ 0x30
 8002384:	d822      	bhi.n	80023cc <HAL_CAN_IRQHandler+0x334>
 8002386:	2b10      	cmp	r3, #16
 8002388:	d002      	beq.n	8002390 <HAL_CAN_IRQHandler+0x2f8>
 800238a:	2b20      	cmp	r3, #32
 800238c:	d005      	beq.n	800239a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800238e:	e01d      	b.n	80023cc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	f043 0308 	orr.w	r3, r3, #8
 8002396:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002398:	e019      	b.n	80023ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	f043 0310 	orr.w	r3, r3, #16
 80023a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023a2:	e014      	b.n	80023ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	f043 0320 	orr.w	r3, r3, #32
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023ac:	e00f      	b.n	80023ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023b6:	e00a      	b.n	80023ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023c0:	e005      	b.n	80023ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80023ca:	e000      	b.n	80023ce <HAL_CAN_IRQHandler+0x336>
            break;
 80023cc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80023dc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2204      	movs	r2, #4
 80023e4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f872 	bl	80024e2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80023fe:	bf00      	nop
 8002400:	3728      	adds	r7, #40	@ 0x28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr

080024e2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
	...

080024f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002514:	4013      	ands	r3, r2
 8002516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002520:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252a:	4a04      	ldr	r2, [pc, #16]	@ (800253c <__NVIC_SetPriorityGrouping+0x44>)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	60d3      	str	r3, [r2, #12]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002544:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <__NVIC_GetPriorityGrouping+0x18>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	f003 0307 	and.w	r3, r3, #7
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	2b00      	cmp	r3, #0
 800256c:	db0b      	blt.n	8002586 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	f003 021f 	and.w	r2, r3, #31
 8002574:	4907      	ldr	r1, [pc, #28]	@ (8002594 <__NVIC_EnableIRQ+0x38>)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2001      	movs	r0, #1
 800257e:	fa00 f202 	lsl.w	r2, r0, r2
 8002582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	e000e100 	.word	0xe000e100

08002598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	@ (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	@ (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	@ 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
         );
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	@ 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002664:	d301      	bcc.n	800266a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002666:	2301      	movs	r3, #1
 8002668:	e00f      	b.n	800268a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266a:	4a0a      	ldr	r2, [pc, #40]	@ (8002694 <SysTick_Config+0x40>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002672:	210f      	movs	r1, #15
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f7ff ff8e 	bl	8002598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <SysTick_Config+0x40>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002682:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <SysTick_Config+0x40>)
 8002684:	2207      	movs	r2, #7
 8002686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	e000e010 	.word	0xe000e010

08002698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ff29 	bl	80024f8 <__NVIC_SetPriorityGrouping>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c0:	f7ff ff3e 	bl	8002540 <__NVIC_GetPriorityGrouping>
 80026c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f7ff ff8e 	bl	80025ec <NVIC_EncodePriority>
 80026d0:	4602      	mov	r2, r0
 80026d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff5d 	bl	8002598 <__NVIC_SetPriority>
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ff31 	bl	800255c <__NVIC_EnableIRQ>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff ffa2 	bl	8002654 <SysTick_Config>
 8002710:	4603      	mov	r3, r0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e00e      	b.n	800274a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	795b      	ldrb	r3, [r3, #5]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7fe fed7 	bl	80014f0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7ff f832 	bl	80017c8 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d008      	beq.n	8002784 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2280      	movs	r2, #128	@ 0x80
 8002776:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e052      	b.n	800282a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0216 	bic.w	r2, r2, #22
 8002792:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <HAL_DMA_Abort+0x62>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0208 	bic.w	r2, r2, #8
 80027c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 0201 	bic.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d4:	e013      	b.n	80027fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027d6:	f7fe fff7 	bl	80017c8 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d90c      	bls.n	80027fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2203      	movs	r2, #3
 80027ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e015      	b.n	800282a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e4      	bne.n	80027d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	223f      	movs	r2, #63	@ 0x3f
 8002812:	409a      	lsls	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d004      	beq.n	8002850 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2280      	movs	r2, #128	@ 0x80
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e00c      	b.n	800286a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2205      	movs	r2, #5
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002878:	b480      	push	{r7}
 800287a:	b089      	sub	sp, #36	@ 0x24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
 8002892:	e177      	b.n	8002b84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002894:	2201      	movs	r2, #1
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4013      	ands	r3, r2
 80028a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	f040 8166 	bne.w	8002b7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d005      	beq.n	80028ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d130      	bne.n	800292c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68da      	ldr	r2, [r3, #12]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002900:	2201      	movs	r2, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 0201 	and.w	r2, r3, #1
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b03      	cmp	r3, #3
 8002936:	d017      	beq.n	8002968 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	2203      	movs	r2, #3
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d123      	bne.n	80029bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	08da      	lsrs	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3208      	adds	r2, #8
 800297c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	220f      	movs	r2, #15
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	08da      	lsrs	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3208      	adds	r2, #8
 80029b6:	69b9      	ldr	r1, [r7, #24]
 80029b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	2203      	movs	r2, #3
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	43db      	mvns	r3, r3
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	4013      	ands	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 0203 	and.w	r2, r3, #3
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80c0 	beq.w	8002b7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	4b66      	ldr	r3, [pc, #408]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a06:	4a65      	ldr	r2, [pc, #404]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0e:	4b63      	ldr	r3, [pc, #396]	@ (8002b9c <HAL_GPIO_Init+0x324>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a1a:	4a61      	ldr	r2, [pc, #388]	@ (8002ba0 <HAL_GPIO_Init+0x328>)
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	089b      	lsrs	r3, r3, #2
 8002a20:	3302      	adds	r3, #2
 8002a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	220f      	movs	r2, #15
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a58      	ldr	r2, [pc, #352]	@ (8002ba4 <HAL_GPIO_Init+0x32c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d037      	beq.n	8002ab6 <HAL_GPIO_Init+0x23e>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a57      	ldr	r2, [pc, #348]	@ (8002ba8 <HAL_GPIO_Init+0x330>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d031      	beq.n	8002ab2 <HAL_GPIO_Init+0x23a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a56      	ldr	r2, [pc, #344]	@ (8002bac <HAL_GPIO_Init+0x334>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d02b      	beq.n	8002aae <HAL_GPIO_Init+0x236>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a55      	ldr	r2, [pc, #340]	@ (8002bb0 <HAL_GPIO_Init+0x338>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d025      	beq.n	8002aaa <HAL_GPIO_Init+0x232>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a54      	ldr	r2, [pc, #336]	@ (8002bb4 <HAL_GPIO_Init+0x33c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01f      	beq.n	8002aa6 <HAL_GPIO_Init+0x22e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a53      	ldr	r2, [pc, #332]	@ (8002bb8 <HAL_GPIO_Init+0x340>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d019      	beq.n	8002aa2 <HAL_GPIO_Init+0x22a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a52      	ldr	r2, [pc, #328]	@ (8002bbc <HAL_GPIO_Init+0x344>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_GPIO_Init+0x226>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a51      	ldr	r2, [pc, #324]	@ (8002bc0 <HAL_GPIO_Init+0x348>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00d      	beq.n	8002a9a <HAL_GPIO_Init+0x222>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a50      	ldr	r2, [pc, #320]	@ (8002bc4 <HAL_GPIO_Init+0x34c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <HAL_GPIO_Init+0x21e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4f      	ldr	r2, [pc, #316]	@ (8002bc8 <HAL_GPIO_Init+0x350>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_GPIO_Init+0x21a>
 8002a8e:	2309      	movs	r3, #9
 8002a90:	e012      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002a92:	230a      	movs	r3, #10
 8002a94:	e010      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002a96:	2308      	movs	r3, #8
 8002a98:	e00e      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	e00c      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002a9e:	2306      	movs	r3, #6
 8002aa0:	e00a      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	e008      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	e006      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e004      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e002      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_GPIO_Init+0x240>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f002 0203 	and.w	r2, r2, #3
 8002abe:	0092      	lsls	r2, r2, #2
 8002ac0:	4093      	lsls	r3, r2
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac8:	4935      	ldr	r1, [pc, #212]	@ (8002ba0 <HAL_GPIO_Init+0x328>)
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	3302      	adds	r3, #2
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002afa:	4a34      	ldr	r2, [pc, #208]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b00:	4b32      	ldr	r3, [pc, #200]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b24:	4a29      	ldr	r2, [pc, #164]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b2a:	4b28      	ldr	r3, [pc, #160]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	43db      	mvns	r3, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4013      	ands	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d003      	beq.n	8002b78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b78:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <HAL_GPIO_Init+0x354>)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3301      	adds	r3, #1
 8002b82:	61fb      	str	r3, [r7, #28]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	2b0f      	cmp	r3, #15
 8002b88:	f67f ae84 	bls.w	8002894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3724      	adds	r7, #36	@ 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40013800 	.word	0x40013800
 8002ba4:	40020000 	.word	0x40020000
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40020800 	.word	0x40020800
 8002bb0:	40020c00 	.word	0x40020c00
 8002bb4:	40021000 	.word	0x40021000
 8002bb8:	40021400 	.word	0x40021400
 8002bbc:	40021800 	.word	0x40021800
 8002bc0:	40021c00 	.word	0x40021c00
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40022400 	.word	0x40022400
 8002bcc:	40013c00 	.word	0x40013c00

08002bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be0:	787b      	ldrb	r3, [r7, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4b20      	ldr	r3, [pc, #128]	@ (8002c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	4a1f      	ldr	r2, [pc, #124]	@ (8002c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002c98 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c30:	f7fe fdca 	bl	80017c8 <HAL_GetTick>
 8002c34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c36:	e009      	b.n	8002c4c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c38:	f7fe fdc6 	bl	80017c8 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c46:	d901      	bls.n	8002c4c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e01f      	b.n	8002c8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c58:	d1ee      	bne.n	8002c38 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c60:	f7fe fdb2 	bl	80017c8 <HAL_GetTick>
 8002c64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c66:	e009      	b.n	8002c7c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c68:	f7fe fdae 	bl	80017c8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c76:	d901      	bls.n	8002c7c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e007      	b.n	8002c8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c7c:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <HAL_PWREx_EnableOverDrive+0x98>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c88:	d1ee      	bne.n	8002c68 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800
 8002c98:	420e0040 	.word	0x420e0040
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	420e0044 	.word	0x420e0044

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e267      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d075      	beq.n	8002dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc2:	4b88      	ldr	r3, [pc, #544]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4b85      	ldr	r3, [pc, #532]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d112      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cda:	4b82      	ldr	r3, [pc, #520]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ce6:	d10b      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05b      	beq.n	8002dac <HAL_RCC_OscConfig+0x108>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d157      	bne.n	8002dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e242      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x74>
 8002d0a:	4b76      	ldr	r3, [pc, #472]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a75      	ldr	r2, [pc, #468]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x98>
 8002d22:	4b70      	ldr	r3, [pc, #448]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6f      	ldr	r2, [pc, #444]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6c      	ldr	r2, [pc, #432]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d3c:	4b69      	ldr	r3, [pc, #420]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a68      	ldr	r2, [pc, #416]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b66      	ldr	r3, [pc, #408]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a65      	ldr	r2, [pc, #404]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fd34 	bl	80017c8 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fe fd30 	bl	80017c8 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	@ 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e207      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xc0>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7fe fd20 	bl	80017c8 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fd1c 	bl	80017c8 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	@ 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1f3      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	4b51      	ldr	r3, [pc, #324]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0xe8>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d063      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dba:	4b4a      	ldr	r3, [pc, #296]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b47      	ldr	r3, [pc, #284]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b44      	ldr	r3, [pc, #272]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b41      	ldr	r3, [pc, #260]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1c7      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4937      	ldr	r1, [pc, #220]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e03a      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCC_OscConfig+0x244>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fcd5 	bl	80017c8 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e22:	f7fe fcd1 	bl	80017c8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1a8      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4925      	ldr	r1, [pc, #148]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <HAL_RCC_OscConfig+0x244>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7fe fcb4 	bl	80017c8 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe fcb0 	bl	80017c8 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e187      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d036      	beq.n	8002efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_RCC_OscConfig+0x248>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe fc94 	bl	80017c8 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7fe fc90 	bl	80017c8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e167      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x200>
 8002ec2:	e01b      	b.n	8002efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec4:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0x248>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fc7d 	bl	80017c8 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	e00e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe fc79 	bl	80017c8 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d907      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e150      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	42470000 	.word	0x42470000
 8002eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b88      	ldr	r3, [pc, #544]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ea      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8097 	beq.w	8003038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b81      	ldr	r3, [pc, #516]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	4b7d      	ldr	r3, [pc, #500]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	4a7c      	ldr	r2, [pc, #496]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b77      	ldr	r3, [pc, #476]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b74      	ldr	r3, [pc, #464]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a73      	ldr	r2, [pc, #460]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fe fc39 	bl	80017c8 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fe fc35 	bl	80017c8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e10c      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x2ea>
 8002f80:	4b64      	ldr	r3, [pc, #400]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	4a63      	ldr	r2, [pc, #396]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8c:	e01c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x324>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x30c>
 8002f96:	4b5f      	ldr	r3, [pc, #380]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x324>
 8002fb0:	4b58      	ldr	r3, [pc, #352]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb4:	4a57      	ldr	r2, [pc, #348]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fbc:	4b55      	ldr	r3, [pc, #340]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc0:	4a54      	ldr	r2, [pc, #336]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	f023 0304 	bic.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fbfa 	bl	80017c8 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fbf6 	bl	80017c8 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0cb      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	4b49      	ldr	r3, [pc, #292]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0ee      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x334>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffc:	f7fe fbe4 	bl	80017c8 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe fbe0 	bl	80017c8 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0b5      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	4b3e      	ldr	r3, [pc, #248]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ee      	bne.n	8003004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003030:	4a38      	ldr	r2, [pc, #224]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80a1 	beq.w	8003184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003042:	4b34      	ldr	r3, [pc, #208]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d05c      	beq.n	8003108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d141      	bne.n	80030da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_RCC_OscConfig+0x478>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe fbb4 	bl	80017c8 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe fbb0 	bl	80017c8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e087      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	4b27      	ldr	r3, [pc, #156]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003090:	019b      	lsls	r3, r3, #6
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	491b      	ldr	r1, [pc, #108]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ac:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <HAL_RCC_OscConfig+0x478>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fe fb89 	bl	80017c8 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe fb85 	bl	80017c8 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e05c      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x416>
 80030d8:	e054      	b.n	8003184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b10      	ldr	r3, [pc, #64]	@ (800311c <HAL_RCC_OscConfig+0x478>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe fb72 	bl	80017c8 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe fb6e 	bl	80017c8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e045      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <HAL_RCC_OscConfig+0x470>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x444>
 8003106:	e03d      	b.n	8003184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e038      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
 8003114:	40023800 	.word	0x40023800
 8003118:	40007000 	.word	0x40007000
 800311c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003120:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <HAL_RCC_OscConfig+0x4ec>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d028      	beq.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d121      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d11a      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003158:	4293      	cmp	r3, r2
 800315a:	d111      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	3b01      	subs	r3, #1
 800316a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800

08003194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0cc      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a8:	4b68      	ldr	r3, [pc, #416]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d90c      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b65      	ldr	r3, [pc, #404]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a58      	ldr	r2, [pc, #352]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a52      	ldr	r2, [pc, #328]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800320a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d044      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d119      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324e:	2b03      	cmp	r3, #3
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003252:	4b3f      	ldr	r3, [pc, #252]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	4b3b      	ldr	r3, [pc, #236]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e067      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b37      	ldr	r3, [pc, #220]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4934      	ldr	r1, [pc, #208]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7fe faa0 	bl	80017c8 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fe fa9c 	bl	80017c8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b25      	ldr	r3, [pc, #148]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d20c      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b22      	ldr	r3, [pc, #136]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b12      	ldr	r3, [pc, #72]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f821 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	@ (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	@ (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	@ (800335c <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fa00 	bl	8001740 <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00
 8003350:	40023800 	.word	0x40023800
 8003354:	08004688 	.word	0x08004688
 8003358:	20000004 	.word	0x20000004
 800335c:	20000008 	.word	0x20000008

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003364:	b090      	sub	sp, #64	@ 0x40
 8003366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	637b      	str	r3, [r7, #52]	@ 0x34
 800336c:	2300      	movs	r3, #0
 800336e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003370:	2300      	movs	r3, #0
 8003372:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003378:	4b59      	ldr	r3, [pc, #356]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d00d      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003384:	2b08      	cmp	r3, #8
 8003386:	f200 80a1 	bhi.w	80034cc <HAL_RCC_GetSysClockFreq+0x16c>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x3a>
 8003392:	e09b      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b53      	ldr	r3, [pc, #332]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003396:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003398:	e09b      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b53      	ldr	r3, [pc, #332]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800339c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800339e:	e098      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4b4f      	ldr	r3, [pc, #316]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033aa:	4b4d      	ldr	r3, [pc, #308]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d028      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b4a      	ldr	r3, [pc, #296]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	2200      	movs	r2, #0
 80033be:	623b      	str	r3, [r7, #32]
 80033c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033c8:	2100      	movs	r1, #0
 80033ca:	4b47      	ldr	r3, [pc, #284]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033cc:	fb03 f201 	mul.w	r2, r3, r1
 80033d0:	2300      	movs	r3, #0
 80033d2:	fb00 f303 	mul.w	r3, r0, r3
 80033d6:	4413      	add	r3, r2
 80033d8:	4a43      	ldr	r2, [pc, #268]	@ (80034e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033da:	fba0 1202 	umull	r1, r2, r0, r2
 80033de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033e0:	460a      	mov	r2, r1
 80033e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e6:	4413      	add	r3, r2
 80033e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ec:	2200      	movs	r2, #0
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	61fa      	str	r2, [r7, #28]
 80033f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033fa:	f7fc fef7 	bl	80001ec <__aeabi_uldivmod>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4613      	mov	r3, r2
 8003404:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003406:	e053      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003408:	4b35      	ldr	r3, [pc, #212]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	2200      	movs	r2, #0
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	617a      	str	r2, [r7, #20]
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800341a:	f04f 0b00 	mov.w	fp, #0
 800341e:	4652      	mov	r2, sl
 8003420:	465b      	mov	r3, fp
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	0159      	lsls	r1, r3, #5
 800342c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003430:	0150      	lsls	r0, r2, #5
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	ebb2 080a 	subs.w	r8, r2, sl
 800343a:	eb63 090b 	sbc.w	r9, r3, fp
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800344a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800344e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003452:	ebb2 0408 	subs.w	r4, r2, r8
 8003456:	eb63 0509 	sbc.w	r5, r3, r9
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	00eb      	lsls	r3, r5, #3
 8003464:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003468:	00e2      	lsls	r2, r4, #3
 800346a:	4614      	mov	r4, r2
 800346c:	461d      	mov	r5, r3
 800346e:	eb14 030a 	adds.w	r3, r4, sl
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	eb45 030b 	adc.w	r3, r5, fp
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	f04f 0300 	mov.w	r3, #0
 8003482:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003486:	4629      	mov	r1, r5
 8003488:	028b      	lsls	r3, r1, #10
 800348a:	4621      	mov	r1, r4
 800348c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003490:	4621      	mov	r1, r4
 8003492:	028a      	lsls	r2, r1, #10
 8003494:	4610      	mov	r0, r2
 8003496:	4619      	mov	r1, r3
 8003498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349a:	2200      	movs	r2, #0
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	60fa      	str	r2, [r7, #12]
 80034a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034a4:	f7fc fea2 	bl	80001ec <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4613      	mov	r3, r2
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034b0:	4b0b      	ldr	r3, [pc, #44]	@ (80034e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	0c1b      	lsrs	r3, r3, #16
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	3301      	adds	r3, #1
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80034c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034ca:	e002      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034cc:	4b05      	ldr	r3, [pc, #20]	@ (80034e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3740      	adds	r7, #64	@ 0x40
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034de:	bf00      	nop
 80034e0:	40023800 	.word	0x40023800
 80034e4:	00f42400 	.word	0x00f42400
 80034e8:	00b71b00 	.word	0x00b71b00

080034ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <HAL_RCC_GetHCLKFreq+0x14>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000004 	.word	0x20000004

08003504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003508:	f7ff fff0 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 800350c:	4602      	mov	r2, r0
 800350e:	4b05      	ldr	r3, [pc, #20]	@ (8003524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	0a9b      	lsrs	r3, r3, #10
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	4903      	ldr	r1, [pc, #12]	@ (8003528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800351a:	5ccb      	ldrb	r3, [r1, r3]
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	08004698 	.word	0x08004698

0800352c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003530:	f7ff ffdc 	bl	80034ec <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0b5b      	lsrs	r3, r3, #13
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4903      	ldr	r1, [pc, #12]	@ (8003550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40023800 	.word	0x40023800
 8003550:	08004698 	.word	0x08004698

08003554 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e042      	b.n	80035ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd ffda 	bl	8001534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2224      	movs	r2, #36	@ 0x24
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003596:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 fdc9 	bl	8004130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	@ 0x28
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b20      	cmp	r3, #32
 8003612:	f040 8081 	bne.w	8003718 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_UART_Receive+0x2e>
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e079      	b.n	800371a <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2222      	movs	r2, #34	@ 0x22
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800363a:	f7fe f8c5 	bl	80017c8 <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	88fa      	ldrh	r2, [r7, #6]
 800364a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003654:	d108      	bne.n	8003668 <HAL_UART_Receive+0x74>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e003      	b.n	8003670 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003670:	e047      	b.n	8003702 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	2120      	movs	r1, #32
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fb27 	bl	8003cd0 <UART_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e042      	b.n	800371a <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10c      	bne.n	80036b4 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	3302      	adds	r3, #2
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	e01f      	b.n	80036f4 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036bc:	d007      	beq.n	80036ce <HAL_UART_Receive+0xda>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10a      	bne.n	80036dc <HAL_UART_Receive+0xe8>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e008      	b.n	80036ee <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3301      	adds	r3, #1
 80036f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003706:	b29b      	uxth	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1b2      	bne.n	8003672 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	4613      	mov	r3, r2
 800372e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	d112      	bne.n	8003762 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_UART_Receive_IT+0x26>
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e00b      	b.n	8003764 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	461a      	mov	r2, r3
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fb12 	bl	8003d82 <UART_Start_Receive_IT>
 800375e:	4603      	mov	r3, r0
 8003760:	e000      	b.n	8003764 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b0ba      	sub	sp, #232	@ 0xe8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10f      	bne.n	80037d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_UART_IRQHandler+0x66>
 80037be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fbf2 	bl	8003fb4 <UART_Receive_IT>
      return;
 80037d0:	e25b      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80de 	beq.w	8003998 <HAL_UART_IRQHandler+0x22c>
 80037dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80d1 	beq.w	8003998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_UART_IRQHandler+0xae>
 8003802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_UART_IRQHandler+0xd2>
 8003826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f043 0202 	orr.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_UART_IRQHandler+0xf6>
 800384a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d011      	beq.n	8003892 <HAL_UART_IRQHandler+0x126>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f043 0208 	orr.w	r2, r3, #8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 81f2 	beq.w	8003c80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_UART_IRQHandler+0x14e>
 80038a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fb7d 	bl	8003fb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c4:	2b40      	cmp	r3, #64	@ 0x40
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <HAL_UART_IRQHandler+0x17a>
 80038de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d04f      	beq.n	8003986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa85 	bl	8003df6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	d141      	bne.n	800397e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3314      	adds	r3, #20
 8003922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003926:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800392a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800393e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1d9      	bne.n	80038fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	4a7e      	ldr	r2, [pc, #504]	@ (8003b4c <HAL_UART_IRQHandler+0x3e0>)
 8003954:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe ff69 	bl	8002832 <HAL_DMA_Abort_IT>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003970:	4610      	mov	r0, r2
 8003972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	e00e      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f994 	bl	8003ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397c:	e00a      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f990 	bl	8003ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	e006      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f98c 	bl	8003ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003992:	e175      	b.n	8003c80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	bf00      	nop
    return;
 8003996:	e173      	b.n	8003c80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	2b01      	cmp	r3, #1
 800399e:	f040 814f 	bne.w	8003c40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8148 	beq.w	8003c40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8141 	beq.w	8003c40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039de:	2b40      	cmp	r3, #64	@ 0x40
 80039e0:	f040 80b6 	bne.w	8003b50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8145 	beq.w	8003c84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a02:	429a      	cmp	r2, r3
 8003a04:	f080 813e 	bcs.w	8003c84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a1a:	f000 8088 	beq.w	8003b2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1d9      	bne.n	8003a1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3314      	adds	r3, #20
 8003a70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3314      	adds	r3, #20
 8003a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e1      	bne.n	8003a6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3314      	adds	r3, #20
 8003ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003aca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003acc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ad0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e3      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003afc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003afe:	f023 0310 	bic.w	r3, r3, #16
 8003b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e3      	bne.n	8003aec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe fe12 	bl	8002752 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f8b7 	bl	8003cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b4a:	e09b      	b.n	8003c84 <HAL_UART_IRQHandler+0x518>
 8003b4c:	08003ebd 	.word	0x08003ebd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 808e 	beq.w	8003c88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 8089 	beq.w	8003c88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	330c      	adds	r3, #12
 8003b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	330c      	adds	r3, #12
 8003b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e3      	bne.n	8003b76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	e853 3f00 	ldrex	r3, [r3]
 8003bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f023 0301 	bic.w	r3, r3, #1
 8003bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3314      	adds	r3, #20
 8003bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e3      	bne.n	8003bae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0310 	bic.w	r3, r3, #16
 8003c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	330c      	adds	r3, #12
 8003c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c18:	61fa      	str	r2, [r7, #28]
 8003c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	617b      	str	r3, [r7, #20]
   return(result);
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e3      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f83d 	bl	8003cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c3e:	e023      	b.n	8003c88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d009      	beq.n	8003c60 <HAL_UART_IRQHandler+0x4f4>
 8003c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 f943 	bl	8003ee4 <UART_Transmit_IT>
    return;
 8003c5e:	e014      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00e      	beq.n	8003c8a <HAL_UART_IRQHandler+0x51e>
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f983 	bl	8003f84 <UART_EndTransmit_IT>
    return;
 8003c7e:	e004      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
    return;
 8003c80:	bf00      	nop
 8003c82:	e002      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c88:	bf00      	nop
  }
}
 8003c8a:	37e8      	adds	r7, #232	@ 0xe8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce0:	e03b      	b.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d037      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fd fd6d 	bl	80017c8 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	6a3a      	ldr	r2, [r7, #32]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e03a      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d023      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b80      	cmp	r3, #128	@ 0x80
 8003d16:	d020      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b40      	cmp	r3, #64	@ 0x40
 8003d1c:	d01d      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d116      	bne.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f857 	bl	8003df6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2208      	movs	r2, #8
 8003d4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e00f      	b.n	8003d7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	4013      	ands	r3, r2
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	bf0c      	ite	eq
 8003d6a:	2301      	moveq	r3, #1
 8003d6c:	2300      	movne	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d0b4      	beq.n	8003ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b085      	sub	sp, #20
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	88fa      	ldrh	r2, [r7, #6]
 8003d9a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	88fa      	ldrh	r2, [r7, #6]
 8003da0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2222      	movs	r2, #34	@ 0x22
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d007      	beq.n	8003dc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0220 	orr.w	r2, r2, #32
 8003de6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b095      	sub	sp, #84	@ 0x54
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e5      	bne.n	8003dfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3314      	adds	r3, #20
 8003e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3314      	adds	r3, #20
 8003e50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1e5      	bne.n	8003e32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d119      	bne.n	8003ea2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	330c      	adds	r3, #12
 8003e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	e853 3f00 	ldrex	r3, [r3]
 8003e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f023 0310 	bic.w	r3, r3, #16
 8003e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	330c      	adds	r3, #12
 8003e8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e8e:	61ba      	str	r2, [r7, #24]
 8003e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6979      	ldr	r1, [r7, #20]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e5      	bne.n	8003e6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003eb0:	bf00      	nop
 8003eb2:	3754      	adds	r7, #84	@ 0x54
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff fee4 	bl	8003ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b21      	cmp	r3, #33	@ 0x21
 8003ef6:	d13e      	bne.n	8003f76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f00:	d114      	bne.n	8003f2c <UART_Transmit_IT+0x48>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d110      	bne.n	8003f2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	1c9a      	adds	r2, r3, #2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]
 8003f2a:	e008      	b.n	8003f3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	1c59      	adds	r1, r3, #1
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6211      	str	r1, [r2, #32]
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e000      	b.n	8003f78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f76:	2302      	movs	r3, #2
  }
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff fe73 	bl	8003c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b08c      	sub	sp, #48	@ 0x30
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b22      	cmp	r3, #34	@ 0x22
 8003fc6:	f040 80ae 	bne.w	8004126 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd2:	d117      	bne.n	8004004 <UART_Receive_IT+0x50>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d113      	bne.n	8004004 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	1c9a      	adds	r2, r3, #2
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	629a      	str	r2, [r3, #40]	@ 0x28
 8004002:	e026      	b.n	8004052 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800400a:	2300      	movs	r3, #0
 800400c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004016:	d007      	beq.n	8004028 <UART_Receive_IT+0x74>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <UART_Receive_IT+0x82>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	b2da      	uxtb	r2, r3
 8004030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	e008      	b.n	8004048 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004042:	b2da      	uxtb	r2, r3
 8004044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004046:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29b      	uxth	r3, r3
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	4619      	mov	r1, r3
 8004060:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004062:	2b00      	cmp	r3, #0
 8004064:	d15d      	bne.n	8004122 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0220 	bic.w	r2, r2, #32
 8004074:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004084:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695a      	ldr	r2, [r3, #20]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0201 	bic.w	r2, r2, #1
 8004094:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d135      	bne.n	8004118 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	330c      	adds	r3, #12
 80040b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	613b      	str	r3, [r7, #16]
   return(result);
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f023 0310 	bic.w	r3, r3, #16
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	330c      	adds	r3, #12
 80040d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d2:	623a      	str	r2, [r7, #32]
 80040d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	69f9      	ldr	r1, [r7, #28]
 80040d8:	6a3a      	ldr	r2, [r7, #32]
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	61bb      	str	r3, [r7, #24]
   return(result);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e5      	bne.n	80040b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d10a      	bne.n	800410a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040f4:	2300      	movs	r3, #0
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff fdd1 	bl	8003cb8 <HAL_UARTEx_RxEventCallback>
 8004116:	e002      	b.n	800411e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7fc fc99 	bl	8000a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	e002      	b.n	8004128 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e000      	b.n	8004128 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
  }
}
 8004128:	4618      	mov	r0, r3
 800412a:	3730      	adds	r7, #48	@ 0x30
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004134:	b0c0      	sub	sp, #256	@ 0x100
 8004136:	af00      	add	r7, sp, #0
 8004138:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800413c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414c:	68d9      	ldr	r1, [r3, #12]
 800414e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	ea40 0301 	orr.w	r3, r0, r1
 8004158:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800415a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	431a      	orrs	r2, r3
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	431a      	orrs	r2, r3
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004188:	f021 010c 	bic.w	r1, r1, #12
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004196:	430b      	orrs	r3, r1
 8004198:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800419a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041aa:	6999      	ldr	r1, [r3, #24]
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	ea40 0301 	orr.w	r3, r0, r1
 80041b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	4b8f      	ldr	r3, [pc, #572]	@ (80043fc <UART_SetConfig+0x2cc>)
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d005      	beq.n	80041d0 <UART_SetConfig+0xa0>
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004400 <UART_SetConfig+0x2d0>)
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d104      	bne.n	80041da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d0:	f7ff f9ac 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 80041d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041d8:	e003      	b.n	80041e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041da:	f7ff f993 	bl	8003504 <HAL_RCC_GetPCLK1Freq>
 80041de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ec:	f040 810c 	bne.w	8004408 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041f4:	2200      	movs	r2, #0
 80041f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004202:	4622      	mov	r2, r4
 8004204:	462b      	mov	r3, r5
 8004206:	1891      	adds	r1, r2, r2
 8004208:	65b9      	str	r1, [r7, #88]	@ 0x58
 800420a:	415b      	adcs	r3, r3
 800420c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800420e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004212:	4621      	mov	r1, r4
 8004214:	eb12 0801 	adds.w	r8, r2, r1
 8004218:	4629      	mov	r1, r5
 800421a:	eb43 0901 	adc.w	r9, r3, r1
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800422a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800422e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004232:	4690      	mov	r8, r2
 8004234:	4699      	mov	r9, r3
 8004236:	4623      	mov	r3, r4
 8004238:	eb18 0303 	adds.w	r3, r8, r3
 800423c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004240:	462b      	mov	r3, r5
 8004242:	eb49 0303 	adc.w	r3, r9, r3
 8004246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004256:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800425a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800425e:	460b      	mov	r3, r1
 8004260:	18db      	adds	r3, r3, r3
 8004262:	653b      	str	r3, [r7, #80]	@ 0x50
 8004264:	4613      	mov	r3, r2
 8004266:	eb42 0303 	adc.w	r3, r2, r3
 800426a:	657b      	str	r3, [r7, #84]	@ 0x54
 800426c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004270:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004274:	f7fb ffba 	bl	80001ec <__aeabi_uldivmod>
 8004278:	4602      	mov	r2, r0
 800427a:	460b      	mov	r3, r1
 800427c:	4b61      	ldr	r3, [pc, #388]	@ (8004404 <UART_SetConfig+0x2d4>)
 800427e:	fba3 2302 	umull	r2, r3, r3, r2
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	011c      	lsls	r4, r3, #4
 8004286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800428a:	2200      	movs	r2, #0
 800428c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004290:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004294:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004298:	4642      	mov	r2, r8
 800429a:	464b      	mov	r3, r9
 800429c:	1891      	adds	r1, r2, r2
 800429e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042a0:	415b      	adcs	r3, r3
 80042a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042a8:	4641      	mov	r1, r8
 80042aa:	eb12 0a01 	adds.w	sl, r2, r1
 80042ae:	4649      	mov	r1, r9
 80042b0:	eb43 0b01 	adc.w	fp, r3, r1
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042c8:	4692      	mov	sl, r2
 80042ca:	469b      	mov	fp, r3
 80042cc:	4643      	mov	r3, r8
 80042ce:	eb1a 0303 	adds.w	r3, sl, r3
 80042d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042d6:	464b      	mov	r3, r9
 80042d8:	eb4b 0303 	adc.w	r3, fp, r3
 80042dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042f4:	460b      	mov	r3, r1
 80042f6:	18db      	adds	r3, r3, r3
 80042f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042fa:	4613      	mov	r3, r2
 80042fc:	eb42 0303 	adc.w	r3, r2, r3
 8004300:	647b      	str	r3, [r7, #68]	@ 0x44
 8004302:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004306:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800430a:	f7fb ff6f 	bl	80001ec <__aeabi_uldivmod>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4611      	mov	r1, r2
 8004314:	4b3b      	ldr	r3, [pc, #236]	@ (8004404 <UART_SetConfig+0x2d4>)
 8004316:	fba3 2301 	umull	r2, r3, r3, r1
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2264      	movs	r2, #100	@ 0x64
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	1acb      	subs	r3, r1, r3
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800432a:	4b36      	ldr	r3, [pc, #216]	@ (8004404 <UART_SetConfig+0x2d4>)
 800432c:	fba3 2302 	umull	r2, r3, r3, r2
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004338:	441c      	add	r4, r3
 800433a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800433e:	2200      	movs	r2, #0
 8004340:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004344:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004348:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800434c:	4642      	mov	r2, r8
 800434e:	464b      	mov	r3, r9
 8004350:	1891      	adds	r1, r2, r2
 8004352:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004354:	415b      	adcs	r3, r3
 8004356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800435c:	4641      	mov	r1, r8
 800435e:	1851      	adds	r1, r2, r1
 8004360:	6339      	str	r1, [r7, #48]	@ 0x30
 8004362:	4649      	mov	r1, r9
 8004364:	414b      	adcs	r3, r1
 8004366:	637b      	str	r3, [r7, #52]	@ 0x34
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004374:	4659      	mov	r1, fp
 8004376:	00cb      	lsls	r3, r1, #3
 8004378:	4651      	mov	r1, sl
 800437a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800437e:	4651      	mov	r1, sl
 8004380:	00ca      	lsls	r2, r1, #3
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	4603      	mov	r3, r0
 8004388:	4642      	mov	r2, r8
 800438a:	189b      	adds	r3, r3, r2
 800438c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004390:	464b      	mov	r3, r9
 8004392:	460a      	mov	r2, r1
 8004394:	eb42 0303 	adc.w	r3, r2, r3
 8004398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800439c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043b0:	460b      	mov	r3, r1
 80043b2:	18db      	adds	r3, r3, r3
 80043b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043b6:	4613      	mov	r3, r2
 80043b8:	eb42 0303 	adc.w	r3, r2, r3
 80043bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043c6:	f7fb ff11 	bl	80001ec <__aeabi_uldivmod>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004404 <UART_SetConfig+0x2d4>)
 80043d0:	fba3 1302 	umull	r1, r3, r3, r2
 80043d4:	095b      	lsrs	r3, r3, #5
 80043d6:	2164      	movs	r1, #100	@ 0x64
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	3332      	adds	r3, #50	@ 0x32
 80043e2:	4a08      	ldr	r2, [pc, #32]	@ (8004404 <UART_SetConfig+0x2d4>)
 80043e4:	fba2 2303 	umull	r2, r3, r2, r3
 80043e8:	095b      	lsrs	r3, r3, #5
 80043ea:	f003 0207 	and.w	r2, r3, #7
 80043ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4422      	add	r2, r4
 80043f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043f8:	e106      	b.n	8004608 <UART_SetConfig+0x4d8>
 80043fa:	bf00      	nop
 80043fc:	40011000 	.word	0x40011000
 8004400:	40011400 	.word	0x40011400
 8004404:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800440c:	2200      	movs	r2, #0
 800440e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004412:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004416:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800441a:	4642      	mov	r2, r8
 800441c:	464b      	mov	r3, r9
 800441e:	1891      	adds	r1, r2, r2
 8004420:	6239      	str	r1, [r7, #32]
 8004422:	415b      	adcs	r3, r3
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
 8004426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800442a:	4641      	mov	r1, r8
 800442c:	1854      	adds	r4, r2, r1
 800442e:	4649      	mov	r1, r9
 8004430:	eb43 0501 	adc.w	r5, r3, r1
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	00eb      	lsls	r3, r5, #3
 800443e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004442:	00e2      	lsls	r2, r4, #3
 8004444:	4614      	mov	r4, r2
 8004446:	461d      	mov	r5, r3
 8004448:	4643      	mov	r3, r8
 800444a:	18e3      	adds	r3, r4, r3
 800444c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004450:	464b      	mov	r3, r9
 8004452:	eb45 0303 	adc.w	r3, r5, r3
 8004456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004466:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004476:	4629      	mov	r1, r5
 8004478:	008b      	lsls	r3, r1, #2
 800447a:	4621      	mov	r1, r4
 800447c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004480:	4621      	mov	r1, r4
 8004482:	008a      	lsls	r2, r1, #2
 8004484:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004488:	f7fb feb0 	bl	80001ec <__aeabi_uldivmod>
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4b60      	ldr	r3, [pc, #384]	@ (8004614 <UART_SetConfig+0x4e4>)
 8004492:	fba3 2302 	umull	r2, r3, r3, r2
 8004496:	095b      	lsrs	r3, r3, #5
 8004498:	011c      	lsls	r4, r3, #4
 800449a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800449e:	2200      	movs	r2, #0
 80044a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044ac:	4642      	mov	r2, r8
 80044ae:	464b      	mov	r3, r9
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	61b9      	str	r1, [r7, #24]
 80044b4:	415b      	adcs	r3, r3
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044bc:	4641      	mov	r1, r8
 80044be:	1851      	adds	r1, r2, r1
 80044c0:	6139      	str	r1, [r7, #16]
 80044c2:	4649      	mov	r1, r9
 80044c4:	414b      	adcs	r3, r1
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	f04f 0300 	mov.w	r3, #0
 80044d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044d4:	4659      	mov	r1, fp
 80044d6:	00cb      	lsls	r3, r1, #3
 80044d8:	4651      	mov	r1, sl
 80044da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044de:	4651      	mov	r1, sl
 80044e0:	00ca      	lsls	r2, r1, #3
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	4642      	mov	r2, r8
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044f0:	464b      	mov	r3, r9
 80044f2:	460a      	mov	r2, r1
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004506:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004514:	4649      	mov	r1, r9
 8004516:	008b      	lsls	r3, r1, #2
 8004518:	4641      	mov	r1, r8
 800451a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800451e:	4641      	mov	r1, r8
 8004520:	008a      	lsls	r2, r1, #2
 8004522:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004526:	f7fb fe61 	bl	80001ec <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4611      	mov	r1, r2
 8004530:	4b38      	ldr	r3, [pc, #224]	@ (8004614 <UART_SetConfig+0x4e4>)
 8004532:	fba3 2301 	umull	r2, r3, r3, r1
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2264      	movs	r2, #100	@ 0x64
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	1acb      	subs	r3, r1, r3
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	3332      	adds	r3, #50	@ 0x32
 8004544:	4a33      	ldr	r2, [pc, #204]	@ (8004614 <UART_SetConfig+0x4e4>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004550:	441c      	add	r4, r3
 8004552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004556:	2200      	movs	r2, #0
 8004558:	673b      	str	r3, [r7, #112]	@ 0x70
 800455a:	677a      	str	r2, [r7, #116]	@ 0x74
 800455c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004560:	4642      	mov	r2, r8
 8004562:	464b      	mov	r3, r9
 8004564:	1891      	adds	r1, r2, r2
 8004566:	60b9      	str	r1, [r7, #8]
 8004568:	415b      	adcs	r3, r3
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004570:	4641      	mov	r1, r8
 8004572:	1851      	adds	r1, r2, r1
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	4649      	mov	r1, r9
 8004578:	414b      	adcs	r3, r1
 800457a:	607b      	str	r3, [r7, #4]
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004588:	4659      	mov	r1, fp
 800458a:	00cb      	lsls	r3, r1, #3
 800458c:	4651      	mov	r1, sl
 800458e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004592:	4651      	mov	r1, sl
 8004594:	00ca      	lsls	r2, r1, #3
 8004596:	4610      	mov	r0, r2
 8004598:	4619      	mov	r1, r3
 800459a:	4603      	mov	r3, r0
 800459c:	4642      	mov	r2, r8
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045a2:	464b      	mov	r3, r9
 80045a4:	460a      	mov	r2, r1
 80045a6:	eb42 0303 	adc.w	r3, r2, r3
 80045aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80045b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045c4:	4649      	mov	r1, r9
 80045c6:	008b      	lsls	r3, r1, #2
 80045c8:	4641      	mov	r1, r8
 80045ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ce:	4641      	mov	r1, r8
 80045d0:	008a      	lsls	r2, r1, #2
 80045d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045d6:	f7fb fe09 	bl	80001ec <__aeabi_uldivmod>
 80045da:	4602      	mov	r2, r0
 80045dc:	460b      	mov	r3, r1
 80045de:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <UART_SetConfig+0x4e4>)
 80045e0:	fba3 1302 	umull	r1, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	2164      	movs	r1, #100	@ 0x64
 80045e8:	fb01 f303 	mul.w	r3, r1, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	3332      	adds	r3, #50	@ 0x32
 80045f2:	4a08      	ldr	r2, [pc, #32]	@ (8004614 <UART_SetConfig+0x4e4>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	f003 020f 	and.w	r2, r3, #15
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4422      	add	r2, r4
 8004606:	609a      	str	r2, [r3, #8]
}
 8004608:	bf00      	nop
 800460a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800460e:	46bd      	mov	sp, r7
 8004610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004614:	51eb851f 	.word	0x51eb851f

08004618 <memset>:
 8004618:	4402      	add	r2, r0
 800461a:	4603      	mov	r3, r0
 800461c:	4293      	cmp	r3, r2
 800461e:	d100      	bne.n	8004622 <memset+0xa>
 8004620:	4770      	bx	lr
 8004622:	f803 1b01 	strb.w	r1, [r3], #1
 8004626:	e7f9      	b.n	800461c <memset+0x4>

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4d0d      	ldr	r5, [pc, #52]	@ (8004660 <__libc_init_array+0x38>)
 800462c:	4c0d      	ldr	r4, [pc, #52]	@ (8004664 <__libc_init_array+0x3c>)
 800462e:	1b64      	subs	r4, r4, r5
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	2600      	movs	r6, #0
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4d0b      	ldr	r5, [pc, #44]	@ (8004668 <__libc_init_array+0x40>)
 800463a:	4c0c      	ldr	r4, [pc, #48]	@ (800466c <__libc_init_array+0x44>)
 800463c:	f000 f818 	bl	8004670 <_init>
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	2600      	movs	r6, #0
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004650:	4798      	blx	r3
 8004652:	3601      	adds	r6, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f855 3b04 	ldr.w	r3, [r5], #4
 800465a:	4798      	blx	r3
 800465c:	3601      	adds	r6, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	080046a8 	.word	0x080046a8
 8004664:	080046a8 	.word	0x080046a8
 8004668:	080046a8 	.word	0x080046a8
 800466c:	080046ac 	.word	0x080046ac

08004670 <_init>:
 8004670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004672:	bf00      	nop
 8004674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004676:	bc08      	pop	{r3}
 8004678:	469e      	mov	lr, r3
 800467a:	4770      	bx	lr

0800467c <_fini>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	bf00      	nop
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr
