
MC4128RMA_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d40  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004ef0  08004ef0  00005ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f08  08004f08  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f08  08004f08  00005f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f10  08004f10  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f10  08004f10  00005f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f14  08004f14  00005f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004f18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00000404  20000010  20000010  00006010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000414  20000414  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c683  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022fa  00000000  00000000  000126c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a8  00000000  00000000  000149c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074d  00000000  00000000  00015368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023755  00000000  00000000  00015ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d018  00000000  00000000  0003920a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3238  00000000  00000000  00046222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011945a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027dc  00000000  00000000  001194a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0011bc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004ed8 	.word	0x08004ed8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004ed8 	.word	0x08004ed8

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	@ 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__gedf2>:
 80007bc:	f04f 3cff 	mov.w	ip, #4294967295
 80007c0:	e006      	b.n	80007d0 <__cmpdf2+0x4>
 80007c2:	bf00      	nop

080007c4 <__ledf2>:
 80007c4:	f04f 0c01 	mov.w	ip, #1
 80007c8:	e002      	b.n	80007d0 <__cmpdf2+0x4>
 80007ca:	bf00      	nop

080007cc <__cmpdf2>:
 80007cc:	f04f 0c01 	mov.w	ip, #1
 80007d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007e6:	d01b      	beq.n	8000820 <__cmpdf2+0x54>
 80007e8:	b001      	add	sp, #4
 80007ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007ee:	bf0c      	ite	eq
 80007f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007f4:	ea91 0f03 	teqne	r1, r3
 80007f8:	bf02      	ittt	eq
 80007fa:	ea90 0f02 	teqeq	r0, r2
 80007fe:	2000      	moveq	r0, #0
 8000800:	4770      	bxeq	lr
 8000802:	f110 0f00 	cmn.w	r0, #0
 8000806:	ea91 0f03 	teq	r1, r3
 800080a:	bf58      	it	pl
 800080c:	4299      	cmppl	r1, r3
 800080e:	bf08      	it	eq
 8000810:	4290      	cmpeq	r0, r2
 8000812:	bf2c      	ite	cs
 8000814:	17d8      	asrcs	r0, r3, #31
 8000816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800081a:	f040 0001 	orr.w	r0, r0, #1
 800081e:	4770      	bx	lr
 8000820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000828:	d102      	bne.n	8000830 <__cmpdf2+0x64>
 800082a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800082e:	d107      	bne.n	8000840 <__cmpdf2+0x74>
 8000830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000838:	d1d6      	bne.n	80007e8 <__cmpdf2+0x1c>
 800083a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800083e:	d0d3      	beq.n	80007e8 <__cmpdf2+0x1c>
 8000840:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop

08000848 <__aeabi_cdrcmple>:
 8000848:	4684      	mov	ip, r0
 800084a:	4610      	mov	r0, r2
 800084c:	4662      	mov	r2, ip
 800084e:	468c      	mov	ip, r1
 8000850:	4619      	mov	r1, r3
 8000852:	4663      	mov	r3, ip
 8000854:	e000      	b.n	8000858 <__aeabi_cdcmpeq>
 8000856:	bf00      	nop

08000858 <__aeabi_cdcmpeq>:
 8000858:	b501      	push	{r0, lr}
 800085a:	f7ff ffb7 	bl	80007cc <__cmpdf2>
 800085e:	2800      	cmp	r0, #0
 8000860:	bf48      	it	mi
 8000862:	f110 0f00 	cmnmi.w	r0, #0
 8000866:	bd01      	pop	{r0, pc}

08000868 <__aeabi_dcmpeq>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff fff4 	bl	8000858 <__aeabi_cdcmpeq>
 8000870:	bf0c      	ite	eq
 8000872:	2001      	moveq	r0, #1
 8000874:	2000      	movne	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmplt>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffea 	bl	8000858 <__aeabi_cdcmpeq>
 8000884:	bf34      	ite	cc
 8000886:	2001      	movcc	r0, #1
 8000888:	2000      	movcs	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmple>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffe0 	bl	8000858 <__aeabi_cdcmpeq>
 8000898:	bf94      	ite	ls
 800089a:	2001      	movls	r0, #1
 800089c:	2000      	movhi	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmpge>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffce 	bl	8000848 <__aeabi_cdrcmple>
 80008ac:	bf94      	ite	ls
 80008ae:	2001      	movls	r0, #1
 80008b0:	2000      	movhi	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmpgt>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffc4 	bl	8000848 <__aeabi_cdrcmple>
 80008c0:	bf34      	ite	cc
 80008c2:	2001      	movcc	r0, #1
 80008c4:	2000      	movcs	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_d2iz>:
 80008cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008d0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008d4:	d215      	bcs.n	8000902 <__aeabi_d2iz+0x36>
 80008d6:	d511      	bpl.n	80008fc <__aeabi_d2iz+0x30>
 80008d8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008e0:	d912      	bls.n	8000908 <__aeabi_d2iz+0x3c>
 80008e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008f2:	fa23 f002 	lsr.w	r0, r3, r2
 80008f6:	bf18      	it	ne
 80008f8:	4240      	negne	r0, r0
 80008fa:	4770      	bx	lr
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	4770      	bx	lr
 8000902:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000906:	d105      	bne.n	8000914 <__aeabi_d2iz+0x48>
 8000908:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800090c:	bf08      	it	eq
 800090e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b96a 	b.w	8000c08 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9d08      	ldr	r5, [sp, #32]
 8000952:	460c      	mov	r4, r1
 8000954:	2b00      	cmp	r3, #0
 8000956:	d14e      	bne.n	80009f6 <__udivmoddi4+0xaa>
 8000958:	4694      	mov	ip, r2
 800095a:	458c      	cmp	ip, r1
 800095c:	4686      	mov	lr, r0
 800095e:	fab2 f282 	clz	r2, r2
 8000962:	d962      	bls.n	8000a2a <__udivmoddi4+0xde>
 8000964:	b14a      	cbz	r2, 800097a <__udivmoddi4+0x2e>
 8000966:	f1c2 0320 	rsb	r3, r2, #32
 800096a:	4091      	lsls	r1, r2
 800096c:	fa20 f303 	lsr.w	r3, r0, r3
 8000970:	fa0c fc02 	lsl.w	ip, ip, r2
 8000974:	4319      	orrs	r1, r3
 8000976:	fa00 fe02 	lsl.w	lr, r0, r2
 800097a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800097e:	fa1f f68c 	uxth.w	r6, ip
 8000982:	fbb1 f4f7 	udiv	r4, r1, r7
 8000986:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800098a:	fb07 1114 	mls	r1, r7, r4, r1
 800098e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000992:	fb04 f106 	mul.w	r1, r4, r6
 8000996:	4299      	cmp	r1, r3
 8000998:	d90a      	bls.n	80009b0 <__udivmoddi4+0x64>
 800099a:	eb1c 0303 	adds.w	r3, ip, r3
 800099e:	f104 30ff 	add.w	r0, r4, #4294967295
 80009a2:	f080 8112 	bcs.w	8000bca <__udivmoddi4+0x27e>
 80009a6:	4299      	cmp	r1, r3
 80009a8:	f240 810f 	bls.w	8000bca <__udivmoddi4+0x27e>
 80009ac:	3c02      	subs	r4, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	1a59      	subs	r1, r3, r1
 80009b2:	fa1f f38e 	uxth.w	r3, lr
 80009b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009ba:	fb07 1110 	mls	r1, r7, r0, r1
 80009be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009c2:	fb00 f606 	mul.w	r6, r0, r6
 80009c6:	429e      	cmp	r6, r3
 80009c8:	d90a      	bls.n	80009e0 <__udivmoddi4+0x94>
 80009ca:	eb1c 0303 	adds.w	r3, ip, r3
 80009ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80009d2:	f080 80fc 	bcs.w	8000bce <__udivmoddi4+0x282>
 80009d6:	429e      	cmp	r6, r3
 80009d8:	f240 80f9 	bls.w	8000bce <__udivmoddi4+0x282>
 80009dc:	4463      	add	r3, ip
 80009de:	3802      	subs	r0, #2
 80009e0:	1b9b      	subs	r3, r3, r6
 80009e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009e6:	2100      	movs	r1, #0
 80009e8:	b11d      	cbz	r5, 80009f2 <__udivmoddi4+0xa6>
 80009ea:	40d3      	lsrs	r3, r2
 80009ec:	2200      	movs	r2, #0
 80009ee:	e9c5 3200 	strd	r3, r2, [r5]
 80009f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d905      	bls.n	8000a06 <__udivmoddi4+0xba>
 80009fa:	b10d      	cbz	r5, 8000a00 <__udivmoddi4+0xb4>
 80009fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000a00:	2100      	movs	r1, #0
 8000a02:	4608      	mov	r0, r1
 8000a04:	e7f5      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000a06:	fab3 f183 	clz	r1, r3
 8000a0a:	2900      	cmp	r1, #0
 8000a0c:	d146      	bne.n	8000a9c <__udivmoddi4+0x150>
 8000a0e:	42a3      	cmp	r3, r4
 8000a10:	d302      	bcc.n	8000a18 <__udivmoddi4+0xcc>
 8000a12:	4290      	cmp	r0, r2
 8000a14:	f0c0 80f0 	bcc.w	8000bf8 <__udivmoddi4+0x2ac>
 8000a18:	1a86      	subs	r6, r0, r2
 8000a1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a1e:	2001      	movs	r0, #1
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d0e6      	beq.n	80009f2 <__udivmoddi4+0xa6>
 8000a24:	e9c5 6300 	strd	r6, r3, [r5]
 8000a28:	e7e3      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	f040 8090 	bne.w	8000b50 <__udivmoddi4+0x204>
 8000a30:	eba1 040c 	sub.w	r4, r1, ip
 8000a34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a38:	fa1f f78c 	uxth.w	r7, ip
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a46:	fb08 4416 	mls	r4, r8, r6, r4
 8000a4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a4e:	fb07 f006 	mul.w	r0, r7, r6
 8000a52:	4298      	cmp	r0, r3
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x11c>
 8000a56:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x11a>
 8000a60:	4298      	cmp	r0, r3
 8000a62:	f200 80cd 	bhi.w	8000c00 <__udivmoddi4+0x2b4>
 8000a66:	4626      	mov	r6, r4
 8000a68:	1a1c      	subs	r4, r3, r0
 8000a6a:	fa1f f38e 	uxth.w	r3, lr
 8000a6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a72:	fb08 4410 	mls	r4, r8, r0, r4
 8000a76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a7a:	fb00 f707 	mul.w	r7, r0, r7
 8000a7e:	429f      	cmp	r7, r3
 8000a80:	d908      	bls.n	8000a94 <__udivmoddi4+0x148>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a8a:	d202      	bcs.n	8000a92 <__udivmoddi4+0x146>
 8000a8c:	429f      	cmp	r7, r3
 8000a8e:	f200 80b0 	bhi.w	8000bf2 <__udivmoddi4+0x2a6>
 8000a92:	4620      	mov	r0, r4
 8000a94:	1bdb      	subs	r3, r3, r7
 8000a96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a9a:	e7a5      	b.n	80009e8 <__udivmoddi4+0x9c>
 8000a9c:	f1c1 0620 	rsb	r6, r1, #32
 8000aa0:	408b      	lsls	r3, r1
 8000aa2:	fa22 f706 	lsr.w	r7, r2, r6
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aac:	fa04 f301 	lsl.w	r3, r4, r1
 8000ab0:	ea43 030c 	orr.w	r3, r3, ip
 8000ab4:	40f4      	lsrs	r4, r6
 8000ab6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aba:	0c38      	lsrs	r0, r7, #16
 8000abc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ac0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ac4:	fa1f fc87 	uxth.w	ip, r7
 8000ac8:	fb00 441e 	mls	r4, r0, lr, r4
 8000acc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ad0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ad4:	45a1      	cmp	r9, r4
 8000ad6:	fa02 f201 	lsl.w	r2, r2, r1
 8000ada:	d90a      	bls.n	8000af2 <__udivmoddi4+0x1a6>
 8000adc:	193c      	adds	r4, r7, r4
 8000ade:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ae2:	f080 8084 	bcs.w	8000bee <__udivmoddi4+0x2a2>
 8000ae6:	45a1      	cmp	r9, r4
 8000ae8:	f240 8081 	bls.w	8000bee <__udivmoddi4+0x2a2>
 8000aec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000af0:	443c      	add	r4, r7
 8000af2:	eba4 0409 	sub.w	r4, r4, r9
 8000af6:	fa1f f983 	uxth.w	r9, r3
 8000afa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000afe:	fb00 4413 	mls	r4, r0, r3, r4
 8000b02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b0a:	45a4      	cmp	ip, r4
 8000b0c:	d907      	bls.n	8000b1e <__udivmoddi4+0x1d2>
 8000b0e:	193c      	adds	r4, r7, r4
 8000b10:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b14:	d267      	bcs.n	8000be6 <__udivmoddi4+0x29a>
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	d965      	bls.n	8000be6 <__udivmoddi4+0x29a>
 8000b1a:	3b02      	subs	r3, #2
 8000b1c:	443c      	add	r4, r7
 8000b1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b22:	fba0 9302 	umull	r9, r3, r0, r2
 8000b26:	eba4 040c 	sub.w	r4, r4, ip
 8000b2a:	429c      	cmp	r4, r3
 8000b2c:	46ce      	mov	lr, r9
 8000b2e:	469c      	mov	ip, r3
 8000b30:	d351      	bcc.n	8000bd6 <__udivmoddi4+0x28a>
 8000b32:	d04e      	beq.n	8000bd2 <__udivmoddi4+0x286>
 8000b34:	b155      	cbz	r5, 8000b4c <__udivmoddi4+0x200>
 8000b36:	ebb8 030e 	subs.w	r3, r8, lr
 8000b3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b42:	40cb      	lsrs	r3, r1
 8000b44:	431e      	orrs	r6, r3
 8000b46:	40cc      	lsrs	r4, r1
 8000b48:	e9c5 6400 	strd	r6, r4, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	e750      	b.n	80009f2 <__udivmoddi4+0xa6>
 8000b50:	f1c2 0320 	rsb	r3, r2, #32
 8000b54:	fa20 f103 	lsr.w	r1, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b60:	4094      	lsls	r4, r2
 8000b62:	430c      	orrs	r4, r1
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b6c:	fa1f f78c 	uxth.w	r7, ip
 8000b70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b74:	fb08 3110 	mls	r1, r8, r0, r3
 8000b78:	0c23      	lsrs	r3, r4, #16
 8000b7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7e:	fb00 f107 	mul.w	r1, r0, r7
 8000b82:	4299      	cmp	r1, r3
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0x24c>
 8000b86:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b8e:	d22c      	bcs.n	8000bea <__udivmoddi4+0x29e>
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d92a      	bls.n	8000bea <__udivmoddi4+0x29e>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ba0:	fb08 3311 	mls	r3, r8, r1, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb01 f307 	mul.w	r3, r1, r7
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x276>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bb8:	d213      	bcs.n	8000be2 <__udivmoddi4+0x296>
 8000bba:	42a3      	cmp	r3, r4
 8000bbc:	d911      	bls.n	8000be2 <__udivmoddi4+0x296>
 8000bbe:	3902      	subs	r1, #2
 8000bc0:	4464      	add	r4, ip
 8000bc2:	1ae4      	subs	r4, r4, r3
 8000bc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bc8:	e739      	b.n	8000a3e <__udivmoddi4+0xf2>
 8000bca:	4604      	mov	r4, r0
 8000bcc:	e6f0      	b.n	80009b0 <__udivmoddi4+0x64>
 8000bce:	4608      	mov	r0, r1
 8000bd0:	e706      	b.n	80009e0 <__udivmoddi4+0x94>
 8000bd2:	45c8      	cmp	r8, r9
 8000bd4:	d2ae      	bcs.n	8000b34 <__udivmoddi4+0x1e8>
 8000bd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000bda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000bde:	3801      	subs	r0, #1
 8000be0:	e7a8      	b.n	8000b34 <__udivmoddi4+0x1e8>
 8000be2:	4631      	mov	r1, r6
 8000be4:	e7ed      	b.n	8000bc2 <__udivmoddi4+0x276>
 8000be6:	4603      	mov	r3, r0
 8000be8:	e799      	b.n	8000b1e <__udivmoddi4+0x1d2>
 8000bea:	4630      	mov	r0, r6
 8000bec:	e7d4      	b.n	8000b98 <__udivmoddi4+0x24c>
 8000bee:	46d6      	mov	lr, sl
 8000bf0:	e77f      	b.n	8000af2 <__udivmoddi4+0x1a6>
 8000bf2:	4463      	add	r3, ip
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	e74d      	b.n	8000a94 <__udivmoddi4+0x148>
 8000bf8:	4606      	mov	r6, r0
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	e70f      	b.n	8000a20 <__udivmoddi4+0xd4>
 8000c00:	3e02      	subs	r6, #2
 8000c02:	4463      	add	r3, ip
 8000c04:	e730      	b.n	8000a68 <__udivmoddi4+0x11c>
 8000c06:	bf00      	nop

08000c08 <__aeabi_idiv0>:
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <CAN1_START_IRQ>:

static uint32_t TxMailbox = CAN_TX_MAILBOX0;
static CAN_TxHeaderTypeDef TxHeader;
static uint8_t TxData[8];

void CAN1_START_IRQ() {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000c10:	480f      	ldr	r0, [pc, #60]	@ (8000c50 <CAN1_START_IRQ+0x44>)
 8000c12:	f001 fc19 	bl	8002448 <HAL_CAN_Start>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <CAN1_START_IRQ+0x14>
		Error_Handler();
 8000c1c:	f001 f808 	bl	8001c30 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 8000c20:	2104      	movs	r1, #4
 8000c22:	480b      	ldr	r0, [pc, #44]	@ (8000c50 <CAN1_START_IRQ+0x44>)
 8000c24:	f001 fe46 	bl	80028b4 <HAL_CAN_ActivateNotification>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <CAN1_START_IRQ+0x26>
		Error_Handler();
 8000c2e:	f000 ffff 	bl	8001c30 <Error_Handler>
	}

	TxHeader.StdId = ADDR_3508_SET_ID0;
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <CAN1_START_IRQ+0x48>)
 8000c34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c38:	601a      	str	r2, [r3, #0]
	TxHeader.IDE = CAN_ID_STD;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <CAN1_START_IRQ+0x48>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000c40:	4b04      	ldr	r3, [pc, #16]	@ (8000c54 <CAN1_START_IRQ+0x48>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 0x08;
 8000c46:	4b03      	ldr	r3, [pc, #12]	@ (8000c54 <CAN1_START_IRQ+0x48>)
 8000c48:	2208      	movs	r2, #8
 8000c4a:	611a      	str	r2, [r3, #16]
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000374 	.word	0x20000374
 8000c54:	20000064 	.word	0x20000064

08000c58 <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan) {
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c66:	4825      	ldr	r0, [pc, #148]	@ (8000cfc <HAL_CAN_RxFifo0FullCallback+0xa4>)
 8000c68:	f002 fbe6 	bl	8003438 <HAL_GPIO_WritePin>
	static uint8_t RxData[8];
	static CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000c6c:	4b24      	ldr	r3, [pc, #144]	@ (8000d00 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 8000c6e:	4a25      	ldr	r2, [pc, #148]	@ (8000d04 <HAL_CAN_RxFifo0FullCallback+0xac>)
 8000c70:	2100      	movs	r1, #0
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f001 fcfc 	bl	8002670 <HAL_CAN_GetRxMessage>
	uint32_t ID_NUM;
	ID_NUM = RxHeader.StdId - ADDR_3508_GET_ID1;
 8000c78:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <HAL_CAN_RxFifo0FullCallback+0xac>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000c80:	60fb      	str	r3, [r7, #12]
	if (ID_NUM == MotorX || ID_NUM == MotorY) {
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d002      	beq.n	8000c8e <HAL_CAN_RxFifo0FullCallback+0x36>
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d12b      	bne.n	8000ce6 <HAL_CAN_RxFifo0FullCallback+0x8e>
		if (Motor[ID_NUM].MSG_COUNT++ <= 50) {
 8000c8e:	491e      	ldr	r1, [pc, #120]	@ (8000d08 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	4613      	mov	r3, r2
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	1a9b      	subs	r3, r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	3318      	adds	r3, #24
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	1c50      	adds	r0, r2, #1
 8000ca2:	4c19      	ldr	r4, [pc, #100]	@ (8000d08 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000ca4:	68f9      	ldr	r1, [r7, #12]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	1a5b      	subs	r3, r3, r1
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4423      	add	r3, r4
 8000cb0:	3318      	adds	r3, #24
 8000cb2:	6018      	str	r0, [r3, #0]
 8000cb4:	2a32      	cmp	r2, #50	@ 0x32
 8000cb6:	d80b      	bhi.n	8000cd0 <HAL_CAN_RxFifo0FullCallback+0x78>
			Motor_GetInitPosition(&Motor[ID_NUM], RxData);
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4a11      	ldr	r2, [pc, #68]	@ (8000d08 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000cc4:	4413      	add	r3, r2
 8000cc6:	490e      	ldr	r1, [pc, #56]	@ (8000d00 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 f88b 	bl	8000de4 <Motor_GetInitPosition>
 8000cce:	e00a      	b.n	8000ce6 <HAL_CAN_RxFifo0FullCallback+0x8e>
		} else
			Motor_ResolveFeedbackData(&Motor[ID_NUM], RxData);
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4a0b      	ldr	r2, [pc, #44]	@ (8000d08 <HAL_CAN_RxFifo0FullCallback+0xb0>)
 8000cdc:	4413      	add	r3, r2
 8000cde:	4908      	ldr	r1, [pc, #32]	@ (8000d00 <HAL_CAN_RxFifo0FullCallback+0xa8>)
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f813 	bl	8000d0c <Motor_ResolveFeedbackData>
	}
	HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cec:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <HAL_CAN_RxFifo0FullCallback+0xa4>)
 8000cee:	f002 fba3 	bl	8003438 <HAL_GPIO_WritePin>
}
 8000cf2:	bf00      	nop
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40021800 	.word	0x40021800
 8000d00:	200000a0 	.word	0x200000a0
 8000d04:	20000084 	.word	0x20000084
 8000d08:	2000002c 	.word	0x2000002c

08000d0c <Motor_ResolveFeedbackData>:

void Motor_ResolveFeedbackData(MotorDataTypeDef *MOTOR_STR, uint8_t DATA[]) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
	MOTOR_STR->LAST_ANGLE = MOTOR_STR->CURR_ANGLE;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	88da      	ldrh	r2, [r3, #6]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	811a      	strh	r2, [r3, #8]
	MOTOR_STR->CURR_ANGLE = (uint16_t) (DATA[0] << 8 | DATA[1]);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b21a      	sxth	r2, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b21b      	sxth	r3, r3
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	80da      	strh	r2, [r3, #6]
	MOTOR_STR->RPM = (int16_t) (DATA[2] << 8 | DATA[3]);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	3302      	adds	r3, #2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	3303      	adds	r3, #3
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	801a      	strh	r2, [r3, #0]
	MOTOR_STR->I_REAL = (int16_t) (DATA[4] << 8 | DATA[5]) / -5;
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	3304      	adds	r3, #4
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	3305      	adds	r3, #5
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	4a1d      	ldr	r2, [pc, #116]	@ (8000de0 <Motor_ResolveFeedbackData+0xd4>)
 8000d6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d6e:	1052      	asrs	r2, r2, #1
 8000d70:	17db      	asrs	r3, r3, #31
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	805a      	strh	r2, [r3, #2]
	MOTOR_STR->TEMPERATURE = DATA[6];
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	799a      	ldrb	r2, [r3, #6]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	731a      	strb	r2, [r3, #12]

	if (MOTOR_STR->CURR_ANGLE - MOTOR_STR->LAST_ANGLE > 4096)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	88db      	ldrh	r3, [r3, #6]
 8000d86:	461a      	mov	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	891b      	ldrh	r3, [r3, #8]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d92:	dd05      	ble.n	8000da0 <Motor_ResolveFeedbackData+0x94>
		MOTOR_STR->ROUNDS--;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	1e5a      	subs	r2, r3, #1
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	e00d      	b.n	8000dbc <Motor_ResolveFeedbackData+0xb0>
	else if (MOTOR_STR->CURR_ANGLE - MOTOR_STR->LAST_ANGLE < -4096)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	88db      	ldrh	r3, [r3, #6]
 8000da4:	461a      	mov	r2, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	891b      	ldrh	r3, [r3, #8]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 8000db0:	da04      	bge.n	8000dbc <Motor_ResolveFeedbackData+0xb0>
		MOTOR_STR->ROUNDS++;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	691b      	ldr	r3, [r3, #16]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	611a      	str	r2, [r3, #16]

	MOTOR_STR->TOTAL_ANGLE = MOTOR_STR->ROUNDS * 8192 + MOTOR_STR->CURR_ANGLE
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	035b      	lsls	r3, r3, #13
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	88d2      	ldrh	r2, [r2, #6]
 8000dc6:	4413      	add	r3, r2
			- MOTOR_STR->OFFSET_ANGLE;
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	8952      	ldrh	r2, [r2, #10]
 8000dcc:	1a9a      	subs	r2, r3, r2
	MOTOR_STR->TOTAL_ANGLE = MOTOR_STR->ROUNDS * 8192 + MOTOR_STR->CURR_ANGLE
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	615a      	str	r2, [r3, #20]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	66666667 	.word	0x66666667

08000de4 <Motor_GetInitPosition>:

void Motor_GetInitPosition(MotorDataTypeDef *MOTOR_STR, uint8_t DATA[]) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
	MOTOR_STR->CURR_ANGLE = (uint16_t) (DATA[0] << 8 | DATA[1]);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	b21b      	sxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	80da      	strh	r2, [r3, #6]
	MOTOR_STR->OFFSET_ANGLE = MOTOR_STR->CURR_ANGLE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	88da      	ldrh	r2, [r3, #6]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	815a      	strh	r2, [r3, #10]
}
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <Motor_SendCmd>:

void Motor_SendCmd(int16_t I1, int16_t I2) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	460a      	mov	r2, r1
 8000e26:	80fb      	strh	r3, [r7, #6]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	80bb      	strh	r3, [r7, #4]
	TxData[0] = I1 >> 8;
 8000e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e30:	121b      	asrs	r3, r3, #8
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <Motor_SendCmd+0x5c>)
 8000e38:	701a      	strb	r2, [r3, #0]
	TxData[1] = I1;
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <Motor_SendCmd+0x5c>)
 8000e40:	705a      	strb	r2, [r3, #1]
	TxData[2] = I2 >> 8;
 8000e42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e46:	121b      	asrs	r3, r3, #8
 8000e48:	b21b      	sxth	r3, r3
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <Motor_SendCmd+0x5c>)
 8000e4e:	709a      	strb	r2, [r3, #2]
	TxData[3] = I2;
 8000e50:	88bb      	ldrh	r3, [r7, #4]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <Motor_SendCmd+0x5c>)
 8000e56:	70da      	strb	r2, [r3, #3]
	if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK) {
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <Motor_SendCmd+0x60>)
 8000e5a:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <Motor_SendCmd+0x5c>)
 8000e5c:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <Motor_SendCmd+0x64>)
 8000e5e:	4809      	ldr	r0, [pc, #36]	@ (8000e84 <Motor_SendCmd+0x68>)
 8000e60:	f001 fb36 	bl	80024d0 <HAL_CAN_AddTxMessage>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <Motor_SendCmd+0x52>
		Error_Handler();
 8000e6a:	f000 fee1 	bl	8001c30 <Error_Handler>
	}
//	HAL_UART_Receive_IT(IBUS_UART, rx_buffer, 32);
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000007c 	.word	0x2000007c
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000064 	.word	0x20000064
 8000e84:	20000374 	.word	0x20000374

08000e88 <abs_limit>:
#include "USR_PID.h"
#include <math.h>

#define ABS(x) ( (x>0) ? (x) : (-x) )

void abs_limit(double *a, double ABS_MAX) {
 8000e88:	b5b0      	push	{r4, r5, r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6178      	str	r0, [r7, #20]
 8000e90:	ed87 0b02 	vstr	d0, [r7, #8]
	if (*a > ABS_MAX)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e9e:	f7ff fced 	bl	800087c <__aeabi_dcmplt>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <abs_limit+0x2a>
		*a = ABS_MAX;
 8000ea8:	6979      	ldr	r1, [r7, #20]
 8000eaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000eae:	e9c1 2300 	strd	r2, r3, [r1]
	if (*a < -ABS_MAX)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ec8:	f7ff fcd8 	bl	800087c <__aeabi_dcmplt>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <abs_limit+0x4c>
		*a = -ABS_MAX;
}
 8000ed2:	e006      	b.n	8000ee2 <abs_limit+0x5a>
		*a = -ABS_MAX;
 8000ed4:	68bc      	ldr	r4, [r7, #8]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bdb0      	pop	{r4, r5, r7, pc}

08000eea <pid_param_init>:

static void pid_param_init(PID_TypeDef *pid, uint32_t maxout,
		uint32_t intergral_limit, double kp, double ki, double kd) {
 8000eea:	b480      	push	{r7}
 8000eec:	b08b      	sub	sp, #44	@ 0x2c
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6278      	str	r0, [r7, #36]	@ 0x24
 8000ef2:	6239      	str	r1, [r7, #32]
 8000ef4:	61fa      	str	r2, [r7, #28]
 8000ef6:	ed87 0b04 	vstr	d0, [r7, #16]
 8000efa:	ed87 1b02 	vstr	d1, [r7, #8]
 8000efe:	ed87 2b00 	vstr	d2, [r7]

	pid->IntegralLimit = intergral_limit;
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	69fa      	ldr	r2, [r7, #28]
 8000f06:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	pid->MaxOutput = maxout;
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0c:	6a3a      	ldr	r2, [r7, #32]
 8000f0e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	pid->p = kp;
 8000f12:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f18:	e9c1 2300 	strd	r2, r3, [r1]
	pid->i = ki;
 8000f1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid->d = kd;
 8000f26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000f30:	bf00      	nop
 8000f32:	372c      	adds	r7, #44	@ 0x2c
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <pid_reset>:

static void pid_reset(PID_TypeDef *pid, double kp, double ki, double kd) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	@ 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	61f8      	str	r0, [r7, #28]
 8000f44:	ed87 0b04 	vstr	d0, [r7, #16]
 8000f48:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f4c:	ed87 2b00 	vstr	d2, [r7]
	pid->p = kp;
 8000f50:	69f9      	ldr	r1, [r7, #28]
 8000f52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f56:	e9c1 2300 	strd	r2, r3, [r1]
	pid->i = ki;
 8000f5a:	69f9      	ldr	r1, [r7, #28]
 8000f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f60:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid->d = kd;
 8000f64:	69f9      	ldr	r1, [r7, #28]
 8000f66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f6a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8000f6e:	bf00      	nop
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PID_Calculate>:

double PID_Calculate(PID_TypeDef *pid, double get, double set) {
 8000f7a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6178      	str	r0, [r7, #20]
 8000f84:	ed87 0b02 	vstr	d0, [r7, #8]
 8000f88:	ed87 1b00 	vstr	d1, [r7]
	pid->get[CURR] = get;
 8000f8c:	6979      	ldr	r1, [r7, #20]
 8000f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f92:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	pid->set[CURR] = set;
 8000f96:	6979      	ldr	r1, [r7, #20]
 8000f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f9c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	pid->err[CURR] = set - get;	//set - measure
 8000fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fa8:	f7ff fa50 	bl	800044c <__aeabi_dsub>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	6979      	ldr	r1, [r7, #20]
 8000fb2:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	if (pid->MaxErr != 0 && ABS(pid->err[CURR]) > pid->MaxErr)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	e9d3 0122 	ldrd	r0, r1, [r3, #136]	@ 0x88
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	f7ff fc50 	bl	8000868 <__aeabi_dcmpeq>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d124      	bne.n	8001018 <PID_Calculate+0x9e>
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	f7ff fc6c 	bl	80008b8 <__aeabi_dcmpgt>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <PID_Calculate+0x74>
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	e9d3 891c 	ldrd	r8, r9, [r3, #112]	@ 0x70
 8000fec:	e005      	b.n	8000ffa <PID_Calculate+0x80>
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8000ff4:	4690      	mov	r8, r2
 8000ff6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001000:	4640      	mov	r0, r8
 8001002:	4649      	mov	r1, r9
 8001004:	f7ff fc58 	bl	80008b8 <__aeabi_dcmpgt>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d004      	beq.n	8001018 <PID_Calculate+0x9e>
		return 0;
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	e0cc      	b.n	80011b2 <PID_Calculate+0x238>
	if (pid->DeadBand != 0 && ABS(pid->err[CURR]) < pid->DeadBand)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	@ 0x90
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	f7ff fc1f 	bl	8000868 <__aeabi_dcmpeq>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d124      	bne.n	800107a <PID_Calculate+0x100>
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	f04f 0300 	mov.w	r3, #0
 800103e:	f7ff fc3b 	bl	80008b8 <__aeabi_dcmpgt>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <PID_Calculate+0xd6>
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	e9d3 451c 	ldrd	r4, r5, [r3, #112]	@ 0x70
 800104e:	e005      	b.n	800105c <PID_Calculate+0xe2>
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001056:	4614      	mov	r4, r2
 8001058:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8001062:	4620      	mov	r0, r4
 8001064:	4629      	mov	r1, r5
 8001066:	f7ff fc09 	bl	800087c <__aeabi_dcmplt>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d004      	beq.n	800107a <PID_Calculate+0x100>
		return 0;
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	f04f 0300 	mov.w	r3, #0
 8001078:	e09b      	b.n	80011b2 <PID_Calculate+0x238>

	pid->pout = pid->p * pid->err[CURR];
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001086:	f7ff f8b3 	bl	80001f0 <__aeabi_dmul>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pid->iout += pid->i * pid->err[CURR];
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80010a6:	f7ff f8a3 	bl	80001f0 <__aeabi_dmul>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	4620      	mov	r0, r4
 80010b0:	4629      	mov	r1, r5
 80010b2:	f7ff f9cd 	bl	8000450 <__adddf3>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	6979      	ldr	r1, [r7, #20]
 80010bc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	pid->dout = pid->d * (pid->err[CURR] - pid->err[PREV1]);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80010d2:	f7ff f9bb 	bl	800044c <__aeabi_dsub>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4620      	mov	r0, r4
 80010dc:	4629      	mov	r1, r5
 80010de:	f7ff f887 	bl	80001f0 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	6979      	ldr	r1, [r7, #20]
 80010e8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	abs_limit(&(pid->iout), pid->IntegralLimit);
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f103 0420 	add.w	r4, r3, #32
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fae5 	bl	80006c8 <__aeabi_ui2d>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	ec43 2b10 	vmov	d0, r2, r3
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff febe 	bl	8000e88 <abs_limit>
	pid->Output = pid->pout + pid->iout + pid->dout;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001118:	f7ff f99a 	bl	8000450 <__adddf3>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800112a:	f7ff f991 	bl	8000450 <__adddf3>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	6979      	ldr	r1, [r7, #20]
 8001134:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	abs_limit(&(pid->Output), pid->MaxOutput);
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f103 0478 	add.w	r4, r3, #120	@ 0x78
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fabf 	bl	80006c8 <__aeabi_ui2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	ec43 2b10 	vmov	d0, r2, r3
 8001152:	4620      	mov	r0, r4
 8001154:	f7ff fe98 	bl	8000e88 <abs_limit>
	pid->Output_Prev = pid->Output;	//update last time
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800115e:	6979      	ldr	r1, [r7, #20]
 8001160:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

	pid->err[PREV2] = pid->err[PREV1];
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800116a:	6979      	ldr	r1, [r7, #20]
 800116c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	pid->err[PREV1] = pid->err[CURR];
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8001176:	6979      	ldr	r1, [r7, #20]
 8001178:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	pid->get[PREV2] = pid->get[PREV1];
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001182:	6979      	ldr	r1, [r7, #20]
 8001184:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	pid->get[PREV1] = pid->get[CURR];
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800118e:	6979      	ldr	r1, [r7, #20]
 8001190:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	pid->set[PREV2] = pid->set[PREV1];
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800119a:	6979      	ldr	r1, [r7, #20]
 800119c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	pid->set[PREV1] = pid->set[CURR];
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80011a6:	6979      	ldr	r1, [r7, #20]
 80011a8:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	return pid->Output;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
}
 80011b2:	ec43 2b17 	vmov	d7, r2, r3
 80011b6:	eeb0 0a47 	vmov.f32	s0, s14
 80011ba:	eef0 0a67 	vmov.f32	s1, s15
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080011c8 <PID_StructInit>:

void PID_StructInit(PID_TypeDef *pid, uint32_t maxout,
		uint32_t I_Limit, double kp, double ki, double kd, double deadband) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	@ 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80011d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80011d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80011d4:	ed87 0b06 	vstr	d0, [r7, #24]
 80011d8:	ed87 1b04 	vstr	d1, [r7, #16]
 80011dc:	ed87 2b02 	vstr	d2, [r7, #8]
 80011e0:	ed87 3b00 	vstr	d3, [r7]

	pid->f_param_init = pid_param_init;
 80011e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001220 <PID_StructInit+0x58>)
 80011e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	pid->f_pid_reset = pid_reset;
 80011ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001224 <PID_StructInit+0x5c>)
 80011f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	pid->f_param_init(pid, maxout, I_Limit, kp, ki, kd);
 80011f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80011fa:	ed97 2b02 	vldr	d2, [r7, #8]
 80011fe:	ed97 1b04 	vldr	d1, [r7, #16]
 8001202:	ed97 0b06 	vldr	d0, [r7, #24]
 8001206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800120a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800120c:	4798      	blx	r3
	pid->DeadBand = deadband;
 800120e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001210:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001214:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
}
 8001218:	bf00      	nop
 800121a:	3730      	adds	r7, #48	@ 0x30
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	08000eeb 	.word	0x08000eeb
 8001224:	08000f3d 	.word	0x08000f3d

08001228 <iBUS_Start_RxIT>:
#include <stdio.h>

uint8_t iBUS_UART_RxBuffer[30], iBUS_UART_RxHead_A, iBUS_UART_RxHead_B;
uint16_t iBUS_Channel[6] = { 0 };

void iBUS_Start_RxIT() {
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(iBUS_UART, &iBUS_UART_RxHead_A, 1);
 800122c:	2201      	movs	r2, #1
 800122e:	4903      	ldr	r1, [pc, #12]	@ (800123c <iBUS_Start_RxIT+0x14>)
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <iBUS_Start_RxIT+0x18>)
 8001232:	f002 feaa 	bl	8003f8a <HAL_UART_Receive_IT>
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000366 	.word	0x20000366
 8001240:	200003a4 	.word	0x200003a4

08001244 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == IBUS_UART_INSTANCE) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a0f      	ldr	r2, [pc, #60]	@ (8001290 <HAL_UART_RxCpltCallback+0x4c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d118      	bne.n	8001288 <HAL_UART_RxCpltCallback+0x44>
		if (iBUS_UART_RxHead_A == 0x20) {
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_UART_RxCpltCallback+0x50>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b20      	cmp	r3, #32
 800125c:	d112      	bne.n	8001284 <HAL_UART_RxCpltCallback+0x40>
			HAL_UART_Receive(iBUS_UART, &iBUS_UART_RxHead_B, 1, 10);
 800125e:	230a      	movs	r3, #10
 8001260:	2201      	movs	r2, #1
 8001262:	490d      	ldr	r1, [pc, #52]	@ (8001298 <HAL_UART_RxCpltCallback+0x54>)
 8001264:	480d      	ldr	r0, [pc, #52]	@ (800129c <HAL_UART_RxCpltCallback+0x58>)
 8001266:	f002 fdf9 	bl	8003e5c <HAL_UART_Receive>
			if (iBUS_UART_RxHead_B == 0x40) {
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <HAL_UART_RxCpltCallback+0x54>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b40      	cmp	r3, #64	@ 0x40
 8001270:	d108      	bne.n	8001284 <HAL_UART_RxCpltCallback+0x40>
				HAL_UART_Receive(iBUS_UART, iBUS_UART_RxBuffer, 30, 10);
 8001272:	230a      	movs	r3, #10
 8001274:	221e      	movs	r2, #30
 8001276:	490a      	ldr	r1, [pc, #40]	@ (80012a0 <HAL_UART_RxCpltCallback+0x5c>)
 8001278:	4808      	ldr	r0, [pc, #32]	@ (800129c <HAL_UART_RxCpltCallback+0x58>)
 800127a:	f002 fdef 	bl	8003e5c <HAL_UART_Receive>
				IBUS_ResolveData(6);
 800127e:	2006      	movs	r0, #6
 8001280:	f000 f810 	bl	80012a4 <IBUS_ResolveData>
			}
		}
		iBUS_Start_RxIT();
 8001284:	f7ff ffd0 	bl	8001228 <iBUS_Start_RxIT>
	}
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40007800 	.word	0x40007800
 8001294:	20000366 	.word	0x20000366
 8001298:	20000367 	.word	0x20000367
 800129c:	200003a4 	.word	0x200003a4
 80012a0:	20000348 	.word	0x20000348

080012a4 <IBUS_ResolveData>:

void IBUS_ResolveData(uint8_t user_channels) {
 80012a4:	b480      	push	{r7}
 80012a6:	b08d      	sub	sp, #52	@ 0x34
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	uint16_t iBUS_Channel_Temp[14], CheckSum_Calc, iBus_RxCheckSum;

	CheckSum_Calc = 0xFF9F;
 80012ae:	f64f 739f 	movw	r3, #65439	@ 0xff9f
 80012b2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	for (uint8_t i = 0; i < 14; i++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80012ba:	e02d      	b.n	8001318 <IBUS_ResolveData+0x74>
		iBUS_Channel_Temp[i] = (uint16_t) (iBUS_UART_RxBuffer[i * 2 + 1] << 8
 80012bc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	3301      	adds	r3, #1
 80012c4:	4a2d      	ldr	r2, [pc, #180]	@ (800137c <IBUS_ResolveData+0xd8>)
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	021b      	lsls	r3, r3, #8
				| iBUS_UART_RxBuffer[i * 2]);
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	492a      	ldr	r1, [pc, #168]	@ (800137c <IBUS_ResolveData+0xd8>)
 80012d4:	5ccb      	ldrb	r3, [r1, r3]
 80012d6:	b21b      	sxth	r3, r3
 80012d8:	4313      	orrs	r3, r2
 80012da:	b21a      	sxth	r2, r3
		iBUS_Channel_Temp[i] = (uint16_t) (iBUS_UART_RxBuffer[i * 2 + 1] << 8
 80012dc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012e0:	b292      	uxth	r2, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	3330      	adds	r3, #48	@ 0x30
 80012e6:	443b      	add	r3, r7
 80012e8:	f823 2c24 	strh.w	r2, [r3, #-36]
		CheckSum_Calc = CheckSum_Calc - iBUS_UART_RxBuffer[i * 2 + 1]
 80012ec:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	3301      	adds	r3, #1
 80012f4:	4a21      	ldr	r2, [pc, #132]	@ (800137c <IBUS_ResolveData+0xd8>)
 80012f6:	5cd3      	ldrb	r3, [r2, r3]
 80012f8:	461a      	mov	r2, r3
 80012fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	b29b      	uxth	r3, r3
				- iBUS_UART_RxBuffer[i * 2];
 8001300:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8001304:	0052      	lsls	r2, r2, #1
 8001306:	491d      	ldr	r1, [pc, #116]	@ (800137c <IBUS_ResolveData+0xd8>)
 8001308:	5c8a      	ldrb	r2, [r1, r2]
		CheckSum_Calc = CheckSum_Calc - iBUS_UART_RxBuffer[i * 2 + 1]
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for (uint8_t i = 0; i < 14; i++) {
 800130e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001312:	3301      	adds	r3, #1
 8001314:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001318:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800131c:	2b0d      	cmp	r3, #13
 800131e:	d9cd      	bls.n	80012bc <IBUS_ResolveData+0x18>
	}

	iBus_RxCheckSum = iBUS_UART_RxBuffer[29] << 8 | iBUS_UART_RxBuffer[28];
 8001320:	4b16      	ldr	r3, [pc, #88]	@ (800137c <IBUS_ResolveData+0xd8>)
 8001322:	7f5b      	ldrb	r3, [r3, #29]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	b21a      	sxth	r2, r3
 8001328:	4b14      	ldr	r3, [pc, #80]	@ (800137c <IBUS_ResolveData+0xd8>)
 800132a:	7f1b      	ldrb	r3, [r3, #28]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21b      	sxth	r3, r3
 8001332:	857b      	strh	r3, [r7, #42]	@ 0x2a

	if (CheckSum_Calc == iBus_RxCheckSum) {
 8001334:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001336:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001338:	429a      	cmp	r2, r3
 800133a:	d119      	bne.n	8001370 <IBUS_ResolveData+0xcc>
		for (uint8_t j = 0; j < user_channels; j++) {
 800133c:	2300      	movs	r3, #0
 800133e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8001342:	e010      	b.n	8001366 <IBUS_ResolveData+0xc2>
			iBUS_Channel[j] = iBUS_Channel_Temp[j];
 8001344:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001348:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3330      	adds	r3, #48	@ 0x30
 8001350:	443b      	add	r3, r7
 8001352:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <IBUS_ResolveData+0xdc>)
 8001358:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for (uint8_t j = 0; j < user_channels; j++) {
 800135c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001360:	3301      	adds	r3, #1
 8001362:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8001366:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3e9      	bcc.n	8001344 <IBUS_ResolveData+0xa0>
		}
	}
}
 8001370:	bf00      	nop
 8001372:	3734      	adds	r7, #52	@ 0x34
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000348 	.word	0x20000348
 8001380:	20000368 	.word	0x20000368
 8001384:	00000000 	.word	0x00000000

08001388 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800138c:	f000 fdea 	bl	8001f64 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001390:	f000 f946 	bl	8001620 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001394:	f000 fa66 	bl	8001864 <MX_GPIO_Init>
	MX_CAN1_Init();
 8001398:	f000 f9d0 	bl	800173c <MX_CAN1_Init>
	MX_UART7_Init();
 800139c:	f000 fa38 	bl	8001810 <MX_UART7_Init>
	MX_CRC_Init();
 80013a0:	f000 fa22 	bl	80017e8 <MX_CRC_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 80013a4:	f000 f9ae 	bl	8001704 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(POWER1_CTRL_GPIO_Port, POWER1_CTRL_Pin, GPIO_PIN_SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2104      	movs	r1, #4
 80013ac:	488e      	ldr	r0, [pc, #568]	@ (80015e8 <main+0x260>)
 80013ae:	f002 f843 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(POWER3_CTRL_GPIO_Port, POWER3_CTRL_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2110      	movs	r1, #16
 80013b6:	488c      	ldr	r0, [pc, #560]	@ (80015e8 <main+0x260>)
 80013b8:	f002 f83e 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013c2:	488a      	ldr	r0, [pc, #552]	@ (80015ec <main+0x264>)
 80013c4:	f002 f838 	bl	8003438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GND_OF_5VO_GPIO_Port, GND_OF_5VO_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ce:	4888      	ldr	r0, [pc, #544]	@ (80015f0 <main+0x268>)
 80013d0:	f002 f832 	bl	8003438 <HAL_GPIO_WritePin>

	PID_StructInit(&PID_MotorSpeed[MotorX], 4000.f, 10000.f, 5.0f, 0, 5.1f, 0);
 80013d4:	ed9f 3b7a 	vldr	d3, [pc, #488]	@ 80015c0 <main+0x238>
 80013d8:	ed9f 2b7b 	vldr	d2, [pc, #492]	@ 80015c8 <main+0x240>
 80013dc:	ed9f 1b78 	vldr	d1, [pc, #480]	@ 80015c0 <main+0x238>
 80013e0:	ed9f 0b7b 	vldr	d0, [pc, #492]	@ 80015d0 <main+0x248>
 80013e4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80013e8:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 80013ec:	4881      	ldr	r0, [pc, #516]	@ (80015f4 <main+0x26c>)
 80013ee:	f7ff feeb 	bl	80011c8 <PID_StructInit>
	PID_StructInit(&PID_MotorSpeed[MotorY], 4000.f, 10000.f, 5.0f, 0, 5.0f, 0);
 80013f2:	ed9f 3b73 	vldr	d3, [pc, #460]	@ 80015c0 <main+0x238>
 80013f6:	ed9f 2b76 	vldr	d2, [pc, #472]	@ 80015d0 <main+0x248>
 80013fa:	ed9f 1b71 	vldr	d1, [pc, #452]	@ 80015c0 <main+0x238>
 80013fe:	ed9f 0b74 	vldr	d0, [pc, #464]	@ 80015d0 <main+0x248>
 8001402:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001406:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800140a:	487b      	ldr	r0, [pc, #492]	@ (80015f8 <main+0x270>)
 800140c:	f7ff fedc 	bl	80011c8 <PID_StructInit>
	PID_StructInit(&PID_MotorPosition[MotorX], 100000.f, 10000.f, 0.08f, 0, 0.84f, 0);
 8001410:	ed9f 3b6b 	vldr	d3, [pc, #428]	@ 80015c0 <main+0x238>
 8001414:	ed9f 2b70 	vldr	d2, [pc, #448]	@ 80015d8 <main+0x250>
 8001418:	ed9f 1b69 	vldr	d1, [pc, #420]	@ 80015c0 <main+0x238>
 800141c:	ed9f 0b70 	vldr	d0, [pc, #448]	@ 80015e0 <main+0x258>
 8001420:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001424:	4975      	ldr	r1, [pc, #468]	@ (80015fc <main+0x274>)
 8001426:	4876      	ldr	r0, [pc, #472]	@ (8001600 <main+0x278>)
 8001428:	f7ff fece 	bl	80011c8 <PID_StructInit>
	PID_StructInit(&PID_MotorPosition[MotorY], 100000.f, 10000.f, 0.08f, 0, 0.84f, 0);
 800142c:	ed9f 3b64 	vldr	d3, [pc, #400]	@ 80015c0 <main+0x238>
 8001430:	ed9f 2b69 	vldr	d2, [pc, #420]	@ 80015d8 <main+0x250>
 8001434:	ed9f 1b62 	vldr	d1, [pc, #392]	@ 80015c0 <main+0x238>
 8001438:	ed9f 0b69 	vldr	d0, [pc, #420]	@ 80015e0 <main+0x258>
 800143c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001440:	496e      	ldr	r1, [pc, #440]	@ (80015fc <main+0x274>)
 8001442:	4870      	ldr	r0, [pc, #448]	@ (8001604 <main+0x27c>)
 8001444:	f7ff fec0 	bl	80011c8 <PID_StructInit>

	static double targetSpeed[2], targetPosition[2];
	targetSpeed[0] = 192;
 8001448:	496f      	ldr	r1, [pc, #444]	@ (8001608 <main+0x280>)
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b6f      	ldr	r3, [pc, #444]	@ (800160c <main+0x284>)
 8001450:	e9c1 2300 	strd	r2, r3, [r1]
	targetSpeed[1] = 192;
 8001454:	496c      	ldr	r1, [pc, #432]	@ (8001608 <main+0x280>)
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b6c      	ldr	r3, [pc, #432]	@ (800160c <main+0x284>)
 800145c:	e9c1 2302 	strd	r2, r3, [r1, #8]

	iBUS_Start_RxIT();
 8001460:	f7ff fee2 	bl	8001228 <iBUS_Start_RxIT>
	CAN1_START_IRQ();
 8001464:	f7ff fbd2 	bl	8000c0c <CAN1_START_IRQ>

	HAL_Delay(100);
 8001468:	2064      	movs	r0, #100	@ 0x64
 800146a:	f000 fded 	bl	8002048 <HAL_Delay>
	/* USER CODE END 2 */
	iBUS_Channel[0] = 1500;
 800146e:	4b68      	ldr	r3, [pc, #416]	@ (8001610 <main+0x288>)
 8001470:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001474:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		targetPosition[MotorX] += (iBUS_Channel[0] - 1500) * 1.2;
 8001476:	4b67      	ldr	r3, [pc, #412]	@ (8001614 <main+0x28c>)
 8001478:	e9d3 4500 	ldrd	r4, r5, [r3]
 800147c:	4b64      	ldr	r3, [pc, #400]	@ (8001610 <main+0x288>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f92f 	bl	80006e8 <__aeabi_i2d>
 800148a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800148e:	4b62      	ldr	r3, [pc, #392]	@ (8001618 <main+0x290>)
 8001490:	f7fe feae 	bl	80001f0 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4620      	mov	r0, r4
 800149a:	4629      	mov	r1, r5
 800149c:	f7fe ffd8 	bl	8000450 <__adddf3>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	495b      	ldr	r1, [pc, #364]	@ (8001614 <main+0x28c>)
 80014a6:	e9c1 2300 	strd	r2, r3, [r1]
		targetSpeed[MotorX] = PID_Calculate(&PID_MotorPosition[MotorX], Motor[MotorX].TOTAL_ANGLE, targetPosition[MotorX]);
 80014aa:	4b5c      	ldr	r3, [pc, #368]	@ (800161c <main+0x294>)
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff f91a 	bl	80006e8 <__aeabi_i2d>
 80014b4:	4b57      	ldr	r3, [pc, #348]	@ (8001614 <main+0x28c>)
 80014b6:	ed93 7b00 	vldr	d7, [r3]
 80014ba:	eeb0 1a47 	vmov.f32	s2, s14
 80014be:	eef0 1a67 	vmov.f32	s3, s15
 80014c2:	ec41 0b10 	vmov	d0, r0, r1
 80014c6:	484e      	ldr	r0, [pc, #312]	@ (8001600 <main+0x278>)
 80014c8:	f7ff fd57 	bl	8000f7a <PID_Calculate>
 80014cc:	eeb0 7a40 	vmov.f32	s14, s0
 80014d0:	eef0 7a60 	vmov.f32	s15, s1
 80014d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001608 <main+0x280>)
 80014d6:	ed83 7b00 	vstr	d7, [r3]
		PID_Calculate(&PID_MotorSpeed[MotorX], Motor[MotorX].RPM, targetSpeed[MotorX]);
 80014da:	4b50      	ldr	r3, [pc, #320]	@ (800161c <main+0x294>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f901 	bl	80006e8 <__aeabi_i2d>
 80014e6:	4b48      	ldr	r3, [pc, #288]	@ (8001608 <main+0x280>)
 80014e8:	ed93 7b00 	vldr	d7, [r3]
 80014ec:	eeb0 1a47 	vmov.f32	s2, s14
 80014f0:	eef0 1a67 	vmov.f32	s3, s15
 80014f4:	ec41 0b10 	vmov	d0, r0, r1
 80014f8:	483e      	ldr	r0, [pc, #248]	@ (80015f4 <main+0x26c>)
 80014fa:	f7ff fd3e 	bl	8000f7a <PID_Calculate>

		targetPosition[MotorY] += (iBUS_Channel[3] - 1500) * 1.2;
 80014fe:	4b45      	ldr	r3, [pc, #276]	@ (8001614 <main+0x28c>)
 8001500:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001504:	4b42      	ldr	r3, [pc, #264]	@ (8001610 <main+0x288>)
 8001506:	88db      	ldrh	r3, [r3, #6]
 8001508:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f8eb 	bl	80006e8 <__aeabi_i2d>
 8001512:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001516:	4b40      	ldr	r3, [pc, #256]	@ (8001618 <main+0x290>)
 8001518:	f7fe fe6a 	bl	80001f0 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4620      	mov	r0, r4
 8001522:	4629      	mov	r1, r5
 8001524:	f7fe ff94 	bl	8000450 <__adddf3>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4939      	ldr	r1, [pc, #228]	@ (8001614 <main+0x28c>)
 800152e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		targetSpeed[MotorY] = PID_Calculate(&PID_MotorPosition[MotorY], Motor[MotorY].TOTAL_ANGLE, targetPosition[MotorY]);
 8001532:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <main+0x294>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f8d6 	bl	80006e8 <__aeabi_i2d>
 800153c:	4b35      	ldr	r3, [pc, #212]	@ (8001614 <main+0x28c>)
 800153e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001542:	eeb0 1a47 	vmov.f32	s2, s14
 8001546:	eef0 1a67 	vmov.f32	s3, s15
 800154a:	ec41 0b10 	vmov	d0, r0, r1
 800154e:	482d      	ldr	r0, [pc, #180]	@ (8001604 <main+0x27c>)
 8001550:	f7ff fd13 	bl	8000f7a <PID_Calculate>
 8001554:	eeb0 7a40 	vmov.f32	s14, s0
 8001558:	eef0 7a60 	vmov.f32	s15, s1
 800155c:	4b2a      	ldr	r3, [pc, #168]	@ (8001608 <main+0x280>)
 800155e:	ed83 7b02 	vstr	d7, [r3, #8]
		PID_Calculate(&PID_MotorSpeed[MotorY], Motor[MotorY].RPM, targetSpeed[MotorY]);
 8001562:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <main+0x294>)
 8001564:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff f8bd 	bl	80006e8 <__aeabi_i2d>
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <main+0x280>)
 8001570:	ed93 7b02 	vldr	d7, [r3, #8]
 8001574:	eeb0 1a47 	vmov.f32	s2, s14
 8001578:	eef0 1a67 	vmov.f32	s3, s15
 800157c:	ec41 0b10 	vmov	d0, r0, r1
 8001580:	481d      	ldr	r0, [pc, #116]	@ (80015f8 <main+0x270>)
 8001582:	f7ff fcfa 	bl	8000f7a <PID_Calculate>

		Motor_SendCmd(PID_MotorSpeed[MotorX].Output, PID_MotorSpeed[MotorY].Output);
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <main+0x26c>)
 8001588:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff f99c 	bl	80008cc <__aeabi_d2iz>
 8001594:	4603      	mov	r3, r0
 8001596:	b21c      	sxth	r4, r3
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <main+0x26c>)
 800159a:	e9d3 2348 	ldrd	r2, r3, [r3, #288]	@ 0x120
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff f993 	bl	80008cc <__aeabi_d2iz>
 80015a6:	4603      	mov	r3, r0
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4619      	mov	r1, r3
 80015ac:	4620      	mov	r0, r4
 80015ae:	f7ff fc35 	bl	8000e1c <Motor_SendCmd>
		HAL_Delay(2);
 80015b2:	2002      	movs	r0, #2
 80015b4:	f000 fd48 	bl	8002048 <HAL_Delay>
		targetPosition[MotorX] += (iBUS_Channel[0] - 1500) * 1.2;
 80015b8:	bf00      	nop
 80015ba:	e75c      	b.n	8001476 <main+0xee>
 80015bc:	f3af 8000 	nop.w
	...
 80015c8:	60000000 	.word	0x60000000
 80015cc:	40146666 	.word	0x40146666
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40140000 	.word	0x40140000
 80015d8:	a0000000 	.word	0xa0000000
 80015dc:	3feae147 	.word	0x3feae147
 80015e0:	40000000 	.word	0x40000000
 80015e4:	3fb47ae1 	.word	0x3fb47ae1
 80015e8:	40021c00 	.word	0x40021c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40021800 	.word	0x40021800
 80015f4:	200000a8 	.word	0x200000a8
 80015f8:	20000150 	.word	0x20000150
 80015fc:	000186a0 	.word	0x000186a0
 8001600:	200001f8 	.word	0x200001f8
 8001604:	200002a0 	.word	0x200002a0
 8001608:	200003f0 	.word	0x200003f0
 800160c:	40680000 	.word	0x40680000
 8001610:	20000368 	.word	0x20000368
 8001614:	20000400 	.word	0x20000400
 8001618:	3ff33333 	.word	0x3ff33333
 800161c:	2000002c 	.word	0x2000002c

08001620 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b094      	sub	sp, #80	@ 0x50
 8001624:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	2230      	movs	r2, #48	@ 0x30
 800162c:	2100      	movs	r1, #0
 800162e:	4618      	mov	r0, r3
 8001630:	f003 fc26 	bl	8004e80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	4b2c      	ldr	r3, [pc, #176]	@ (80016fc <SystemClock_Config+0xdc>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	4a2b      	ldr	r2, [pc, #172]	@ (80016fc <SystemClock_Config+0xdc>)
 800164e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001652:	6413      	str	r3, [r2, #64]	@ 0x40
 8001654:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <SystemClock_Config+0xdc>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <SystemClock_Config+0xe0>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800166c:	4a24      	ldr	r2, [pc, #144]	@ (8001700 <SystemClock_Config+0xe0>)
 800166e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <SystemClock_Config+0xe0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001680:	2302      	movs	r3, #2
 8001682:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001684:	2301      	movs	r3, #1
 8001686:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001688:	2310      	movs	r3, #16
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168c:	2302      	movs	r3, #2
 800168e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001690:	2300      	movs	r3, #0
 8001692:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001694:	2308      	movs	r3, #8
 8001696:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 90;
 8001698:	235a      	movs	r3, #90	@ 0x5a
 800169a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80016a0:	2303      	movs	r3, #3
 80016a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80016a4:	f107 0320 	add.w	r3, r7, #32
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 ff2f 	bl	800350c <HAL_RCC_OscConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <SystemClock_Config+0x98>
		Error_Handler();
 80016b4:	f000 fabc 	bl	8001c30 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80016b8:	f001 fed8 	bl	800346c <HAL_PWREx_EnableOverDrive>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0xa6>
		Error_Handler();
 80016c2:	f000 fab5 	bl	8001c30 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80016c6:	230f      	movs	r3, #15
 80016c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ca:	2302      	movs	r3, #2
 80016cc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2102      	movs	r1, #2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 f98a 	bl	80039fc <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0xd2>
		Error_Handler();
 80016ee:	f000 fa9f 	bl	8001c30 <Error_Handler>
	}
}
 80016f2:	bf00      	nop
 80016f4:	3750      	adds	r7, #80	@ 0x50
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	/* CAN1_RX0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2100      	movs	r1, #0
 800170c:	2014      	movs	r0, #20
 800170e:	f001 fc02 	bl	8002f16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001712:	2014      	movs	r0, #20
 8001714:	f001 fc1b 	bl	8002f4e <HAL_NVIC_EnableIRQ>
	/* CAN1_RX1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	2015      	movs	r0, #21
 800171e:	f001 fbfa 	bl	8002f16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001722:	2015      	movs	r0, #21
 8001724:	f001 fc13 	bl	8002f4e <HAL_NVIC_EnableIRQ>
	/* CAN1_TX_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	2100      	movs	r1, #0
 800172c:	2013      	movs	r0, #19
 800172e:	f001 fbf2 	bl	8002f16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001732:	2013      	movs	r0, #19
 8001734:	f001 fc0b 	bl	8002f4e <HAL_NVIC_EnableIRQ>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001742:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 8001744:	4a27      	ldr	r2, [pc, #156]	@ (80017e4 <MX_CAN1_Init+0xa8>)
 8001746:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 5;
 8001748:	4b25      	ldr	r3, [pc, #148]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 800174a:	2205      	movs	r2, #5
 800174c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800174e:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 800175c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001760:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001762:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 8001764:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001768:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 800176c:	2200      	movs	r2, #0
 800176e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = ENABLE;
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 8001772:	2201      	movs	r2, #1
 8001774:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8001776:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 8001778:	2200      	movs	r2, #0
 800177a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800177c:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001782:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 8001784:	2200      	movs	r2, #0
 8001786:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 800178a:	2200      	movs	r2, #0
 800178c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800178e:	4814      	ldr	r0, [pc, #80]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 8001790:	f000 fc7e 	bl	8002090 <HAL_CAN_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_CAN1_Init+0x62>
		Error_Handler();
 800179a:	f000 fa49 	bl	8001c30 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef CAN_FilterConfigStructure;
	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 80017a2:	2300      	movs	r3, #0
 80017a4:	607b      	str	r3, [r7, #4]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FilterFIFO0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterBank = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 80017ba:	2301      	movs	r3, #1
 80017bc:	61fb      	str	r3, [r7, #28]
	CAN_FilterConfigStructure.FilterActivation = CAN_FILTER_ENABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	623b      	str	r3, [r7, #32]
	if (HAL_CAN_ConfigFilter(&hcan1, &CAN_FilterConfigStructure) != HAL_OK) {
 80017c2:	463b      	mov	r3, r7
 80017c4:	4619      	mov	r1, r3
 80017c6:	4806      	ldr	r0, [pc, #24]	@ (80017e0 <MX_CAN1_Init+0xa4>)
 80017c8:	f000 fd5e 	bl	8002288 <HAL_CAN_ConfigFilter>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_CAN1_Init+0x9a>
		Error_Handler();
 80017d2:	f000 fa2d 	bl	8001c30 <Error_Handler>
	}
	/* USER CODE END CAN1_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	3728      	adds	r7, #40	@ 0x28
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000374 	.word	0x20000374
 80017e4:	40006400 	.word	0x40006400

080017e8 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_CRC_Init+0x20>)
 80017ee:	4a07      	ldr	r2, [pc, #28]	@ (800180c <MX_CRC_Init+0x24>)
 80017f0:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <MX_CRC_Init+0x20>)
 80017f4:	f001 fbc5 	bl	8002f82 <HAL_CRC_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_CRC_Init+0x1a>
		Error_Handler();
 80017fe:	f000 fa17 	bl	8001c30 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2000039c 	.word	0x2000039c
 800180c:	40023000 	.word	0x40023000

08001810 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <MX_UART7_Init+0x4c>)
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <MX_UART7_Init+0x50>)
 8001818:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <MX_UART7_Init+0x4c>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <MX_UART7_Init+0x4c>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <MX_UART7_Init+0x4c>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <MX_UART7_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8001834:	4b09      	ldr	r3, [pc, #36]	@ (800185c <MX_UART7_Init+0x4c>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b08      	ldr	r3, [pc, #32]	@ (800185c <MX_UART7_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b06      	ldr	r3, [pc, #24]	@ (800185c <MX_UART7_Init+0x4c>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_UART7_Init+0x4c>)
 8001848:	f002 fab8 	bl	8003dbc <HAL_UART_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_UART7_Init+0x46>
		Error_Handler();
 8001852:	f000 f9ed 	bl	8001c30 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200003a4 	.word	0x200003a4
 8001860:	40007800 	.word	0x40007800

08001864 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	@ 0x38
 8001868:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800186a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	4bb2      	ldr	r3, [pc, #712]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4ab1      	ldr	r2, [pc, #708]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4baf      	ldr	r3, [pc, #700]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	623b      	str	r3, [r7, #32]
 8001894:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	4bab      	ldr	r3, [pc, #684]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	4aaa      	ldr	r2, [pc, #680]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a6:	4ba8      	ldr	r3, [pc, #672]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	4ba4      	ldr	r3, [pc, #656]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	4aa3      	ldr	r2, [pc, #652]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018c2:	4ba1      	ldr	r3, [pc, #644]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	4b9d      	ldr	r3, [pc, #628]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	4a9c      	ldr	r2, [pc, #624]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018de:	4b9a      	ldr	r3, [pc, #616]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b96      	ldr	r3, [pc, #600]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a95      	ldr	r2, [pc, #596]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b93      	ldr	r3, [pc, #588]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b8f      	ldr	r3, [pc, #572]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a8e      	ldr	r2, [pc, #568]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b8c      	ldr	r3, [pc, #560]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b88      	ldr	r3, [pc, #544]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192a:	4a87      	ldr	r2, [pc, #540]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	6313      	str	r3, [r2, #48]	@ 0x30
 8001932:	4b85      	ldr	r3, [pc, #532]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b81      	ldr	r3, [pc, #516]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	4a80      	ldr	r2, [pc, #512]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 8001948:	f043 0320 	orr.w	r3, r3, #32
 800194c:	6313      	str	r3, [r2, #48]	@ 0x30
 800194e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b48 <MX_GPIO_Init+0x2e4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GND_OF_5VO_GPIO_Port, GND_OF_5VO_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001960:	487a      	ldr	r0, [pc, #488]	@ (8001b4c <MX_GPIO_Init+0x2e8>)
 8001962:	f001 fd69 	bl	8003438 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, OLED_B9__Pin | OLED_B0__Pin | SYNC_IN_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f248 2101 	movw	r1, #33281	@ 0x8201
 800196c:	4878      	ldr	r0, [pc, #480]	@ (8001b50 <MX_GPIO_Init+0x2ec>)
 800196e:	f001 fd63 	bl	8003438 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOH,
 8001972:	2201      	movs	r2, #1
 8001974:	213c      	movs	r1, #60	@ 0x3c
 8001976:	4877      	ldr	r0, [pc, #476]	@ (8001b54 <MX_GPIO_Init+0x2f0>)
 8001978:	f001 fd5e 	bl	8003438 <HAL_GPIO_WritePin>
	POWER1_CTRL_Pin | POWER2_CTRL_Pin | POWER3_CTRL_Pin | POWER4_CTRL_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 800197c:	2201      	movs	r2, #1
 800197e:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001982:	4872      	ldr	r0, [pc, #456]	@ (8001b4c <MX_GPIO_Init+0x2e8>)
 8001984:	f001 fd58 	bl	8003438 <HAL_GPIO_WritePin>
	LED_A_Pin | LED_B_Pin | LED_C_Pin | LED_D_Pin | LED_E_Pin | LED_F_Pin | LED_G_Pin | LED_H_Pin, GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001988:	2200      	movs	r2, #0
 800198a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800198e:	4872      	ldr	r0, [pc, #456]	@ (8001b58 <MX_GPIO_Init+0x2f4>)
 8001990:	f001 fd52 	bl	8003438 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800199a:	4870      	ldr	r0, [pc, #448]	@ (8001b5c <MX_GPIO_Init+0x2f8>)
 800199c:	f001 fd4c 	bl	8003438 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : HEAT_IMU_Pin */
	GPIO_InitStruct.Pin = HEAT_IMU_Pin;
 80019a0:	2320      	movs	r3, #32
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a4:	2302      	movs	r3, #2
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ac:	2300      	movs	r3, #0
 80019ae:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019b0:	2302      	movs	r3, #2
 80019b2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(HEAT_IMU_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019b8:	4619      	mov	r1, r3
 80019ba:	4865      	ldr	r0, [pc, #404]	@ (8001b50 <MX_GPIO_Init+0x2ec>)
 80019bc:	f001 fb90 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : GND_OF_5VO_Pin LED_A_Pin LED_B_Pin LED_C_Pin
	 LED_D_Pin LED_E_Pin LED_F_Pin LED_G_Pin
	 LED_H_Pin */
	GPIO_InitStruct.Pin = GND_OF_5VO_Pin | LED_A_Pin | LED_B_Pin | LED_C_Pin | LED_D_Pin | LED_E_Pin | LED_F_Pin | LED_G_Pin | LED_H_Pin;
 80019c0:	f242 13fe 	movw	r3, #8702	@ 0x21fe
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d6:	4619      	mov	r1, r3
 80019d8:	485c      	ldr	r0, [pc, #368]	@ (8001b4c <MX_GPIO_Init+0x2e8>)
 80019da:	f001 fb81 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : OLED_B9__Pin OLED_B0__Pin SYNC_IN_Pin */
	GPIO_InitStruct.Pin = OLED_B9__Pin | OLED_B0__Pin | SYNC_IN_Pin;
 80019de:	f248 2301 	movw	r3, #33281	@ 0x8201
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e4:	2301      	movs	r3, #1
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f4:	4619      	mov	r1, r3
 80019f6:	4856      	ldr	r0, [pc, #344]	@ (8001b50 <MX_GPIO_Init+0x2ec>)
 80019f8:	f001 fb72 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : DBUS_RX_Pin */
	GPIO_InitStruct.Pin = DBUS_RX_Pin;
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a0c:	2307      	movs	r3, #7
 8001a0e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(DBUS_RX_GPIO_Port, &GPIO_InitStruct);
 8001a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a14:	4619      	mov	r1, r3
 8001a16:	484e      	ldr	r0, [pc, #312]	@ (8001b50 <MX_GPIO_Init+0x2ec>)
 8001a18:	f001 fb62 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SERVO_PWM_Y_Pin SERVO_PWM_X_Pin SERVO_PWM_W_Pin SERVO_PWM_Z_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_Y_Pin | SERVO_PWM_X_Pin | SERVO_PWM_W_Pin | SERVO_PWM_Z_Pin;
 8001a1c:	23e4      	movs	r3, #228	@ 0xe4
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a34:	4619      	mov	r1, r3
 8001a36:	484a      	ldr	r0, [pc, #296]	@ (8001b60 <MX_GPIO_Init+0x2fc>)
 8001a38:	f001 fb52 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SERVO_PWM_A_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_A_Pin;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(SERVO_PWM_A_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	4842      	ldr	r0, [pc, #264]	@ (8001b60 <MX_GPIO_Init+0x2fc>)
 8001a58:	f001 fb42 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SERVO_PWM_A9_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_A9_Pin;
 8001a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(SERVO_PWM_A9_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a76:	4619      	mov	r1, r3
 8001a78:	483a      	ldr	r0, [pc, #232]	@ (8001b64 <MX_GPIO_Init+0x300>)
 8001a7a:	f001 fb31 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : POWER1_CTRL_Pin POWER2_CTRL_Pin POWER3_CTRL_Pin POWER4_CTRL_Pin */
	GPIO_InitStruct.Pin = POWER1_CTRL_Pin | POWER2_CTRL_Pin | POWER3_CTRL_Pin | POWER4_CTRL_Pin;
 8001a7e:	233c      	movs	r3, #60	@ 0x3c
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a92:	4619      	mov	r1, r3
 8001a94:	482f      	ldr	r0, [pc, #188]	@ (8001b54 <MX_GPIO_Init+0x2f0>)
 8001a96:	f001 fb23 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SERVO_PWM_B_Pin SERVO_PWM_C_Pin SERVO_PWM_D_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_B_Pin | SERVO_PWM_C_Pin | SERVO_PWM_D_Pin;
 8001a9a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001aac:	2302      	movs	r3, #2
 8001aae:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4827      	ldr	r0, [pc, #156]	@ (8001b54 <MX_GPIO_Init+0x2f0>)
 8001ab8:	f001 fb12 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SERVO_PWM_E_Pin SERVO_PWM_F_Pin SERVO_PWM_G_Pin SERVO_PWM_H_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_E_Pin | SERVO_PWM_F_Pin | SERVO_PWM_G_Pin | SERVO_PWM_H_Pin;
 8001abc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4823      	ldr	r0, [pc, #140]	@ (8001b68 <MX_GPIO_Init+0x304>)
 8001ada:	f001 fb01 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aee:	4619      	mov	r1, r3
 8001af0:	4817      	ldr	r0, [pc, #92]	@ (8001b50 <MX_GPIO_Init+0x2ec>)
 8001af2:	f001 faf5 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : SERVO_PWM_T_Pin SERVO_PWM_S_Pin SERVO_PWM_U_Pin SERVO_PWM_V_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_T_Pin | SERVO_PWM_S_Pin | SERVO_PWM_U_Pin | SERVO_PWM_V_Pin;
 8001af6:	230f      	movs	r3, #15
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2300      	movs	r3, #0
 8001b04:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b06:	2301      	movs	r3, #1
 8001b08:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4814      	ldr	r0, [pc, #80]	@ (8001b64 <MX_GPIO_Init+0x300>)
 8001b12:	f001 fae5 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SERVO_PWM_E13_Pin */
	GPIO_InitStruct.Pin = SERVO_PWM_E13_Pin;
 8001b16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(SERVO_PWM_E13_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b30:	4619      	mov	r1, r3
 8001b32:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <MX_GPIO_Init+0x2f4>)
 8001b34:	f001 fad4 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : OLED_MI_Pin */
	GPIO_InitStruct.Pin = OLED_MI_Pin;
 8001b38:	2340      	movs	r3, #64	@ 0x40
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b44:	e012      	b.n	8001b6c <MX_GPIO_Init+0x308>
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40021800 	.word	0x40021800
 8001b50:	40020400 	.word	0x40020400
 8001b54:	40021c00 	.word	0x40021c00
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	40021400 	.word	0x40021400
 8001b60:	40022000 	.word	0x40022000
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020c00 	.word	0x40020c00
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b70:	2305      	movs	r3, #5
 8001b72:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(OLED_MI_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4829      	ldr	r0, [pc, #164]	@ (8001c20 <MX_GPIO_Init+0x3bc>)
 8001b7c:	f001 fab0 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_RED_Pin;
 8001b80:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b86:	2301      	movs	r3, #1
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b96:	4619      	mov	r1, r3
 8001b98:	4822      	ldr	r0, [pc, #136]	@ (8001c24 <MX_GPIO_Init+0x3c0>)
 8001b9a:	f001 faa1 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	633b      	str	r3, [r7, #48]	@ 0x30
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001bb0:	2309      	movs	r3, #9
 8001bb2:	637b      	str	r3, [r7, #52]	@ 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481b      	ldr	r0, [pc, #108]	@ (8001c28 <MX_GPIO_Init+0x3c4>)
 8001bbc:	f001 fa90 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001bc0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4814      	ldr	r0, [pc, #80]	@ (8001c2c <MX_GPIO_Init+0x3c8>)
 8001bda:	f001 fa81 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_EXTI__Pin */
	GPIO_InitStruct.Pin = SD_EXTI__Pin;
 8001bde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001be4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(SD_EXTI__GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	480b      	ldr	r0, [pc, #44]	@ (8001c24 <MX_GPIO_Init+0x3c0>)
 8001bf6:	f001 fa73 	bl	80030e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : SYNC_OUT_Pin */
	GPIO_InitStruct.Pin = SYNC_OUT_Pin;
 8001bfa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(SYNC_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <MX_GPIO_Init+0x3c4>)
 8001c12:	f001 fa65 	bl	80030e0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c16:	bf00      	nop
 8001c18:	3738      	adds	r7, #56	@ 0x38
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020000 	.word	0x40020000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	40021400 	.word	0x40021400

08001c30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001c3e:	480c      	ldr	r0, [pc, #48]	@ (8001c70 <Error_Handler+0x40>)
 8001c40:	f001 fbfa 	bl	8003438 <HAL_GPIO_WritePin>
	while (1) {
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001c44:	2201      	movs	r2, #1
 8001c46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c4a:	480a      	ldr	r0, [pc, #40]	@ (8001c74 <Error_Handler+0x44>)
 8001c4c:	f001 fbf4 	bl	8003438 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001c50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c54:	f000 f9f8 	bl	8002048 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <Error_Handler+0x44>)
 8001c60:	f001 fbea 	bl	8003438 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001c64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c68:	f000 f9ee 	bl	8002048 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8001c6c:	bf00      	nop
 8001c6e:	e7e9      	b.n	8001c44 <Error_Handler+0x14>
 8001c70:	40021400 	.word	0x40021400
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c96:	607b      	str	r3, [r7, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca2:	4a08      	ldr	r2, [pc, #32]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_MspInit+0x4c>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	@ (8001d4c <HAL_CAN_MspInit+0x84>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d12b      	bne.n	8001d42 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <HAL_CAN_MspInit+0x88>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	4a17      	ldr	r2, [pc, #92]	@ (8001d50 <HAL_CAN_MspInit+0x88>)
 8001cf4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfa:	4b15      	ldr	r3, [pc, #84]	@ (8001d50 <HAL_CAN_MspInit+0x88>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_CAN_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	4a10      	ldr	r2, [pc, #64]	@ (8001d50 <HAL_CAN_MspInit+0x88>)
 8001d10:	f043 0308 	orr.w	r3, r3, #8
 8001d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d16:	4b0e      	ldr	r3, [pc, #56]	@ (8001d50 <HAL_CAN_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d22:	2303      	movs	r3, #3
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d32:	2309      	movs	r3, #9
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <HAL_CAN_MspInit+0x8c>)
 8001d3e:	f001 f9cf 	bl	80030e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	@ 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40006400 	.word	0x40006400
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020c00 	.word	0x40020c00

08001d58 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <HAL_CRC_MspInit+0x3c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d10d      	bne.n	8001d86 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_CRC_MspInit+0x40>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a09      	ldr	r2, [pc, #36]	@ (8001d98 <HAL_CRC_MspInit+0x40>)
 8001d74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <HAL_CRC_MspInit+0x40>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40023000 	.word	0x40023000
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e30 <HAL_UART_MspInit+0x94>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d134      	bne.n	8001e28 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e34 <HAL_UART_MspInit+0x98>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8001e34 <HAL_UART_MspInit+0x98>)
 8001dc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dce:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <HAL_UART_MspInit+0x98>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <HAL_UART_MspInit+0x98>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a14      	ldr	r2, [pc, #80]	@ (8001e34 <HAL_UART_MspInit+0x98>)
 8001de4:	f043 0310 	orr.w	r3, r3, #16
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <HAL_UART_MspInit+0x98>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0310 	and.w	r3, r3, #16
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE8     ------> UART7_TX
    PE7     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_7;
 8001df6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4809      	ldr	r0, [pc, #36]	@ (8001e38 <HAL_UART_MspInit+0x9c>)
 8001e14:	f001 f964 	bl	80030e0 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 1, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	2052      	movs	r0, #82	@ 0x52
 8001e1e:	f001 f87a 	bl	8002f16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001e22:	2052      	movs	r0, #82	@ 0x52
 8001e24:	f001 f893 	bl	8002f4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3728      	adds	r7, #40	@ 0x28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40007800 	.word	0x40007800
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40021000 	.word	0x40021000

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <NMI_Handler+0x4>

08001e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <MemManage_Handler+0x4>

08001e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e92:	f000 f8b9 	bl	8002008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <CAN1_TX_IRQHandler+0x10>)
 8001ea2:	f000 fd2d 	bl	8002900 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000374 	.word	0x20000374

08001eb0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001eb4:	4802      	ldr	r0, [pc, #8]	@ (8001ec0 <CAN1_RX0_IRQHandler+0x10>)
 8001eb6:	f000 fd23 	bl	8002900 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000374 	.word	0x20000374

08001ec4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ec8:	4802      	ldr	r0, [pc, #8]	@ (8001ed4 <CAN1_RX1_IRQHandler+0x10>)
 8001eca:	f000 fd19 	bl	8002900 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000374 	.word	0x20000374

08001ed8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001edc:	4802      	ldr	r0, [pc, #8]	@ (8001ee8 <UART7_IRQHandler+0x10>)
 8001ede:	f002 f879 	bl	8003fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200003a4 	.word	0x200003a4

08001eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <SystemInit+0x20>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef6:	4a05      	ldr	r2, [pc, #20]	@ (8001f0c <SystemInit+0x20>)
 8001ef8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001efc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f14:	f7ff ffea 	bl	8001eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f18:	480c      	ldr	r0, [pc, #48]	@ (8001f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f1a:	490d      	ldr	r1, [pc, #52]	@ (8001f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f30:	4c0a      	ldr	r4, [pc, #40]	@ (8001f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f3e:	f002 ffa7 	bl	8004e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f42:	f7ff fa21 	bl	8001388 <main>
  bx  lr    
 8001f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f54:	08004f18 	.word	0x08004f18
  ldr r2, =_sbss
 8001f58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f5c:	20000414 	.word	0x20000414

08001f60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC_IRQHandler>
	...

08001f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f68:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <HAL_Init+0x40>)
 8001f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <HAL_Init+0x40>)
 8001f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f80:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a07      	ldr	r2, [pc, #28]	@ (8001fa4 <HAL_Init+0x40>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 ffb7 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f92:	200f      	movs	r0, #15
 8001f94:	f000 f808 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f98:	f7ff fe6e 	bl	8001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023c00 	.word	0x40023c00

08001fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_InitTick+0x54>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_InitTick+0x58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 ffcf 	bl	8002f6a <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f000 ff97 	bl	8002f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <HAL_InitTick+0x5c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000004 	.word	0x20000004
 8002000:	2000000c 	.word	0x2000000c
 8002004:	20000008 	.word	0x20000008

08002008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	@ (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	2000000c 	.word	0x2000000c
 800202c:	20000410 	.word	0x20000410

08002030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000410 	.word	0x20000410

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff ffee 	bl	8002030 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffde 	bl	8002030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	2000000c 	.word	0x2000000c

08002090 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e0ed      	b.n	800227e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fe0a 	bl	8001cc8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020c4:	f7ff ffb4 	bl	8002030 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ca:	e012      	b.n	80020f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020cc:	f7ff ffb0 	bl	8002030 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b0a      	cmp	r3, #10
 80020d8:	d90b      	bls.n	80020f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2205      	movs	r2, #5
 80020ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0c5      	b.n	800227e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0e5      	beq.n	80020cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0202 	bic.w	r2, r2, #2
 800210e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002110:	f7ff ff8e 	bl	8002030 <HAL_GetTick>
 8002114:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002116:	e012      	b.n	800213e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002118:	f7ff ff8a 	bl	8002030 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b0a      	cmp	r3, #10
 8002124:	d90b      	bls.n	800213e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2205      	movs	r2, #5
 8002136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e09f      	b.n	800227e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1e5      	bne.n	8002118 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7e1b      	ldrb	r3, [r3, #24]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d108      	bne.n	8002166 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	e007      	b.n	8002176 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002174:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7e5b      	ldrb	r3, [r3, #25]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d108      	bne.n	8002190 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	e007      	b.n	80021a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800219e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7e9b      	ldrb	r3, [r3, #26]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d108      	bne.n	80021ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 0220 	orr.w	r2, r2, #32
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	e007      	b.n	80021ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0220 	bic.w	r2, r2, #32
 80021c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7edb      	ldrb	r3, [r3, #27]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d108      	bne.n	80021e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0210 	bic.w	r2, r2, #16
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	e007      	b.n	80021f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0210 	orr.w	r2, r2, #16
 80021f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7f1b      	ldrb	r3, [r3, #28]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d108      	bne.n	800220e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0208 	orr.w	r2, r2, #8
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e007      	b.n	800221e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0208 	bic.w	r2, r2, #8
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7f5b      	ldrb	r3, [r3, #29]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d108      	bne.n	8002238 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0204 	orr.w	r2, r2, #4
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e007      	b.n	8002248 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0204 	bic.w	r2, r2, #4
 8002246:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	ea42 0103 	orr.w	r1, r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	1e5a      	subs	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d003      	beq.n	80022ae <HAL_CAN_ConfigFilter+0x26>
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	f040 80be 	bne.w	800242a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80022ae:	4b65      	ldr	r3, [pc, #404]	@ (8002444 <HAL_CAN_ConfigFilter+0x1bc>)
 80022b0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80022c8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	431a      	orrs	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2201      	movs	r2, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	401a      	ands	r2, r3
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d123      	bne.n	8002358 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002332:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3248      	adds	r2, #72	@ 0x48
 8002338:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800234c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800234e:	6979      	ldr	r1, [r7, #20]
 8002350:	3348      	adds	r3, #72	@ 0x48
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	440b      	add	r3, r1
 8002356:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d122      	bne.n	80023a6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	431a      	orrs	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002380:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3248      	adds	r2, #72	@ 0x48
 8002386:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800239a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800239c:	6979      	ldr	r1, [r7, #20]
 800239e:	3348      	adds	r3, #72	@ 0x48
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	440b      	add	r3, r1
 80023a4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	401a      	ands	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80023c0:	e007      	b.n	80023d2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	401a      	ands	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80023ec:	e007      	b.n	80023fe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d107      	bne.n	8002416 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	431a      	orrs	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800241c:	f023 0201 	bic.w	r2, r3, #1
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	e006      	b.n	8002438 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
  }
}
 8002438:	4618      	mov	r0, r3
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	40006400 	.word	0x40006400

08002448 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b01      	cmp	r3, #1
 800245a:	d12e      	bne.n	80024ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002474:	f7ff fddc 	bl	8002030 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800247a:	e012      	b.n	80024a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800247c:	f7ff fdd8 	bl	8002030 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b0a      	cmp	r3, #10
 8002488:	d90b      	bls.n	80024a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2205      	movs	r2, #5
 800249a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e012      	b.n	80024c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e5      	bne.n	800247c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e006      	b.n	80024c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024be:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
  }
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	@ 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024ee:	7ffb      	ldrb	r3, [r7, #31]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d003      	beq.n	80024fc <HAL_CAN_AddTxMessage+0x2c>
 80024f4:	7ffb      	ldrb	r3, [r7, #31]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	f040 80ad 	bne.w	8002656 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10a      	bne.n	800251c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8095 	beq.w	8002646 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	0e1b      	lsrs	r3, r3, #24
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002526:	2201      	movs	r2, #1
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10d      	bne.n	8002554 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002542:	68f9      	ldr	r1, [r7, #12]
 8002544:	6809      	ldr	r1, [r1, #0]
 8002546:	431a      	orrs	r2, r3
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3318      	adds	r3, #24
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	440b      	add	r3, r1
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	e00f      	b.n	8002574 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800255e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002564:	68f9      	ldr	r1, [r7, #12]
 8002566:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002568:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3318      	adds	r3, #24
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	440b      	add	r3, r1
 8002572:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6819      	ldr	r1, [r3, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3318      	adds	r3, #24
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	440b      	add	r3, r1
 8002584:	3304      	adds	r3, #4
 8002586:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	7d1b      	ldrb	r3, [r3, #20]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d111      	bne.n	80025b4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3318      	adds	r3, #24
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	4413      	add	r3, r2
 800259c:	3304      	adds	r3, #4
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	6811      	ldr	r1, [r2, #0]
 80025a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3318      	adds	r3, #24
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	440b      	add	r3, r1
 80025b0:	3304      	adds	r3, #4
 80025b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3307      	adds	r3, #7
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	061a      	lsls	r2, r3, #24
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3306      	adds	r3, #6
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	041b      	lsls	r3, r3, #16
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3305      	adds	r3, #5
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	4313      	orrs	r3, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	3204      	adds	r2, #4
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	4610      	mov	r0, r2
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6811      	ldr	r1, [r2, #0]
 80025dc:	ea43 0200 	orr.w	r2, r3, r0
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	440b      	add	r3, r1
 80025e6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80025ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3303      	adds	r3, #3
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	061a      	lsls	r2, r3, #24
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3302      	adds	r3, #2
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3301      	adds	r3, #1
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	4313      	orrs	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	7812      	ldrb	r2, [r2, #0]
 800260c:	4610      	mov	r0, r2
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	6811      	ldr	r1, [r2, #0]
 8002612:	ea43 0200 	orr.w	r2, r3, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	440b      	add	r3, r1
 800261c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002620:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3318      	adds	r3, #24
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	4413      	add	r3, r2
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	6811      	ldr	r1, [r2, #0]
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3318      	adds	r3, #24
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	440b      	add	r3, r1
 8002640:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e00e      	b.n	8002664 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e006      	b.n	8002664 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
  }
}
 8002664:	4618      	mov	r0, r3
 8002666:	3724      	adds	r7, #36	@ 0x24
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002670:	b480      	push	{r7}
 8002672:	b087      	sub	sp, #28
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002684:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d003      	beq.n	8002694 <HAL_CAN_GetRxMessage+0x24>
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b02      	cmp	r3, #2
 8002690:	f040 8103 	bne.w	800289a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10e      	bne.n	80026b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d116      	bne.n	80026d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0f7      	b.n	80028a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0e8      	b.n	80028a8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	331b      	adds	r3, #27
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	4413      	add	r3, r2
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0204 	and.w	r2, r3, #4
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10c      	bne.n	800270e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	331b      	adds	r3, #27
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	4413      	add	r3, r2
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	0d5b      	lsrs	r3, r3, #21
 8002704:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e00b      	b.n	8002726 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	331b      	adds	r3, #27
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	08db      	lsrs	r3, r3, #3
 800271e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	331b      	adds	r3, #27
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0202 	and.w	r2, r3, #2
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	331b      	adds	r3, #27
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	4413      	add	r3, r2
 8002748:	3304      	adds	r3, #4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2208      	movs	r2, #8
 8002758:	611a      	str	r2, [r3, #16]
 800275a:	e00b      	b.n	8002774 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	331b      	adds	r3, #27
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	4413      	add	r3, r2
 8002768:	3304      	adds	r3, #4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 020f 	and.w	r2, r3, #15
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	331b      	adds	r3, #27
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	4413      	add	r3, r2
 8002780:	3304      	adds	r3, #4
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	b2da      	uxtb	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	331b      	adds	r3, #27
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4413      	add	r3, r2
 8002798:	3304      	adds	r3, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	0c1b      	lsrs	r3, r3, #16
 800279e:	b29a      	uxth	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0a1a      	lsrs	r2, r3, #8
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	3301      	adds	r3, #1
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	4413      	add	r3, r2
 80027de:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0c1a      	lsrs	r2, r3, #16
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	3302      	adds	r3, #2
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	011b      	lsls	r3, r3, #4
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0e1a      	lsrs	r2, r3, #24
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	3303      	adds	r3, #3
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	4413      	add	r3, r2
 8002812:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	3304      	adds	r3, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	4413      	add	r3, r2
 800282a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0a1a      	lsrs	r2, r3, #8
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	3305      	adds	r3, #5
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	4413      	add	r3, r2
 8002844:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	0c1a      	lsrs	r2, r3, #16
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	3306      	adds	r3, #6
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	4413      	add	r3, r2
 800285e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	0e1a      	lsrs	r2, r3, #24
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	3307      	adds	r3, #7
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d108      	bne.n	8002886 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0220 	orr.w	r2, r2, #32
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	e007      	b.n	8002896 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 0220 	orr.w	r2, r2, #32
 8002894:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	e006      	b.n	80028a8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
  }
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	371c      	adds	r7, #28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d002      	beq.n	80028d2 <HAL_CAN_ActivateNotification+0x1e>
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d109      	bne.n	80028e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6959      	ldr	r1, [r3, #20]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e006      	b.n	80028f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
  }
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	@ 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002908:	2300      	movs	r3, #0
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d07c      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d023      	beq.n	8002998 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2201      	movs	r2, #1
 8002956:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f983 	bl	8002c6e <HAL_CAN_TxMailbox0CompleteCallback>
 8002968:	e016      	b.n	8002998 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d004      	beq.n	800297e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
 800297c:	e00c      	b.n	8002998 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002990:	e002      	b.n	8002998 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f989 	bl	8002caa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d024      	beq.n	80029ec <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f963 	bl	8002c82 <HAL_CAN_TxMailbox1CompleteCallback>
 80029bc:	e016      	b.n	80029ec <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d0:	e00c      	b.n	80029ec <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d004      	beq.n	80029e6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e4:	e002      	b.n	80029ec <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f969 	bl	8002cbe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d024      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80029fe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f943 	bl	8002c96 <HAL_CAN_TxMailbox2CompleteCallback>
 8002a10:	e016      	b.n	8002a40 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a24:	e00c      	b.n	8002a40 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a38:	e002      	b.n	8002a40 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f949 	bl	8002cd2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2210      	movs	r2, #16
 8002a62:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7fe f8e9 	bl	8000c58 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f921 	bl	8002ce6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2210      	movs	r2, #16
 8002ac6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d006      	beq.n	8002aea <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f912 	bl	8002d0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d009      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8f9 	bl	8002cfa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2210      	movs	r2, #16
 8002b22:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8fc 	bl	8002d22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d006      	beq.n	8002b4c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2208      	movs	r2, #8
 8002b44:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f8f5 	bl	8002d36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002b4c:	6a3b      	ldr	r3, [r7, #32]
 8002b4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d07b      	beq.n	8002c4e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d072      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bae:	f043 0304 	orr.w	r3, r3, #4
 8002bb2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d043      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d03e      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bce:	2b60      	cmp	r3, #96	@ 0x60
 8002bd0:	d02b      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x32a>
 8002bd2:	2b60      	cmp	r3, #96	@ 0x60
 8002bd4:	d82e      	bhi.n	8002c34 <HAL_CAN_IRQHandler+0x334>
 8002bd6:	2b50      	cmp	r3, #80	@ 0x50
 8002bd8:	d022      	beq.n	8002c20 <HAL_CAN_IRQHandler+0x320>
 8002bda:	2b50      	cmp	r3, #80	@ 0x50
 8002bdc:	d82a      	bhi.n	8002c34 <HAL_CAN_IRQHandler+0x334>
 8002bde:	2b40      	cmp	r3, #64	@ 0x40
 8002be0:	d019      	beq.n	8002c16 <HAL_CAN_IRQHandler+0x316>
 8002be2:	2b40      	cmp	r3, #64	@ 0x40
 8002be4:	d826      	bhi.n	8002c34 <HAL_CAN_IRQHandler+0x334>
 8002be6:	2b30      	cmp	r3, #48	@ 0x30
 8002be8:	d010      	beq.n	8002c0c <HAL_CAN_IRQHandler+0x30c>
 8002bea:	2b30      	cmp	r3, #48	@ 0x30
 8002bec:	d822      	bhi.n	8002c34 <HAL_CAN_IRQHandler+0x334>
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d002      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x2f8>
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d005      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002bf6:	e01d      	b.n	8002c34 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	f043 0308 	orr.w	r3, r3, #8
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c00:	e019      	b.n	8002c36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c04:	f043 0310 	orr.w	r3, r3, #16
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c0a:	e014      	b.n	8002c36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	f043 0320 	orr.w	r3, r3, #32
 8002c12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c14:	e00f      	b.n	8002c36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c1e:	e00a      	b.n	8002c36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c28:	e005      	b.n	8002c36 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c32:	e000      	b.n	8002c36 <HAL_CAN_IRQHandler+0x336>
            break;
 8002c34:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699a      	ldr	r2, [r3, #24]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002c44:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f872 	bl	8002d4a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c66:	bf00      	nop
 8002c68:	3728      	adds	r7, #40	@ 0x28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr

08002d0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d70:	4b0c      	ldr	r3, [pc, #48]	@ (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d92:	4a04      	ldr	r2, [pc, #16]	@ (8002da4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	60d3      	str	r3, [r2, #12]
}
 8002d98:	bf00      	nop
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dac:	4b04      	ldr	r3, [pc, #16]	@ (8002dc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	f003 0307 	and.w	r3, r3, #7
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	db0b      	blt.n	8002dee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	4907      	ldr	r1, [pc, #28]	@ (8002dfc <__NVIC_EnableIRQ+0x38>)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	095b      	lsrs	r3, r3, #5
 8002de4:	2001      	movs	r0, #1
 8002de6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	e000e100 	.word	0xe000e100

08002e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	@ (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	@ (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	@ 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f1c3 0307 	rsb	r3, r3, #7
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf28      	it	cs
 8002e72:	2304      	movcs	r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d902      	bls.n	8002e84 <NVIC_EncodePriority+0x30>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3b03      	subs	r3, #3
 8002e82:	e000      	b.n	8002e86 <NVIC_EncodePriority+0x32>
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43d9      	mvns	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	4313      	orrs	r3, r2
         );
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	@ 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ecc:	d301      	bcc.n	8002ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00f      	b.n	8002ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8002efc <SysTick_Config+0x40>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eda:	210f      	movs	r1, #15
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f7ff ff8e 	bl	8002e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	@ (8002efc <SysTick_Config+0x40>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	@ (8002efc <SysTick_Config+0x40>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff29 	bl	8002d60 <__NVIC_SetPriorityGrouping>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f28:	f7ff ff3e 	bl	8002da8 <__NVIC_GetPriorityGrouping>
 8002f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	f7ff ff8e 	bl	8002e54 <NVIC_EncodePriority>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff5d 	bl	8002e00 <__NVIC_SetPriority>
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff31 	bl	8002dc4 <__NVIC_EnableIRQ>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ffa2 	bl	8002ebc <SysTick_Config>
 8002f78:	4603      	mov	r3, r0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b082      	sub	sp, #8
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e00e      	b.n	8002fb2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	795b      	ldrb	r3, [r3, #5]
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7fe fed7 	bl	8001d58 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff f832 	bl	8002030 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d008      	beq.n	8002fec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2280      	movs	r2, #128	@ 0x80
 8002fde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e052      	b.n	8003092 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0216 	bic.w	r2, r2, #22
 8002ffa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800300a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <HAL_DMA_Abort+0x62>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0208 	bic.w	r2, r2, #8
 800302a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800303c:	e013      	b.n	8003066 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800303e:	f7fe fff7 	bl	8002030 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b05      	cmp	r3, #5
 800304a:	d90c      	bls.n	8003066 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2220      	movs	r2, #32
 8003050:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2203      	movs	r2, #3
 8003056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e015      	b.n	8003092 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1e4      	bne.n	800303e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003078:	223f      	movs	r2, #63	@ 0x3f
 800307a:	409a      	lsls	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d004      	beq.n	80030b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2280      	movs	r2, #128	@ 0x80
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e00c      	b.n	80030d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2205      	movs	r2, #5
 80030bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b089      	sub	sp, #36	@ 0x24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
 80030fa:	e177      	b.n	80033ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030fc:	2201      	movs	r2, #1
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	fa02 f303 	lsl.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4013      	ands	r3, r2
 800310e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	f040 8166 	bne.w	80033e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d005      	beq.n	8003132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312e:	2b02      	cmp	r3, #2
 8003130:	d130      	bne.n	8003194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003168:	2201      	movs	r2, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	091b      	lsrs	r3, r3, #4
 800317e:	f003 0201 	and.w	r2, r3, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0303 	and.w	r3, r3, #3
 800319c:	2b03      	cmp	r3, #3
 800319e:	d017      	beq.n	80031d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	2203      	movs	r2, #3
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43db      	mvns	r3, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d123      	bne.n	8003224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	08da      	lsrs	r2, r3, #3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3208      	adds	r2, #8
 80031e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	220f      	movs	r2, #15
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	3208      	adds	r2, #8
 800321e:	69b9      	ldr	r1, [r7, #24]
 8003220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0203 	and.w	r2, r3, #3
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80c0 	beq.w	80033e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	4b66      	ldr	r3, [pc, #408]	@ (8003404 <HAL_GPIO_Init+0x324>)
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	4a65      	ldr	r2, [pc, #404]	@ (8003404 <HAL_GPIO_Init+0x324>)
 8003270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003274:	6453      	str	r3, [r2, #68]	@ 0x44
 8003276:	4b63      	ldr	r3, [pc, #396]	@ (8003404 <HAL_GPIO_Init+0x324>)
 8003278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003282:	4a61      	ldr	r2, [pc, #388]	@ (8003408 <HAL_GPIO_Init+0x328>)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	089b      	lsrs	r3, r3, #2
 8003288:	3302      	adds	r3, #2
 800328a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800328e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	220f      	movs	r2, #15
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a58      	ldr	r2, [pc, #352]	@ (800340c <HAL_GPIO_Init+0x32c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d037      	beq.n	800331e <HAL_GPIO_Init+0x23e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a57      	ldr	r2, [pc, #348]	@ (8003410 <HAL_GPIO_Init+0x330>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d031      	beq.n	800331a <HAL_GPIO_Init+0x23a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a56      	ldr	r2, [pc, #344]	@ (8003414 <HAL_GPIO_Init+0x334>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d02b      	beq.n	8003316 <HAL_GPIO_Init+0x236>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a55      	ldr	r2, [pc, #340]	@ (8003418 <HAL_GPIO_Init+0x338>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d025      	beq.n	8003312 <HAL_GPIO_Init+0x232>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a54      	ldr	r2, [pc, #336]	@ (800341c <HAL_GPIO_Init+0x33c>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01f      	beq.n	800330e <HAL_GPIO_Init+0x22e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a53      	ldr	r2, [pc, #332]	@ (8003420 <HAL_GPIO_Init+0x340>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d019      	beq.n	800330a <HAL_GPIO_Init+0x22a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a52      	ldr	r2, [pc, #328]	@ (8003424 <HAL_GPIO_Init+0x344>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_GPIO_Init+0x226>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a51      	ldr	r2, [pc, #324]	@ (8003428 <HAL_GPIO_Init+0x348>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d00d      	beq.n	8003302 <HAL_GPIO_Init+0x222>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a50      	ldr	r2, [pc, #320]	@ (800342c <HAL_GPIO_Init+0x34c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d007      	beq.n	80032fe <HAL_GPIO_Init+0x21e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003430 <HAL_GPIO_Init+0x350>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d101      	bne.n	80032fa <HAL_GPIO_Init+0x21a>
 80032f6:	2309      	movs	r3, #9
 80032f8:	e012      	b.n	8003320 <HAL_GPIO_Init+0x240>
 80032fa:	230a      	movs	r3, #10
 80032fc:	e010      	b.n	8003320 <HAL_GPIO_Init+0x240>
 80032fe:	2308      	movs	r3, #8
 8003300:	e00e      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003302:	2307      	movs	r3, #7
 8003304:	e00c      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003306:	2306      	movs	r3, #6
 8003308:	e00a      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800330a:	2305      	movs	r3, #5
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800330e:	2304      	movs	r3, #4
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x240>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x240>
 800331e:	2300      	movs	r3, #0
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003330:	4935      	ldr	r1, [pc, #212]	@ (8003408 <HAL_GPIO_Init+0x328>)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800333e:	4b3d      	ldr	r3, [pc, #244]	@ (8003434 <HAL_GPIO_Init+0x354>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003362:	4a34      	ldr	r2, [pc, #208]	@ (8003434 <HAL_GPIO_Init+0x354>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003368:	4b32      	ldr	r3, [pc, #200]	@ (8003434 <HAL_GPIO_Init+0x354>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800338c:	4a29      	ldr	r2, [pc, #164]	@ (8003434 <HAL_GPIO_Init+0x354>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003392:	4b28      	ldr	r3, [pc, #160]	@ (8003434 <HAL_GPIO_Init+0x354>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003434 <HAL_GPIO_Init+0x354>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003434 <HAL_GPIO_Init+0x354>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e0:	4a14      	ldr	r2, [pc, #80]	@ (8003434 <HAL_GPIO_Init+0x354>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	f67f ae84 	bls.w	80030fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3724      	adds	r7, #36	@ 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40013800 	.word	0x40013800
 800340c:	40020000 	.word	0x40020000
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40021400 	.word	0x40021400
 8003424:	40021800 	.word	0x40021800
 8003428:	40021c00 	.word	0x40021c00
 800342c:	40022000 	.word	0x40022000
 8003430:	40022400 	.word	0x40022400
 8003434:	40013c00 	.word	0x40013c00

08003438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]
 8003444:	4613      	mov	r3, r2
 8003446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003448:	787b      	ldrb	r3, [r7, #1]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800344e:	887a      	ldrh	r2, [r7, #2]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003454:	e003      	b.n	800345e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	041a      	lsls	r2, r3, #16
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	619a      	str	r2, [r3, #24]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
	...

0800346c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	603b      	str	r3, [r7, #0]
 800347a:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <HAL_PWREx_EnableOverDrive+0x90>)
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	4a1f      	ldr	r2, [pc, #124]	@ (80034fc <HAL_PWREx_EnableOverDrive+0x90>)
 8003480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003484:	6413      	str	r3, [r2, #64]	@ 0x40
 8003486:	4b1d      	ldr	r3, [pc, #116]	@ (80034fc <HAL_PWREx_EnableOverDrive+0x90>)
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003492:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <HAL_PWREx_EnableOverDrive+0x94>)
 8003494:	2201      	movs	r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003498:	f7fe fdca 	bl	8002030 <HAL_GetTick>
 800349c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800349e:	e009      	b.n	80034b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034a0:	f7fe fdc6 	bl	8002030 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034ae:	d901      	bls.n	80034b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e01f      	b.n	80034f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80034b4:	4b13      	ldr	r3, [pc, #76]	@ (8003504 <HAL_PWREx_EnableOverDrive+0x98>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c0:	d1ee      	bne.n	80034a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80034c2:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034c4:	2201      	movs	r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034c8:	f7fe fdb2 	bl	8002030 <HAL_GetTick>
 80034cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034ce:	e009      	b.n	80034e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80034d0:	f7fe fdae 	bl	8002030 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034de:	d901      	bls.n	80034e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e007      	b.n	80034f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034e4:	4b07      	ldr	r3, [pc, #28]	@ (8003504 <HAL_PWREx_EnableOverDrive+0x98>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034f0:	d1ee      	bne.n	80034d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40023800 	.word	0x40023800
 8003500:	420e0040 	.word	0x420e0040
 8003504:	40007000 	.word	0x40007000
 8003508:	420e0044 	.word	0x420e0044

0800350c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e267      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d075      	beq.n	8003616 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800352a:	4b88      	ldr	r3, [pc, #544]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d00c      	beq.n	8003550 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003536:	4b85      	ldr	r3, [pc, #532]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800353e:	2b08      	cmp	r3, #8
 8003540:	d112      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003542:	4b82      	ldr	r3, [pc, #520]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800354a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800354e:	d10b      	bne.n	8003568 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003550:	4b7e      	ldr	r3, [pc, #504]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05b      	beq.n	8003614 <HAL_RCC_OscConfig+0x108>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d157      	bne.n	8003614 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e242      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003570:	d106      	bne.n	8003580 <HAL_RCC_OscConfig+0x74>
 8003572:	4b76      	ldr	r3, [pc, #472]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a75      	ldr	r2, [pc, #468]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e01d      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCC_OscConfig+0x98>
 800358a:	4b70      	ldr	r3, [pc, #448]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6f      	ldr	r2, [pc, #444]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b6d      	ldr	r3, [pc, #436]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6c      	ldr	r2, [pc, #432]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 800359c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e00b      	b.n	80035bc <HAL_RCC_OscConfig+0xb0>
 80035a4:	4b69      	ldr	r3, [pc, #420]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a68      	ldr	r2, [pc, #416]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	4b66      	ldr	r3, [pc, #408]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a65      	ldr	r2, [pc, #404]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 80035b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d013      	beq.n	80035ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c4:	f7fe fd34 	bl	8002030 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe fd30 	bl	8002030 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	@ 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e207      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b5b      	ldr	r3, [pc, #364]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0xc0>
 80035ea:	e014      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe fd20 	bl	8002030 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f4:	f7fe fd1c 	bl	8002030 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b64      	cmp	r3, #100	@ 0x64
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e1f3      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003606:	4b51      	ldr	r3, [pc, #324]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0xe8>
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d063      	beq.n	80036ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003622:	4b4a      	ldr	r3, [pc, #296]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 030c 	and.w	r3, r3, #12
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00b      	beq.n	8003646 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362e:	4b47      	ldr	r3, [pc, #284]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003636:	2b08      	cmp	r3, #8
 8003638:	d11c      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363a:	4b44      	ldr	r3, [pc, #272]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	4b41      	ldr	r3, [pc, #260]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d001      	beq.n	800365e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e1c7      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365e:	4b3b      	ldr	r3, [pc, #236]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	00db      	lsls	r3, r3, #3
 800366c:	4937      	ldr	r1, [pc, #220]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	e03a      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800367c:	4b34      	ldr	r3, [pc, #208]	@ (8003750 <HAL_RCC_OscConfig+0x244>)
 800367e:	2201      	movs	r2, #1
 8003680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003682:	f7fe fcd5 	bl	8002030 <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800368a:	f7fe fcd1 	bl	8002030 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1a8      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369c:	4b2b      	ldr	r3, [pc, #172]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d0f0      	beq.n	800368a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a8:	4b28      	ldr	r3, [pc, #160]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4925      	ldr	r1, [pc, #148]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e015      	b.n	80036ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036be:	4b24      	ldr	r3, [pc, #144]	@ (8003750 <HAL_RCC_OscConfig+0x244>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fe fcb4 	bl	8002030 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036cc:	f7fe fcb0 	bl	8002030 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e187      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036de:	4b1b      	ldr	r3, [pc, #108]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d036      	beq.n	8003764 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <HAL_RCC_OscConfig+0x248>)
 8003700:	2201      	movs	r2, #1
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fe fc94 	bl	8002030 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800370c:	f7fe fc90 	bl	8002030 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e167      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800371e:	4b0b      	ldr	r3, [pc, #44]	@ (800374c <HAL_RCC_OscConfig+0x240>)
 8003720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0x200>
 800372a:	e01b      	b.n	8003764 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <HAL_RCC_OscConfig+0x248>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003732:	f7fe fc7d 	bl	8002030 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	e00e      	b.n	8003758 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800373a:	f7fe fc79 	bl	8002030 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d907      	bls.n	8003758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e150      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
 800374c:	40023800 	.word	0x40023800
 8003750:	42470000 	.word	0x42470000
 8003754:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	4b88      	ldr	r3, [pc, #544]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 800375a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ea      	bne.n	800373a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8097 	beq.w	80038a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003776:	4b81      	ldr	r3, [pc, #516]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10f      	bne.n	80037a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]
 8003786:	4b7d      	ldr	r3, [pc, #500]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	4a7c      	ldr	r2, [pc, #496]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 800378c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	@ 0x40
 8003792:	4b7a      	ldr	r3, [pc, #488]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379e:	2301      	movs	r3, #1
 80037a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a2:	4b77      	ldr	r3, [pc, #476]	@ (8003980 <HAL_RCC_OscConfig+0x474>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d118      	bne.n	80037e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ae:	4b74      	ldr	r3, [pc, #464]	@ (8003980 <HAL_RCC_OscConfig+0x474>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a73      	ldr	r2, [pc, #460]	@ (8003980 <HAL_RCC_OscConfig+0x474>)
 80037b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ba:	f7fe fc39 	bl	8002030 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c2:	f7fe fc35 	bl	8002030 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e10c      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003980 <HAL_RCC_OscConfig+0x474>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_OscConfig+0x2ea>
 80037e8:	4b64      	ldr	r3, [pc, #400]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ec:	4a63      	ldr	r2, [pc, #396]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f4:	e01c      	b.n	8003830 <HAL_RCC_OscConfig+0x324>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d10c      	bne.n	8003818 <HAL_RCC_OscConfig+0x30c>
 80037fe:	4b5f      	ldr	r3, [pc, #380]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003802:	4a5e      	ldr	r2, [pc, #376]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003804:	f043 0304 	orr.w	r3, r3, #4
 8003808:	6713      	str	r3, [r2, #112]	@ 0x70
 800380a:	4b5c      	ldr	r3, [pc, #368]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	4a5b      	ldr	r2, [pc, #364]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6713      	str	r3, [r2, #112]	@ 0x70
 8003816:	e00b      	b.n	8003830 <HAL_RCC_OscConfig+0x324>
 8003818:	4b58      	ldr	r3, [pc, #352]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381c:	4a57      	ldr	r2, [pc, #348]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 800381e:	f023 0301 	bic.w	r3, r3, #1
 8003822:	6713      	str	r3, [r2, #112]	@ 0x70
 8003824:	4b55      	ldr	r3, [pc, #340]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003828:	4a54      	ldr	r2, [pc, #336]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 800382a:	f023 0304 	bic.w	r3, r3, #4
 800382e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d015      	beq.n	8003864 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003838:	f7fe fbfa 	bl	8002030 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	e00a      	b.n	8003856 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003840:	f7fe fbf6 	bl	8002030 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0cb      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003856:	4b49      	ldr	r3, [pc, #292]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0ee      	beq.n	8003840 <HAL_RCC_OscConfig+0x334>
 8003862:	e014      	b.n	800388e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003864:	f7fe fbe4 	bl	8002030 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7fe fbe0 	bl	8002030 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0b5      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003882:	4b3e      	ldr	r3, [pc, #248]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ee      	bne.n	800386c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388e:	7dfb      	ldrb	r3, [r7, #23]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003894:	4b39      	ldr	r3, [pc, #228]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	4a38      	ldr	r2, [pc, #224]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 800389a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800389e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80a1 	beq.w	80039ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038aa:	4b34      	ldr	r3, [pc, #208]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d05c      	beq.n	8003970 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d141      	bne.n	8003942 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b31      	ldr	r3, [pc, #196]	@ (8003984 <HAL_RCC_OscConfig+0x478>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe fbb4 	bl	8002030 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fe fbb0 	bl	8002030 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e087      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	4b27      	ldr	r3, [pc, #156]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	3b01      	subs	r3, #1
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	491b      	ldr	r1, [pc, #108]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003914:	4b1b      	ldr	r3, [pc, #108]	@ (8003984 <HAL_RCC_OscConfig+0x478>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe fb89 	bl	8002030 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe fb85 	bl	8002030 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e05c      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003934:	4b11      	ldr	r3, [pc, #68]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x416>
 8003940:	e054      	b.n	80039ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b10      	ldr	r3, [pc, #64]	@ (8003984 <HAL_RCC_OscConfig+0x478>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fb72 	bl	8002030 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe fb6e 	bl	8002030 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e045      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003962:	4b06      	ldr	r3, [pc, #24]	@ (800397c <HAL_RCC_OscConfig+0x470>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x444>
 800396e:	e03d      	b.n	80039ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d107      	bne.n	8003988 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e038      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
 800397c:	40023800 	.word	0x40023800
 8003980:	40007000 	.word	0x40007000
 8003984:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003988:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <HAL_RCC_OscConfig+0x4ec>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d028      	beq.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d121      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d11a      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d111      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	3b01      	subs	r3, #1
 80039d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800

080039fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0cc      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a10:	4b68      	ldr	r3, [pc, #416]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d90c      	bls.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b65      	ldr	r3, [pc, #404]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b63      	ldr	r3, [pc, #396]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0b8      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d020      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a50:	4b59      	ldr	r3, [pc, #356]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a58      	ldr	r2, [pc, #352]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a68:	4b53      	ldr	r3, [pc, #332]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4a52      	ldr	r2, [pc, #328]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a74:	4b50      	ldr	r3, [pc, #320]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	494d      	ldr	r1, [pc, #308]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d044      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	4b47      	ldr	r3, [pc, #284]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d119      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e07f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d003      	beq.n	8003aba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aba:	4b3f      	ldr	r3, [pc, #252]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e06f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aca:	4b3b      	ldr	r3, [pc, #236]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e067      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ada:	4b37      	ldr	r3, [pc, #220]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 0203 	bic.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4934      	ldr	r1, [pc, #208]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aec:	f7fe faa0 	bl	8002030 <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7fe fa9c 	bl	8002030 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e04f      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 020c 	and.w	r2, r3, #12
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1eb      	bne.n	8003af4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b1c:	4b25      	ldr	r3, [pc, #148]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d20c      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b2a:	4b22      	ldr	r3, [pc, #136]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b32:	4b20      	ldr	r3, [pc, #128]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e032      	b.n	8003baa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b19      	ldr	r3, [pc, #100]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4916      	ldr	r1, [pc, #88]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6e:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	490e      	ldr	r1, [pc, #56]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b82:	f000 f821 	bl	8003bc8 <HAL_RCC_GetSysClockFreq>
 8003b86:	4602      	mov	r2, r0
 8003b88:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	490a      	ldr	r1, [pc, #40]	@ (8003bbc <HAL_RCC_ClockConfig+0x1c0>)
 8003b94:	5ccb      	ldrb	r3, [r1, r3]
 8003b96:	fa22 f303 	lsr.w	r3, r2, r3
 8003b9a:	4a09      	ldr	r2, [pc, #36]	@ (8003bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b9e:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fe fa00 	bl	8001fa8 <HAL_InitTick>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023c00 	.word	0x40023c00
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	08004ef0 	.word	0x08004ef0
 8003bc0:	20000004 	.word	0x20000004
 8003bc4:	20000008 	.word	0x20000008

08003bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bcc:	b090      	sub	sp, #64	@ 0x40
 8003bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd8:	2300      	movs	r3, #0
 8003bda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be0:	4b59      	ldr	r3, [pc, #356]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d00d      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x40>
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	f200 80a1 	bhi.w	8003d34 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_RCC_GetSysClockFreq+0x34>
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bfa:	e09b      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bfc:	4b53      	ldr	r3, [pc, #332]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003c00:	e09b      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c02:	4b53      	ldr	r3, [pc, #332]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c06:	e098      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c08:	4b4f      	ldr	r3, [pc, #316]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c12:	4b4d      	ldr	r3, [pc, #308]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d028      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	099b      	lsrs	r3, r3, #6
 8003c24:	2200      	movs	r2, #0
 8003c26:	623b      	str	r3, [r7, #32]
 8003c28:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c30:	2100      	movs	r1, #0
 8003c32:	4b47      	ldr	r3, [pc, #284]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c34:	fb03 f201 	mul.w	r2, r3, r1
 8003c38:	2300      	movs	r3, #0
 8003c3a:	fb00 f303 	mul.w	r3, r0, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	4a43      	ldr	r2, [pc, #268]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c42:	fba0 1202 	umull	r1, r2, r0, r2
 8003c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c48:	460a      	mov	r2, r1
 8003c4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c4e:	4413      	add	r3, r2
 8003c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c54:	2200      	movs	r2, #0
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	61fa      	str	r2, [r7, #28]
 8003c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c62:	f7fc fe5b 	bl	800091c <__aeabi_uldivmod>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c6e:	e053      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c70:	4b35      	ldr	r3, [pc, #212]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	099b      	lsrs	r3, r3, #6
 8003c76:	2200      	movs	r2, #0
 8003c78:	613b      	str	r3, [r7, #16]
 8003c7a:	617a      	str	r2, [r7, #20]
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c82:	f04f 0b00 	mov.w	fp, #0
 8003c86:	4652      	mov	r2, sl
 8003c88:	465b      	mov	r3, fp
 8003c8a:	f04f 0000 	mov.w	r0, #0
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	0159      	lsls	r1, r3, #5
 8003c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c98:	0150      	lsls	r0, r2, #5
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	ebb2 080a 	subs.w	r8, r2, sl
 8003ca2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cba:	ebb2 0408 	subs.w	r4, r2, r8
 8003cbe:	eb63 0509 	sbc.w	r5, r3, r9
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	00eb      	lsls	r3, r5, #3
 8003ccc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cd0:	00e2      	lsls	r2, r4, #3
 8003cd2:	4614      	mov	r4, r2
 8003cd4:	461d      	mov	r5, r3
 8003cd6:	eb14 030a 	adds.w	r3, r4, sl
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	eb45 030b 	adc.w	r3, r5, fp
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cee:	4629      	mov	r1, r5
 8003cf0:	028b      	lsls	r3, r1, #10
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	028a      	lsls	r2, r1, #10
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d02:	2200      	movs	r2, #0
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	60fa      	str	r2, [r7, #12]
 8003d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d0c:	f7fc fe06 	bl	800091c <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4613      	mov	r3, r2
 8003d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d18:	4b0b      	ldr	r3, [pc, #44]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	0c1b      	lsrs	r3, r3, #16
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	3301      	adds	r3, #1
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003d28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d32:	e002      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3740      	adds	r7, #64	@ 0x40
 8003d40:	46bd      	mov	sp, r7
 8003d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	00b71b00 	.word	0x00b71b00

08003d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d58:	4b03      	ldr	r3, [pc, #12]	@ (8003d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000004 	.word	0x20000004

08003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d70:	f7ff fff0 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	0a9b      	lsrs	r3, r3, #10
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4903      	ldr	r1, [pc, #12]	@ (8003d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	08004f00 	.word	0x08004f00

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d98:	f7ff ffdc 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	@ (8003db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0b5b      	lsrs	r3, r3, #13
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	@ (8003db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40023800 	.word	0x40023800
 8003db8:	08004f00 	.word	0x08004f00

08003dbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e042      	b.n	8003e54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd ffda 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2224      	movs	r2, #36	@ 0x24
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dfe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fdc9 	bl	8004998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	@ 0x28
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b20      	cmp	r3, #32
 8003e7a:	f040 8081 	bne.w	8003f80 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <HAL_UART_Receive+0x2e>
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e079      	b.n	8003f82 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2222      	movs	r2, #34	@ 0x22
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea2:	f7fe f8c5 	bl	8002030 <HAL_GetTick>
 8003ea6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	88fa      	ldrh	r2, [r7, #6]
 8003eb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebc:	d108      	bne.n	8003ed0 <HAL_UART_Receive+0x74>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d104      	bne.n	8003ed0 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e003      	b.n	8003ed8 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ed8:	e047      	b.n	8003f6a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2120      	movs	r1, #32
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 fb27 	bl	8004538 <UART_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e042      	b.n	8003f82 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10c      	bne.n	8003f1c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	3302      	adds	r3, #2
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	e01f      	b.n	8003f5c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f24:	d007      	beq.n	8003f36 <HAL_UART_Receive+0xda>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_UART_Receive+0xe8>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e008      	b.n	8003f56 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1b2      	bne.n	8003eda <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	4613      	mov	r3, r2
 8003f96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d112      	bne.n	8003fca <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_UART_Receive_IT+0x26>
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e00b      	b.n	8003fcc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 fb12 	bl	80045ea <UART_Start_Receive_IT>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	e000      	b.n	8003fcc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fca:	2302      	movs	r3, #2
  }
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_UART_IRQHandler+0x66>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fbf2 	bl	800481c <UART_Receive_IT>
      return;
 8004038:	e25b      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800403a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80de 	beq.w	8004200 <HAL_UART_IRQHandler+0x22c>
 8004044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004054:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80d1 	beq.w	8004200 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_UART_IRQHandler+0xae>
 800406a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f043 0201 	orr.w	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_UART_IRQHandler+0xd2>
 800408e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	f043 0202 	orr.w	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_UART_IRQHandler+0xf6>
 80040b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d011      	beq.n	80040fa <HAL_UART_IRQHandler+0x126>
 80040d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	f043 0208 	orr.w	r2, r3, #8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 81f2 	beq.w	80044e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x14e>
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fb7d 	bl	800481c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412c:	2b40      	cmp	r3, #64	@ 0x40
 800412e:	bf0c      	ite	eq
 8004130:	2301      	moveq	r3, #1
 8004132:	2300      	movne	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_UART_IRQHandler+0x17a>
 8004146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d04f      	beq.n	80041ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa85 	bl	800465e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415e:	2b40      	cmp	r3, #64	@ 0x40
 8004160:	d141      	bne.n	80041e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3314      	adds	r3, #20
 8004168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800417c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3314      	adds	r3, #20
 800418a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800418e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800419a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1d9      	bne.n	8004162 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d013      	beq.n	80041de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	4a7e      	ldr	r2, [pc, #504]	@ (80043b4 <HAL_UART_IRQHandler+0x3e0>)
 80041bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fe ff69 	bl	800309a <HAL_DMA_Abort_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041d8:	4610      	mov	r0, r2
 80041da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	e00e      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f994 	bl	800450c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e00a      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f990 	bl	800450c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e006      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f98c 	bl	800450c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041fa:	e175      	b.n	80044e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	bf00      	nop
    return;
 80041fe:	e173      	b.n	80044e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	f040 814f 	bne.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8148 	beq.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8141 	beq.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004246:	2b40      	cmp	r3, #64	@ 0x40
 8004248:	f040 80b6 	bne.w	80043b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8145 	beq.w	80044ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800426a:	429a      	cmp	r2, r3
 800426c:	f080 813e 	bcs.w	80044ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004276:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004282:	f000 8088 	beq.w	8004396 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800429c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330c      	adds	r3, #12
 80042ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1d9      	bne.n	8004286 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	3314      	adds	r3, #20
 80042d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042e4:	f023 0301 	bic.w	r3, r3, #1
 80042e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3314      	adds	r3, #20
 80042f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004308:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e1      	bne.n	80042d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3314      	adds	r3, #20
 8004314:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004318:	e853 3f00 	ldrex	r3, [r3]
 800431c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800431e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004320:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004324:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3314      	adds	r3, #20
 800432e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004332:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004334:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004338:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004340:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e3      	bne.n	800430e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004366:	f023 0310 	bic.w	r3, r3, #16
 800436a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004378:	65ba      	str	r2, [r7, #88]	@ 0x58
 800437a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800437e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e3      	bne.n	8004354 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe fe12 	bl	8002fba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2202      	movs	r2, #2
 800439a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f8b7 	bl	8004520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b2:	e09b      	b.n	80044ec <HAL_UART_IRQHandler+0x518>
 80043b4:	08004725 	.word	0x08004725
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 808e 	beq.w	80044f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8089 	beq.w	80044f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004402:	647a      	str	r2, [r7, #68]	@ 0x44
 8004404:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004408:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e3      	bne.n	80043de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	623b      	str	r3, [r7, #32]
   return(result);
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800443a:	633a      	str	r2, [r7, #48]	@ 0x30
 800443c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e3      	bne.n	8004416 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60fb      	str	r3, [r7, #12]
   return(result);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004480:	61fa      	str	r2, [r7, #28]
 8004482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	69b9      	ldr	r1, [r7, #24]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	617b      	str	r3, [r7, #20]
   return(result);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e3      	bne.n	800445c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800449a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f83d 	bl	8004520 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a6:	e023      	b.n	80044f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <HAL_UART_IRQHandler+0x4f4>
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f943 	bl	800474c <UART_Transmit_IT>
    return;
 80044c6:	e014      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00e      	beq.n	80044f2 <HAL_UART_IRQHandler+0x51e>
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f983 	bl	80047ec <UART_EndTransmit_IT>
    return;
 80044e6:	e004      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80044f0:	bf00      	nop
  }
}
 80044f2:	37e8      	adds	r7, #232	@ 0xe8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004548:	e03b      	b.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d037      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fd fd6d 	bl	8002030 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	6a3a      	ldr	r2, [r7, #32]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <UART_WaitOnFlagUntilTimeout+0x30>
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e03a      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d023      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b80      	cmp	r3, #128	@ 0x80
 800457e:	d020      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b40      	cmp	r3, #64	@ 0x40
 8004584:	d01d      	beq.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b08      	cmp	r3, #8
 8004592:	d116      	bne.n	80045c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f857 	bl	800465e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2208      	movs	r2, #8
 80045b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e00f      	b.n	80045e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d0b4      	beq.n	800454a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}

080045ea <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	60f8      	str	r0, [r7, #12]
 80045f2:	60b9      	str	r1, [r7, #8]
 80045f4:	4613      	mov	r3, r2
 80045f6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2222      	movs	r2, #34	@ 0x22
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d007      	beq.n	8004630 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800462e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0220 	orr.w	r2, r2, #32
 800464e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800465e:	b480      	push	{r7}
 8004660:	b095      	sub	sp, #84	@ 0x54
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	330c      	adds	r3, #12
 800466c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800467c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004686:	643a      	str	r2, [r7, #64]	@ 0x40
 8004688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800468c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e5      	bne.n	8004666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3314      	adds	r3, #20
 80046a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3314      	adds	r3, #20
 80046b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d119      	bne.n	800470a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	330c      	adds	r3, #12
 80046dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f023 0310 	bic.w	r3, r3, #16
 80046ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	330c      	adds	r3, #12
 80046f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046f6:	61ba      	str	r2, [r7, #24]
 80046f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6979      	ldr	r1, [r7, #20]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	613b      	str	r3, [r7, #16]
   return(result);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e5      	bne.n	80046d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2220      	movs	r2, #32
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004718:	bf00      	nop
 800471a:	3754      	adds	r7, #84	@ 0x54
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f7ff fee4 	bl	800450c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004744:	bf00      	nop
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b21      	cmp	r3, #33	@ 0x21
 800475e:	d13e      	bne.n	80047de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004768:	d114      	bne.n	8004794 <UART_Transmit_IT+0x48>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d110      	bne.n	8004794 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004786:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	1c9a      	adds	r2, r3, #2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	621a      	str	r2, [r3, #32]
 8004792:	e008      	b.n	80047a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6211      	str	r1, [r2, #32]
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	3b01      	subs	r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4619      	mov	r1, r3
 80047b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d10f      	bne.n	80047da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e000      	b.n	80047e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047de:	2302      	movs	r3, #2
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004802:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fe73 	bl	80044f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08c      	sub	sp, #48	@ 0x30
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b22      	cmp	r3, #34	@ 0x22
 800482e:	f040 80ae 	bne.w	800498e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800483a:	d117      	bne.n	800486c <UART_Receive_IT+0x50>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d113      	bne.n	800486c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004844:	2300      	movs	r3, #0
 8004846:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485a:	b29a      	uxth	r2, r3
 800485c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	1c9a      	adds	r2, r3, #2
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	629a      	str	r2, [r3, #40]	@ 0x28
 800486a:	e026      	b.n	80048ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800487e:	d007      	beq.n	8004890 <UART_Receive_IT+0x74>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <UART_Receive_IT+0x82>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	b2da      	uxtb	r2, r3
 8004898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e008      	b.n	80048b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4619      	mov	r1, r3
 80048c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d15d      	bne.n	800498a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0220 	bic.w	r2, r2, #32
 80048dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004910:	2b01      	cmp	r3, #1
 8004912:	d135      	bne.n	8004980 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	613b      	str	r3, [r7, #16]
   return(result);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f023 0310 	bic.w	r3, r3, #16
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	330c      	adds	r3, #12
 8004938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493a:	623a      	str	r2, [r7, #32]
 800493c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	69f9      	ldr	r1, [r7, #28]
 8004940:	6a3a      	ldr	r2, [r7, #32]
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	61bb      	str	r3, [r7, #24]
   return(result);
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e5      	bne.n	800491a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b10      	cmp	r3, #16
 800495a:	d10a      	bne.n	8004972 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff fdd1 	bl	8004520 <HAL_UARTEx_RxEventCallback>
 800497e:	e002      	b.n	8004986 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7fc fc5f 	bl	8001244 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	e002      	b.n	8004990 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	e000      	b.n	8004990 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800498e:	2302      	movs	r3, #2
  }
}
 8004990:	4618      	mov	r0, r3
 8004992:	3730      	adds	r7, #48	@ 0x30
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800499c:	b0c0      	sub	sp, #256	@ 0x100
 800499e:	af00      	add	r7, sp, #0
 80049a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b4:	68d9      	ldr	r1, [r3, #12]
 80049b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	ea40 0301 	orr.w	r3, r0, r1
 80049c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80049f0:	f021 010c 	bic.w	r1, r1, #12
 80049f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80049fe:	430b      	orrs	r3, r1
 8004a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a12:	6999      	ldr	r1, [r3, #24]
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	ea40 0301 	orr.w	r3, r0, r1
 8004a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b8f      	ldr	r3, [pc, #572]	@ (8004c64 <UART_SetConfig+0x2cc>)
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d005      	beq.n	8004a38 <UART_SetConfig+0xa0>
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4b8d      	ldr	r3, [pc, #564]	@ (8004c68 <UART_SetConfig+0x2d0>)
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d104      	bne.n	8004a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a38:	f7ff f9ac 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8004a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a40:	e003      	b.n	8004a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a42:	f7ff f993 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 8004a46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4e:	69db      	ldr	r3, [r3, #28]
 8004a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a54:	f040 810c 	bne.w	8004c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	1891      	adds	r1, r2, r2
 8004a70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a72:	415b      	adcs	r3, r3
 8004a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	eb12 0801 	adds.w	r8, r2, r1
 8004a80:	4629      	mov	r1, r5
 8004a82:	eb43 0901 	adc.w	r9, r3, r1
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a9a:	4690      	mov	r8, r2
 8004a9c:	4699      	mov	r9, r3
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	eb18 0303 	adds.w	r3, r8, r3
 8004aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004aa8:	462b      	mov	r3, r5
 8004aaa:	eb49 0303 	adc.w	r3, r9, r3
 8004aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	18db      	adds	r3, r3, r3
 8004aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004acc:	4613      	mov	r3, r2
 8004ace:	eb42 0303 	adc.w	r3, r2, r3
 8004ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004adc:	f7fb ff1e 	bl	800091c <__aeabi_uldivmod>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4b61      	ldr	r3, [pc, #388]	@ (8004c6c <UART_SetConfig+0x2d4>)
 8004ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	011c      	lsls	r4, r3, #4
 8004aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004af2:	2200      	movs	r2, #0
 8004af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004af8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b00:	4642      	mov	r2, r8
 8004b02:	464b      	mov	r3, r9
 8004b04:	1891      	adds	r1, r2, r2
 8004b06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b08:	415b      	adcs	r3, r3
 8004b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b10:	4641      	mov	r1, r8
 8004b12:	eb12 0a01 	adds.w	sl, r2, r1
 8004b16:	4649      	mov	r1, r9
 8004b18:	eb43 0b01 	adc.w	fp, r3, r1
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b30:	4692      	mov	sl, r2
 8004b32:	469b      	mov	fp, r3
 8004b34:	4643      	mov	r3, r8
 8004b36:	eb1a 0303 	adds.w	r3, sl, r3
 8004b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	eb4b 0303 	adc.w	r3, fp, r3
 8004b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	18db      	adds	r3, r3, r3
 8004b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b62:	4613      	mov	r3, r2
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b72:	f7fb fed3 	bl	800091c <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c6c <UART_SetConfig+0x2d4>)
 8004b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2264      	movs	r2, #100	@ 0x64
 8004b86:	fb02 f303 	mul.w	r3, r2, r3
 8004b8a:	1acb      	subs	r3, r1, r3
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b92:	4b36      	ldr	r3, [pc, #216]	@ (8004c6c <UART_SetConfig+0x2d4>)
 8004b94:	fba3 2302 	umull	r2, r3, r3, r2
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ba0:	441c      	add	r4, r3
 8004ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	464b      	mov	r3, r9
 8004bb8:	1891      	adds	r1, r2, r2
 8004bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bbc:	415b      	adcs	r3, r3
 8004bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	1851      	adds	r1, r2, r1
 8004bc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004bca:	4649      	mov	r1, r9
 8004bcc:	414b      	adcs	r3, r1
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bdc:	4659      	mov	r1, fp
 8004bde:	00cb      	lsls	r3, r1, #3
 8004be0:	4651      	mov	r1, sl
 8004be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004be6:	4651      	mov	r1, sl
 8004be8:	00ca      	lsls	r2, r1, #3
 8004bea:	4610      	mov	r0, r2
 8004bec:	4619      	mov	r1, r3
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4642      	mov	r2, r8
 8004bf2:	189b      	adds	r3, r3, r2
 8004bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bf8:	464b      	mov	r3, r9
 8004bfa:	460a      	mov	r2, r1
 8004bfc:	eb42 0303 	adc.w	r3, r2, r3
 8004c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c18:	460b      	mov	r3, r1
 8004c1a:	18db      	adds	r3, r3, r3
 8004c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c1e:	4613      	mov	r3, r2
 8004c20:	eb42 0303 	adc.w	r3, r2, r3
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c2e:	f7fb fe75 	bl	800091c <__aeabi_uldivmod>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	4b0d      	ldr	r3, [pc, #52]	@ (8004c6c <UART_SetConfig+0x2d4>)
 8004c38:	fba3 1302 	umull	r1, r3, r3, r2
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	2164      	movs	r1, #100	@ 0x64
 8004c40:	fb01 f303 	mul.w	r3, r1, r3
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	3332      	adds	r3, #50	@ 0x32
 8004c4a:	4a08      	ldr	r2, [pc, #32]	@ (8004c6c <UART_SetConfig+0x2d4>)
 8004c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c50:	095b      	lsrs	r3, r3, #5
 8004c52:	f003 0207 	and.w	r2, r3, #7
 8004c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4422      	add	r2, r4
 8004c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c60:	e106      	b.n	8004e70 <UART_SetConfig+0x4d8>
 8004c62:	bf00      	nop
 8004c64:	40011000 	.word	0x40011000
 8004c68:	40011400 	.word	0x40011400
 8004c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c82:	4642      	mov	r2, r8
 8004c84:	464b      	mov	r3, r9
 8004c86:	1891      	adds	r1, r2, r2
 8004c88:	6239      	str	r1, [r7, #32]
 8004c8a:	415b      	adcs	r3, r3
 8004c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c92:	4641      	mov	r1, r8
 8004c94:	1854      	adds	r4, r2, r1
 8004c96:	4649      	mov	r1, r9
 8004c98:	eb43 0501 	adc.w	r5, r3, r1
 8004c9c:	f04f 0200 	mov.w	r2, #0
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	00eb      	lsls	r3, r5, #3
 8004ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004caa:	00e2      	lsls	r2, r4, #3
 8004cac:	4614      	mov	r4, r2
 8004cae:	461d      	mov	r5, r3
 8004cb0:	4643      	mov	r3, r8
 8004cb2:	18e3      	adds	r3, r4, r3
 8004cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cb8:	464b      	mov	r3, r9
 8004cba:	eb45 0303 	adc.w	r3, r5, r3
 8004cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cde:	4629      	mov	r1, r5
 8004ce0:	008b      	lsls	r3, r1, #2
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ce8:	4621      	mov	r1, r4
 8004cea:	008a      	lsls	r2, r1, #2
 8004cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004cf0:	f7fb fe14 	bl	800091c <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4b60      	ldr	r3, [pc, #384]	@ (8004e7c <UART_SetConfig+0x4e4>)
 8004cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	011c      	lsls	r4, r3, #4
 8004d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	1891      	adds	r1, r2, r2
 8004d1a:	61b9      	str	r1, [r7, #24]
 8004d1c:	415b      	adcs	r3, r3
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d24:	4641      	mov	r1, r8
 8004d26:	1851      	adds	r1, r2, r1
 8004d28:	6139      	str	r1, [r7, #16]
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	414b      	adcs	r3, r1
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d3c:	4659      	mov	r1, fp
 8004d3e:	00cb      	lsls	r3, r1, #3
 8004d40:	4651      	mov	r1, sl
 8004d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d46:	4651      	mov	r1, sl
 8004d48:	00ca      	lsls	r2, r1, #3
 8004d4a:	4610      	mov	r0, r2
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4603      	mov	r3, r0
 8004d50:	4642      	mov	r2, r8
 8004d52:	189b      	adds	r3, r3, r2
 8004d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d58:	464b      	mov	r3, r9
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	eb42 0303 	adc.w	r3, r2, r3
 8004d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	008b      	lsls	r3, r1, #2
 8004d80:	4641      	mov	r1, r8
 8004d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d86:	4641      	mov	r1, r8
 8004d88:	008a      	lsls	r2, r1, #2
 8004d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d8e:	f7fb fdc5 	bl	800091c <__aeabi_uldivmod>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4611      	mov	r1, r2
 8004d98:	4b38      	ldr	r3, [pc, #224]	@ (8004e7c <UART_SetConfig+0x4e4>)
 8004d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	2264      	movs	r2, #100	@ 0x64
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	1acb      	subs	r3, r1, r3
 8004da8:	011b      	lsls	r3, r3, #4
 8004daa:	3332      	adds	r3, #50	@ 0x32
 8004dac:	4a33      	ldr	r2, [pc, #204]	@ (8004e7c <UART_SetConfig+0x4e4>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	095b      	lsrs	r3, r3, #5
 8004db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004db8:	441c      	add	r4, r3
 8004dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	60b9      	str	r1, [r7, #8]
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dd8:	4641      	mov	r1, r8
 8004dda:	1851      	adds	r1, r2, r1
 8004ddc:	6039      	str	r1, [r7, #0]
 8004dde:	4649      	mov	r1, r9
 8004de0:	414b      	adcs	r3, r1
 8004de2:	607b      	str	r3, [r7, #4]
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004df0:	4659      	mov	r1, fp
 8004df2:	00cb      	lsls	r3, r1, #3
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	00ca      	lsls	r2, r1, #3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	4642      	mov	r2, r8
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e0a:	464b      	mov	r3, r9
 8004e0c:	460a      	mov	r2, r1
 8004e0e:	eb42 0303 	adc.w	r3, r2, r3
 8004e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	008b      	lsls	r3, r1, #2
 8004e30:	4641      	mov	r1, r8
 8004e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e36:	4641      	mov	r1, r8
 8004e38:	008a      	lsls	r2, r1, #2
 8004e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e3e:	f7fb fd6d 	bl	800091c <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <UART_SetConfig+0x4e4>)
 8004e48:	fba3 1302 	umull	r1, r3, r3, r2
 8004e4c:	095b      	lsrs	r3, r3, #5
 8004e4e:	2164      	movs	r1, #100	@ 0x64
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	3332      	adds	r3, #50	@ 0x32
 8004e5a:	4a08      	ldr	r2, [pc, #32]	@ (8004e7c <UART_SetConfig+0x4e4>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	f003 020f 	and.w	r2, r3, #15
 8004e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4422      	add	r2, r4
 8004e6e:	609a      	str	r2, [r3, #8]
}
 8004e70:	bf00      	nop
 8004e72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e76:	46bd      	mov	sp, r7
 8004e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e7c:	51eb851f 	.word	0x51eb851f

08004e80 <memset>:
 8004e80:	4402      	add	r2, r0
 8004e82:	4603      	mov	r3, r0
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d100      	bne.n	8004e8a <memset+0xa>
 8004e88:	4770      	bx	lr
 8004e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8e:	e7f9      	b.n	8004e84 <memset+0x4>

08004e90 <__libc_init_array>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	4d0d      	ldr	r5, [pc, #52]	@ (8004ec8 <__libc_init_array+0x38>)
 8004e94:	4c0d      	ldr	r4, [pc, #52]	@ (8004ecc <__libc_init_array+0x3c>)
 8004e96:	1b64      	subs	r4, r4, r5
 8004e98:	10a4      	asrs	r4, r4, #2
 8004e9a:	2600      	movs	r6, #0
 8004e9c:	42a6      	cmp	r6, r4
 8004e9e:	d109      	bne.n	8004eb4 <__libc_init_array+0x24>
 8004ea0:	4d0b      	ldr	r5, [pc, #44]	@ (8004ed0 <__libc_init_array+0x40>)
 8004ea2:	4c0c      	ldr	r4, [pc, #48]	@ (8004ed4 <__libc_init_array+0x44>)
 8004ea4:	f000 f818 	bl	8004ed8 <_init>
 8004ea8:	1b64      	subs	r4, r4, r5
 8004eaa:	10a4      	asrs	r4, r4, #2
 8004eac:	2600      	movs	r6, #0
 8004eae:	42a6      	cmp	r6, r4
 8004eb0:	d105      	bne.n	8004ebe <__libc_init_array+0x2e>
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb8:	4798      	blx	r3
 8004eba:	3601      	adds	r6, #1
 8004ebc:	e7ee      	b.n	8004e9c <__libc_init_array+0xc>
 8004ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec2:	4798      	blx	r3
 8004ec4:	3601      	adds	r6, #1
 8004ec6:	e7f2      	b.n	8004eae <__libc_init_array+0x1e>
 8004ec8:	08004f10 	.word	0x08004f10
 8004ecc:	08004f10 	.word	0x08004f10
 8004ed0:	08004f10 	.word	0x08004f10
 8004ed4:	08004f14 	.word	0x08004f14

08004ed8 <_init>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	bf00      	nop
 8004edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ede:	bc08      	pop	{r3}
 8004ee0:	469e      	mov	lr, r3
 8004ee2:	4770      	bx	lr

08004ee4 <_fini>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	bf00      	nop
 8004ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eea:	bc08      	pop	{r3}
 8004eec:	469e      	mov	lr, r3
 8004eee:	4770      	bx	lr
